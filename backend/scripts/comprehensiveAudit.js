const { MongoClient } = require('mongodb');
const redis = require('redis');
const { Web3 } = require('web3');
require('dotenv').config({ path: './.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0',
  REDIS_URL: process.env.REDIS_URL,
  DECIMAL_RPC_URL: process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/',
  WORKING_ADDRESS: process.env.DECIMAL_WORKING_ADDRESS,
  WORKING_PRIVKEY_ENC: process.env.DECIMAL_WORKING_PRIVKEY_ENC,
  KEY_PASSPHRASE: process.env.DECIMAL_KEY_PASSPHRASE
};

class ComprehensiveAudit {
  constructor() {
    this.db = null;
    this.redis = null;
    this.web3 = null;
    this.auditResults = {
      timestamp: new Date(),
      summary: {},
      details: {},
      recommendations: []
    };
  }

  async initialize() {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ DEL...');
    
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
      const client = new MongoClient(config.MONGODB_URI);
      await client.connect();
      this.db = client.db('tapdel');
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
      if (config.REDIS_URL) {
        const redisConfig = config.REDIS_URL.includes('upstash.io') ? {
          url: config.REDIS_URL,
          socket: { tls: true, rejectUnauthorized: false },
          connectTimeout: 60000,
          lazyConnect: true
        } : {
          url: config.REDIS_URL,
          socket: { connectTimeout: 10000, tls: false },
          connectTimeout: 10000,
          lazyConnect: true
        };
        
        this.redis = redis.createClient(redisConfig);
        await this.redis.connect();
        console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain
      this.web3 = new Web3(config.DECIMAL_RPC_URL);
      const blockNumber = await this.web3.eth.getBlockNumber();
      console.log(`‚úÖ DecimalChain –ø–æ–¥–∫–ª—é—á–µ–Ω, –±–ª–æ–∫: ${blockNumber}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async auditDatabaseStructure() {
    console.log('\nüìä –ê—É–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const collections = ['users', 'deposits', 'withdrawals', 'leaderboard'];
    const structure = {};

    for (const collectionName of collections) {
      const collection = this.db.collection(collectionName);
      const count = await collection.countDocuments();
      const indexes = await collection.indexes();
      
      structure[collectionName] = {
        documentCount: count,
        indexes: indexes.map(idx => ({
          name: idx.name,
          key: idx.key,
          unique: idx.unique || false
        }))
      };

      // –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      const recentDocs = await collection.find().sort({ _id: -1 }).limit(3).toArray();
      structure[collectionName].recentDocuments = recentDocs.length;
    }

    this.auditResults.details.databaseStructure = structure;
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async auditDeposits() {
    console.log('\nüí∞ –ê—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    
    const deposits = await this.db.collection('deposits').find().toArray();
    const analysis = {
      total: deposits.length,
      byStatus: {},
      byTimeRange: {},
      issues: []
    };

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    for (const deposit of deposits) {
      const status = deposit.matched ? 
        (deposit.confirmations >= 6 ? 'confirmed' : 'pending') : 
        (deposit.expiresAt < new Date() ? 'expired' : 'waiting');
      
      analysis.byStatus[status] = (analysis.byStatus[status] || 0) + 1;
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const oneHourAgo = new Date(now - 60 * 60 * 1000);
    const oneDayAgo = new Date(now - 24 * 60 * 60 * 1000);

    analysis.byTimeRange = {
      lastHour: deposits.filter(d => d.createdAt > oneHourAgo).length,
      lastDay: deposits.filter(d => d.createdAt > oneDayAgo).length,
      older: deposits.filter(d => d.createdAt <= oneDayAgo).length
    };

    // –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º
    const stuckDeposits = deposits.filter(d => 
      d.matched && d.confirmations < 6 && 
      d.matchedAt < new Date(now - 30 * 60 * 1000) // 30 –º–∏–Ω—É—Ç
    );

    if (stuckDeposits.length > 0) {
      analysis.issues.push({
        type: 'stuck_confirmations',
        count: stuckDeposits.length,
        details: stuckDeposits.map(d => ({
          id: d._id,
          userId: d.userId,
          amount: d.amountRequested,
          confirmations: d.confirmations,
          matchedAt: d.matchedAt
        }))
      });
    }

    const expiredUnmatched = deposits.filter(d => 
      !d.matched && d.expiresAt < new Date()
    );

    if (expiredUnmatched.length > 0) {
      analysis.issues.push({
        type: 'expired_unmatched',
        count: expiredUnmatched.length,
        details: expiredUnmatched.map(d => ({
          id: d._id,
          userId: d.userId,
          amount: d.amountRequested,
          createdAt: d.createdAt,
          expiresAt: d.expiresAt
        }))
      });
    }

    this.auditResults.details.deposits = analysis;
    console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  async auditWithdrawals() {
    console.log('\nüí∏ –ê—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–æ–≤...');
    
    const withdrawals = await this.db.collection('withdrawals').find().toArray();
    const analysis = {
      total: withdrawals.length,
      byStatus: {},
      byTimeRange: {},
      issues: []
    };

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    for (const withdrawal of withdrawals) {
      analysis.byStatus[withdrawal.status] = (analysis.byStatus[withdrawal.status] || 0) + 1;
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const oneHourAgo = new Date(now - 60 * 60 * 1000);
    const oneDayAgo = new Date(now - 24 * 60 * 60 * 1000);

    analysis.byTimeRange = {
      lastHour: withdrawals.filter(w => w.requestedAt > oneHourAgo).length,
      lastDay: withdrawals.filter(w => w.requestedAt > oneDayAgo).length,
      older: withdrawals.filter(w => w.requestedAt <= oneDayAgo).length
    };

    // –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º
    const stuckProcessing = withdrawals.filter(w => 
      w.status === 'processing' && 
      w.processingStartedAt < new Date(now - 10 * 60 * 1000) // 10 –º–∏–Ω—É—Ç
    );

    if (stuckProcessing.length > 0) {
      analysis.issues.push({
        type: 'stuck_processing',
        count: stuckProcessing.length,
        details: stuckProcessing.map(w => ({
          id: w._id,
          userId: w.userId,
          amount: w.amount,
          processingStartedAt: w.processingStartedAt
        }))
      });
    }

    const failedWithdrawals = withdrawals.filter(w => w.status === 'failed');
    if (failedWithdrawals.length > 0) {
      analysis.issues.push({
        type: 'failed_withdrawals',
        count: failedWithdrawals.length,
        details: failedWithdrawals.map(w => ({
          id: w._id,
          userId: w.userId,
          amount: w.amount,
          error: w.error,
          requestedAt: w.requestedAt
        }))
      });
    }

    this.auditResults.details.withdrawals = analysis;
    console.log('‚úÖ –í—ã–≤–æ–¥—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  async auditBlockchainSync() {
    console.log('\nüîó –ê—É–¥–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º...');
    
    if (!this.redis) {
      console.log('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return;
    }

    try {
      const lastBlockKey = 'DECIMAL_LAST_BLOCK';
      const lastProcessedBlock = await this.redis.get(lastBlockKey);
      const currentBlock = await this.web3.eth.getBlockNumber();
      
      const sync = {
        currentBlock: Number(currentBlock),
        lastProcessedBlock: lastProcessedBlock ? parseInt(lastProcessedBlock) : null,
        blocksBehind: lastProcessedBlock ? Number(currentBlock) - parseInt(lastProcessedBlock) : null,
        syncStatus: 'unknown'
      };

      if (sync.blocksBehind !== null) {
        if (sync.blocksBehind <= 5) {
          sync.syncStatus = 'synced';
        } else if (sync.blocksBehind <= 100) {
          sync.syncStatus = 'lagging';
        } else {
          sync.syncStatus = 'severely_lagging';
        }
      }

      this.auditResults.details.blockchainSync = sync;
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  async auditUserBalances() {
    console.log('\nüë• –ê—É–¥–∏—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const users = await this.db.collection('users').find().toArray();
    const analysis = {
      totalUsers: users.length,
      usersWithTokens: 0,
      totalTokens: 0,
      balanceDistribution: {
        zero: 0,
        low: 0, // 0.001 - 1
        medium: 0, // 1 - 10
        high: 0 // > 10
      },
      issues: []
    };

    for (const user of users) {
      const tokens = user.gameState?.tokens || 0;
      
      if (tokens > 0) {
        analysis.usersWithTokens++;
        analysis.totalTokens += tokens;
      }

      if (tokens === 0) {
        analysis.balanceDistribution.zero++;
      } else if (tokens < 1) {
        analysis.balanceDistribution.low++;
      } else if (tokens < 10) {
        analysis.balanceDistribution.medium++;
      } else {
        analysis.balanceDistribution.high++;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
    const highBalanceUsers = users.filter(u => (u.gameState?.tokens || 0) > 1000);
    if (highBalanceUsers.length > 0) {
      analysis.issues.push({
        type: 'high_balance_users',
        count: highBalanceUsers.length,
        details: highBalanceUsers.map(u => ({
          userId: u.userId,
          tokens: u.gameState?.tokens || 0
        }))
      });
    }

    this.auditResults.details.userBalances = analysis;
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  async auditConfiguration() {
    console.log('\n‚öôÔ∏è –ê—É–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    const config = {
      environment: {
        NODE_ENV: process.env.NODE_ENV || 'development',
        REDIS_URL: process.env.REDIS_URL ? 'configured' : 'missing',
        DECIMAL_RPC_URL: process.env.DECIMAL_RPC_URL ? 'configured' : 'default',
        DECIMAL_WORKING_ADDRESS: process.env.DECIMAL_WORKING_ADDRESS ? 'configured' : 'missing',
        DECIMAL_WORKING_PRIVKEY_ENC: process.env.DECIMAL_WORKING_PRIVKEY_ENC ? 'configured' : 'missing',
        DECIMAL_KEY_PASSPHRASE: process.env.DECIMAL_KEY_PASSPHRASE ? 'configured' : 'missing'
      },
      issues: []
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (!process.env.REDIS_URL) {
      config.issues.push('REDIS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    if (!process.env.DECIMAL_WORKING_ADDRESS) {
      config.issues.push('DECIMAL_WORKING_ADDRESS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    if (!process.env.DECIMAL_WORKING_PRIVKEY_ENC) {
      config.issues.push('DECIMAL_WORKING_PRIVKEY_ENC –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    if (!process.env.DECIMAL_KEY_PASSPHRASE) {
      config.issues.push('DECIMAL_KEY_PASSPHRASE –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    this.auditResults.details.configuration = config;
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async generateRecommendations() {
    console.log('\nüí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    
    const recommendations = [];

    // –ê–Ω–∞–ª–∏–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    if (this.auditResults.details.deposits?.issues?.length > 0) {
      recommendations.push({
        priority: 'high',
        category: 'deposits',
        issue: '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏',
        actions: [
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫—á–µ–π–Ω–∞',
          '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã',
          '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        ]
      });
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—ã–≤–æ–¥–æ–≤
    if (this.auditResults.details.withdrawals?.issues?.length > 0) {
      recommendations.push({
        priority: 'high',
        category: 'withdrawals',
        issue: '–ü—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–∞–º–∏',
        actions: [
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ—Ä–∫–µ—Ä –≤—ã–≤–æ–¥–æ–≤',
          '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
          '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∞'
        ]
      });
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
    const sync = this.auditResults.details.blockchainSync;
    if (sync?.syncStatus === 'severely_lagging') {
      recommendations.push({
        priority: 'critical',
        category: 'blockchain',
        issue: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        actions: [
          '–°–±—Ä–æ—Å–∏—Ç—å lastProcessedBlock –≤ Redis',
          '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
          '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å RPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'
        ]
      });
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if (this.auditResults.details.configuration?.issues?.length > 0) {
      recommendations.push({
        priority: 'critical',
        category: 'configuration',
        issue: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π',
        actions: this.auditResults.details.configuration.issues.map(issue => `–ò—Å–ø—Ä–∞–≤–∏—Ç—å: ${issue}`)
      });
    }

    this.auditResults.recommendations = recommendations;
    console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  }

  async generateSummary() {
    console.log('\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏...');
    
    const summary = {
      overallStatus: 'unknown',
      criticalIssues: 0,
      highPriorityIssues: 0,
      totalIssues: 0
    };

    // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º
    const allIssues = [
      ...(this.auditResults.details.deposits?.issues || []),
      ...(this.auditResults.details.withdrawals?.issues || []),
      ...(this.auditResults.details.configuration?.issues || [])
    ];

    summary.totalIssues = allIssues.length;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    const sync = this.auditResults.details.blockchainSync;
    const configIssues = this.auditResults.details.configuration?.issues?.length || 0;

    if (configIssues > 0 || sync?.syncStatus === 'severely_lagging') {
      summary.overallStatus = 'critical';
      summary.criticalIssues = configIssues + (sync?.syncStatus === 'severely_lagging' ? 1 : 0);
    } else if (allIssues.length > 0) {
      summary.overallStatus = 'warning';
      summary.highPriorityIssues = allIssues.length;
    } else {
      summary.overallStatus = 'healthy';
    }

    this.auditResults.summary = summary;
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async runFullAudit() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–æ—Å–∫–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ DEL...\n');
    
    try {
      await this.initialize();
      
      await this.auditDatabaseStructure();
      await this.auditDeposits();
      await this.auditWithdrawals();
      await this.auditBlockchainSync();
      await this.auditUserBalances();
      await this.auditConfiguration();
      
      await this.generateRecommendations();
      await this.generateSummary();
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞:');
      console.log(JSON.stringify(this.auditResults, null, 2));
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const auditCollection = this.db.collection('audits');
      await auditCollection.insertOne({
        ...this.auditResults,
        createdAt: new Date()
      });
      
      console.log('\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞:', error);
    } finally {
      if (this.redis) await this.redis.disconnect();
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
const audit = new ComprehensiveAudit();
audit.runFullAudit(); 