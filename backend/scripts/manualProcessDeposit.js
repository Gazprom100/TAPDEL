const databaseConfig = require('../config/database');
const config = require('../config/decimal');

async function manualProcessDeposit() {
  try {
    console.log('üîß –†–£–ß–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ü–û–ó–ò–¢–ê');
    console.log('================================');
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ explorer
    const txHash = '0xC3AB0FB9CEB1BCFB597B143C8DC34BE3032263A6922258F1EC73C2EC7EA88BEC';
    const txValue = 1000.8831; // –°—É–º–º–∞ –∏–∑ explorer
    const txTo = '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43'; // –†–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å
    const blockNumber = 27161200; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞
    
    console.log(`üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`);
    console.log(`   TX Hash: ${txHash}`);
    console.log(`   –°—É–º–º–∞: ${txValue} DEL`);
    console.log(`   –ö–æ–º—É: ${txTo}`);
    console.log(`   –ë–ª–æ–∫: ${blockNumber}`);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await databaseConfig.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–ø–æ–∑–∏—Ç
    const deposits = await database.collection('deposits').find({
      matched: false,
      expiresAt: { $gt: new Date() }
    }).toArray();
    
    console.log(`\nüîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
    
    let matchingDeposit = null;
    
    for (const deposit of deposits) {
      const roundedValue = Math.round(txValue * 10000) / 10000;
      const depositRounded = Math.round(deposit.uniqueAmount * 10000) / 10000;
      const EPSILON = 0.00005;
      
      console.log(`\n   –î–µ–ø–æ–∑–∏—Ç ${deposit.uniqueAmount} DEL:`);
      console.log(`     –û–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ TX: ${roundedValue}`);
      console.log(`     –û–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositRounded}`);
      console.log(`     –†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(roundedValue - depositRounded)}`);
      console.log(`     –ü–æ–¥—Ö–æ–¥–∏—Ç: ${Math.abs(roundedValue - depositRounded) <= EPSILON ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      
      if (Math.abs(roundedValue - depositRounded) <= EPSILON) {
        matchingDeposit = deposit;
        console.log(`   üéâ –ù–ê–ô–î–ï–ù –ü–û–î–•–û–î–Ø–©–ò–ô –î–ï–ü–û–ó–ò–¢!`);
        console.log(`   ID: ${deposit._id}`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${deposit.userId}`);
        console.log(`   –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${deposit.amountRequested} DEL`);
        console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${deposit.uniqueAmount} DEL`);
      }
    }
    
    if (!matchingDeposit) {
      console.log('\n‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    const existingDeposit = await database.collection('deposits').findOne({
      txHash: txHash
    });
    
    if (existingDeposit) {
      console.log(`\n‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!`);
      console.log(`   –î–µ–ø–æ–∑–∏—Ç ID: ${existingDeposit._id}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${existingDeposit.matched ? 'matched' : 'waiting'}`);
      console.log(`   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${existingDeposit.confirmations || 0}`);
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –≤—Ä—É—á–Ω—É—é
    console.log('\nüîÑ –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
    await database.collection('deposits').updateOne(
      { _id: matchingDeposit._id },
      {
        $set: {
          txHash: txHash,
          matched: true,
          confirmations: 6, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
          matchedAt: new Date()
        }
      }
    );
    
    console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await database.collection('users').findOne({ userId: matchingDeposit.userId });
    if (!user) {
      console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${matchingDeposit.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentTokens = user.gameState?.tokens || 0;
    const newTokens = currentTokens + matchingDeposit.amountRequested;
    
    await database.collection('users').updateOne(
      { userId: matchingDeposit.userId },
      {
        $set: {
          "gameState.tokens": newTokens,
          "gameState.lastSaved": new Date(),
          updatedAt: new Date()
        }
      }
    );
    
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω!`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username || user.telegramUsername}`);
    console.log(`   –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: ${currentTokens} DEL`);
    console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newTokens} DEL`);
    console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ: +${matchingDeposit.amountRequested} DEL`);
    
    console.log('\nüéâ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
  }
}

manualProcessDeposit(); 