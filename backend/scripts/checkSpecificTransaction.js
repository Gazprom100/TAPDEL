const decimalService = require('../services/decimalService');
const databaseConfig = require('../config/database');
const config = require('../config/decimal');

async function checkSpecificTransaction() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò');
    console.log('=====================================');
    
    const txHash = '0xC3AB0FB9CEB1BCFB597B143C8DC34BE3032263A6922258F1EC73C2EC7EA88BEC';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalService
    if (!decimalService.web3) {
      await decimalService.initialize();
    }
    console.log('‚úÖ DecimalService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log(`\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txHash}`);
    const tx = await decimalService.web3.eth.getTransaction(txHash);
    
    if (!tx) {
      console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:');
    console.log(`   From: ${tx.from}`);
    console.log(`   To: ${tx.to}`);
    console.log(`   Value: ${decimalService.web3.utils.fromWei(tx.value, 'ether')} DEL`);
    console.log(`   Block Number: ${tx.blockNumber}`);
    console.log(`   Gas Used: ${tx.gas}`);
    console.log(`   Gas Price: ${decimalService.web3.utils.fromWei(tx.gasPrice, 'gwei')} gwei`);
    
    // –ü–æ–ª—É—á–∞–µ–º receipt
    const receipt = await decimalService.web3.eth.getTransactionReceipt(txHash);
    if (receipt) {
      console.log(`   Status: ${receipt.status ? 'Success' : 'Failed'}`);
      console.log(`   Gas Used: ${receipt.gasUsed}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å
    const isToWorkingAddress = tx.to && tx.to.toLowerCase() === config.WORKING_ADDRESS.toLowerCase();
    console.log(`\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:`);
    console.log(`   –†–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å: ${config.WORKING_ADDRESS}`);
    console.log(`   –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${tx.to}`);
    console.log(`   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å: ${isToWorkingAddress ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
    if (isToWorkingAddress) {
      const value = parseFloat(decimalService.web3.utils.fromWei(tx.value, 'ether'));
      console.log(`\nüí∞ –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${value} DEL`);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const database = await databaseConfig.connect();
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
      
      // –ò—â–µ–º –¥–µ–ø–æ–∑–∏—Ç —Å —Ç–∞–∫–æ–π —Å—É–º–º–æ–π
      const deposits = await database.collection('deposits').find({
        matched: false,
        expiresAt: { $gt: new Date() }
      }).toArray();
      
      console.log(`\nüîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:`);
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
      
      for (const deposit of deposits) {
        const roundedValue = Math.round(value * 10000) / 10000;
        const depositRounded = Math.round(deposit.uniqueAmount * 10000) / 10000;
        const EPSILON = 0.00005;
        
        console.log(`\n   –î–µ–ø–æ–∑–∏—Ç ${deposit.uniqueAmount} DEL:`);
        console.log(`     –û–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ TX: ${roundedValue}`);
        console.log(`     –û–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositRounded}`);
        console.log(`     –†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(roundedValue - depositRounded)}`);
        console.log(`     –ü–æ–¥—Ö–æ–¥–∏—Ç: ${Math.abs(roundedValue - depositRounded) <= EPSILON ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        
        if (Math.abs(roundedValue - depositRounded) <= EPSILON) {
          console.log(`   üéâ –ù–ê–ô–î–ï–ù –ü–û–î–•–û–î–Ø–©–ò–ô –î–ï–ü–û–ó–ò–¢!`);
          console.log(`   ID: ${deposit._id}`);
          console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${deposit.userId}`);
          console.log(`   –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${deposit.amountRequested} DEL`);
          console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${deposit.uniqueAmount} DEL`);
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
      const existingDeposit = await database.collection('deposits').findOne({
        txHash: txHash
      });
      
      if (existingDeposit) {
        console.log(`\n‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!`);
        console.log(`   –î–µ–ø–æ–∑–∏—Ç ID: ${existingDeposit._id}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${existingDeposit.matched ? 'matched' : 'waiting'}`);
        console.log(`   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${existingDeposit.confirmations || 0}`);
      } else {
        console.log(`\n‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!`);
        console.log(`   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
        console.log(`   - –°—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º`);
        console.log(`   - –î–µ–ø–æ–∑–∏—Ç –∏—Å—Ç–µ–∫`);
        console.log(`   - –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
      }
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

checkSpecificTransaction(); 