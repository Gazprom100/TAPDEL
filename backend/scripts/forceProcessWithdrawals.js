require('dotenv').config();
const { MongoClient } = require('mongodb');
const decimalService = require('../services/decimalService');

const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%25sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  return `mongodb+srv://${username}:${password}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

async function forceProcessWithdrawals() {
  try {
    console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalService
    await decimalService.initialize();
    console.log('‚úÖ DecimalService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    const client = new MongoClient(generateCleanMongoURI());
    await client.connect();
    const db = client.db('tapdel');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–≤–æ–¥—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ processing
    const withdrawals = await db.collection('withdrawals').find({
      status: { $in: ['queued', 'processing'] }
    }).sort({ requestedAt: 1 }).toArray();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${withdrawals.length}`);
    
    for (const withdrawal of withdrawals) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ ${withdrawal._id}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.userId}`);
      console.log(`   –°—É–º–º–∞: ${withdrawal.amount} —Ç–æ–∫–µ–Ω–æ–≤`);
      console.log(`   –ê–¥—Ä–µ—Å: ${withdrawal.toAddress}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
      
      try {
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
        await db.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          { $set: { status: 'processing', processingStartedAt: new Date() } }
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        const workingBalance = await decimalService.getWorkingBalance();
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${workingBalance} BOOST`);
        
        if (workingBalance < withdrawal.amount) {
          throw new Error(`Insufficient working wallet balance: ${workingBalance} < ${withdrawal.amount}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);
        const txHash = await decimalService.signAndSend(withdrawal.toAddress, withdrawal.amount);
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
        await db.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          {
            $set: {
              txHash: txHash,
              status: 'sent',
              processedAt: new Date()
            },
            $unset: { processingStartedAt: 1 }
          }
        );
        
        console.log(`   ‚úÖ –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
        console.log(`   üìÑ TX Hash: ${txHash}`);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: ${error.message}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await db.collection('users').updateOne(
          { userId: withdrawal.userId },
          { $inc: { "gameState.tokens": withdrawal.amount } }
        );
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
        await db.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          {
            $set: {
              status: 'failed',
              error: error.message,
              processedAt: new Date()
            },
            $unset: { processingStartedAt: 1 }
          }
        );
        
        console.log(`   üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: +${withdrawal.amount} —Ç–æ–∫–µ–Ω–æ–≤`);
      }
    }
    
    console.log('\n‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    await client.close();
    await decimalService.disconnect();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
forceProcessWithdrawals(); 