const { connectToDatabase } = require('../config/database');

async function testAllAdminFunctions() {
  try {
    console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –§–£–ù–ö–¶–ò–ô –ê–î–ú–ò–ù–ö–ò');
    console.log('===============================================');
    
    const { default: fetch } = await import('node-fetch');
    
    const baseUrl = 'http://localhost:3001/api';
    let failedTests = [];
    let passedTests = [];
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoint
    const testEndpoint = async (name, method, url, body = null) => {
      try {
        const options = {
          method,
          headers: { 'Content-Type': 'application/json' }
        };
        
        if (body) {
          options.body = JSON.stringify(body);
        }
        
        const response = await fetch(`${baseUrl}${url}`, options);
        const data = await response.json();
        
        if (response.ok && data.success !== false) {
          console.log(`‚úÖ ${name}: –†–∞–±–æ—Ç–∞–µ—Ç`);
          passedTests.push(name);
          return { success: true, data };
        } else {
          console.log(`‚ùå ${name}: –û—à–∏–±–∫–∞ - ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
          failedTests.push(`${name}: ${data.error || 'HTTP ' + response.status}`);
          return { success: false, data };
        }
      } catch (error) {
        console.log(`‚ùå ${name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - ${error.message}`);
        failedTests.push(`${name}: ${error.message}`);
        return { success: false, error: error.message };
      }
    };
    
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ò');
    console.log('=====================================');
    
    await testEndpoint('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'GET', '/admin/stats');
    await testEndpoint('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'GET', '/admin/users');
    await testEndpoint('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 'GET', '/admin/transactions');
    await testEndpoint('–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', 'GET', '/admin/system');
    await testEndpoint('–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏', 'GET', '/admin/economy');
    await testEndpoint('–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã', 'GET', '/admin/logs');
    
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–û–í');
    console.log('=====================');
    
    await testEndpoint('–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã', 'GET', '/admin/tokens');
    await testEndpoint('–ò—Å—Ç–æ—Ä–∏—è —Ç–æ–∫–µ–Ω–æ–≤', 'GET', '/admin/tokens/history');
    await testEndpoint('–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω', 'GET', '/active-token');
    
    // –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    const newToken = {
      symbol: 'TEST',
      address: '0x1234567890123456789012345678901234567890',
      decimals: 18,
      name: 'Test Token'
    };
    await testEndpoint('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', 'POST', '/admin/tokens/add', newToken);
    
    // –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ (–≤–µ—Ä–Ω–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π)
    const currentToken = await testEndpoint('–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω', 'GET', '/active-token');
    if (currentToken.success) {
      const currentSymbol = currentToken.data.token.symbol;
      await testEndpoint('–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞', 'POST', '/admin/tokens/activate', { symbol: currentSymbol });
    }
    
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò');
    console.log('=====================================');
    
    // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const usersResponse = await testEndpoint('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'GET', '/admin/users');
    let testUserId = null;
    
    if (usersResponse.success && usersResponse.data.users.length > 0) {
      testUserId = usersResponse.data.users[0].userId;
      console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUserId}`);
      
      // –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      await testEndpoint('–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'GET', `/admin/users/${testUserId}`);
      await testEndpoint('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'PUT', `/admin/users/${testUserId}`, {
        tokens: 1000,
        engineLevel: 2
      });
      await testEndpoint('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'GET', `/admin/users/${testUserId}`);
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
    }
    
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô');
    console.log('====================================');
    
    await testEndpoint('–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ç–æ–∫–µ–Ω–æ–≤', 'POST', '/admin/tokens/clear-cache');
    
    // –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await testEndpoint('–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'POST', '/admin/users/bulk', {
      operation: 'test',
      userIds: [testUserId || 'test-user'],
      value: 100
    });
    
    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ô');
    console.log('========================');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Decimal API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    await testEndpoint('–°—Ç–∞—Ç—É—Å Decimal', 'GET', '/decimal/status');
    await testEndpoint('–î–µ–ø–æ–∑–∏—Ç—ã Decimal', 'GET', '/decimal/deposits');
    await testEndpoint('–í—ã–≤–æ–¥—ã Decimal', 'GET', '/decimal/withdrawals');
    
    console.log('\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('=========================');
    
    try {
      const database = await connectToDatabase();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –†–∞–±–æ—Ç–∞–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
      const collections = ['users', 'system_config', 'token_history', 'user_token_balances', 'transactions', 'deposits', 'withdrawals'];
      
      for (const collection of collections) {
        try {
          const count = await database.collection(collection).countDocuments();
          console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collection}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
          passedTests.push(`–ë–î: ${collection}`);
        } catch (error) {
          console.log(`‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collection}: –û—à–∏–±–∫–∞ - ${error.message}`);
          failedTests.push(`–ë–î: ${collection} - ${error.message}`);
        }
      }
    } catch (error) {
      console.log(`‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
      failedTests.push(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
    
    console.log('\n7Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('==================');
    
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í:`);
    console.log(`‚úÖ –ü—Ä–æ—à–ª–∏: ${passedTests.length}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: ${failedTests.length}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passedTests.length / (passedTests.length + failedTests.length)) * 100)}%`);
    
    if (failedTests.length > 0) {
      console.log(`\n‚ùå –ù–ï–†–ê–ë–û–¢–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò:`);
      failedTests.forEach((test, index) => {
        console.log(`   ${index + 1}. ${test}`);
      });
      
      console.log(`\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:`);
      if (failedTests.some(test => test.includes('404') || test.includes('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'))) {
        console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–æ–≤ –≤ server.js`);
      }
      if (failedTests.some(test => test.includes('–ë–î'))) {
        console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB`);
      }
      if (failedTests.some(test => test.includes('Decimal'))) {
        console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Decimal API`);
      }
      if (failedTests.some(test => test.includes('ECONNREFUSED'))) {
        console.log(`   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001`);
      }
    } else {
      console.log(`\nüéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –ê–î–ú–ò–ù–ö–ò –†–ê–ë–û–¢–ê–Æ–¢ –ò–°–ü–†–ê–í–ù–û!`);
    }
    
    console.log(`\nüìã –î–ï–¢–ê–õ–ò –†–ê–ë–û–¢–ê–Æ–©–ò–• –§–£–ù–ö–¶–ò–ô:`);
    passedTests.forEach((test, index) => {
      console.log(`   ${index + 1}. ${test}`);
    });
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testAllAdminFunctions(); 