const { MongoClient } = require('mongodb');
const redis = require('redis');
const { Web3 } = require('web3');
require('dotenv').config({ path: './.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0',
  REDIS_URL: process.env.REDIS_URL,
  DECIMAL_RPC_URL: process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/',
  WORKING_ADDRESS: process.env.DECIMAL_WORKING_ADDRESS,
  API_BASE_URL: 'http://localhost:3000/api/decimal'
};

class SystemTester {
  constructor() {
    this.db = null;
    this.redis = null;
    this.web3 = null;
    this.testResults = {
      timestamp: new Date(),
      tests: [],
      summary: {}
    };
  }

  async initialize() {
    console.log('üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...');
    
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
      const client = new MongoClient(config.MONGODB_URI);
      await client.connect();
      this.db = client.db('tapdel');
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
      if (config.REDIS_URL) {
        const redisConfig = config.REDIS_URL.includes('upstash.io') ? {
          url: config.REDIS_URL,
          socket: { tls: true, rejectUnauthorized: false },
          connectTimeout: 60000,
          lazyConnect: true
        } : {
          url: config.REDIS_URL,
          socket: { connectTimeout: 10000, tls: false },
          connectTimeout: 10000,
          lazyConnect: true
        };
        
        this.redis = redis.createClient(redisConfig);
        await this.redis.connect();
        console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain
      this.web3 = new Web3(config.DECIMAL_RPC_URL);
      const blockNumber = await this.web3.eth.getBlockNumber();
      console.log(`‚úÖ DecimalChain –ø–æ–¥–∫–ª—é—á–µ–Ω, –±–ª–æ–∫: ${blockNumber}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async testAPI() {
    console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
    
    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
      const response = await fetch(`${config.API_BASE_URL}/test`);
      const data = await response.json();
      
      if (response.ok && data.message === 'DecimalChain API —Ä–∞–±–æ—Ç–∞–µ—Ç!') {
        this.testResults.tests.push({
          name: 'API Availability',
          status: 'PASS',
          details: data
        });
        console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        this.testResults.tests.push({
          name: 'API Availability',
          status: 'FAIL',
          details: { response: response.status, data }
        });
        console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (error) {
      this.testResults.tests.push({
        name: 'API Availability',
        status: 'ERROR',
        details: { error: error.message }
      });
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:', error.message);
    }
  }

  async testBlockchainSync() {
    console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º...');
    
    if (!this.redis) {
      console.log('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return;
    }

    try {
      const lastBlockKey = 'DECIMAL_LAST_BLOCK';
      const lastProcessedBlock = await this.redis.get(lastBlockKey);
      const currentBlock = await this.web3.eth.getBlockNumber();
      
      const blocksBehind = lastProcessedBlock ? Number(currentBlock) - parseInt(lastProcessedBlock) : null;
      
      if (blocksBehind !== null && blocksBehind <= 10) {
        this.testResults.tests.push({
          name: 'Blockchain Sync',
          status: 'PASS',
          details: {
            currentBlock: Number(currentBlock),
            lastProcessedBlock: parseInt(lastProcessedBlock),
            blocksBehind: blocksBehind
          }
        });
        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –Ω–æ—Ä–º–µ: –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ ${blocksBehind} –±–ª–æ–∫–æ–≤`);
      } else {
        this.testResults.tests.push({
          name: 'Blockchain Sync',
          status: 'FAIL',
          details: {
            currentBlock: Number(currentBlock),
            lastProcessedBlock: lastProcessedBlock,
            blocksBehind: blocksBehind
          }
        });
        console.log(`‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç—Å—Ç–∞–µ—Ç: –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ ${blocksBehind} –±–ª–æ–∫–æ–≤`);
      }
    } catch (error) {
      this.testResults.tests.push({
        name: 'Blockchain Sync',
        status: 'ERROR',
        details: { error: error.message }
      });
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    }
  }

  async testDepositCreation() {
    console.log('\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞...');
    
    try {
      const testUserId = 'test_deposit_' + Date.now();
      const testAmount = 0.001;
      
      const response = await fetch(`${config.API_BASE_URL}/deposits`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: testUserId,
          baseAmount: testAmount
        })
      });
      
      const data = await response.json();
      
      if (response.ok && data.uniqueAmount && data.address) {
        this.testResults.tests.push({
          name: 'Deposit Creation',
          status: 'PASS',
          details: {
            userId: testUserId,
            amount: testAmount,
            uniqueAmount: data.uniqueAmount,
            address: data.address
          }
        });
        console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω: ${testAmount} ‚Üí ${data.uniqueAmount} DEL`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        this.testResults.testDepositId = data.depositId;
      } else {
        this.testResults.tests.push({
          name: 'Deposit Creation',
          status: 'FAIL',
          details: { response: response.status, data }
        });
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', data);
      }
    } catch (error) {
      this.testResults.tests.push({
        name: 'Deposit Creation',
        status: 'ERROR',
        details: { error: error.message }
      });
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error.message);
    }
  }

  async testWithdrawalCreation() {
    console.log('\nüí∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞...');
    
    try {
      const testUserId = 'test_withdrawal_' + Date.now();
      const testAmount = 0.001;
      const testAddress = '0x1234567890123456789012345678901234567890';
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º
      await this.db.collection('users').insertOne({
        userId: testUserId,
        gameState: {
          tokens: testAmount,
          lastSaved: new Date()
        },
        createdAt: new Date()
      });
      
      const response = await fetch(`${config.API_BASE_URL}/withdrawals`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId: testUserId,
          toAddress: testAddress,
          amount: testAmount
        })
      });
      
      const data = await response.json();
      
      if (response.ok && data.withdrawalId && data.status === 'queued') {
        this.testResults.tests.push({
          name: 'Withdrawal Creation',
          status: 'PASS',
          details: {
            userId: testUserId,
            amount: testAmount,
            address: testAddress,
            withdrawalId: data.withdrawalId
          }
        });
        console.log(`‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω: ${testAmount} DEL ‚Üí ${testAddress}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        this.testResults.testWithdrawalId = data.withdrawalId;
      } else {
        this.testResults.tests.push({
          name: 'Withdrawal Creation',
          status: 'FAIL',
          details: { response: response.status, data }
        });
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', data);
      }
    } catch (error) {
      this.testResults.tests.push({
        name: 'Withdrawal Creation',
        status: 'ERROR',
        details: { error: error.message }
      });
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error.message);
    }
  }

  async testDatabaseIntegrity() {
    console.log('\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userCount = await this.db.collection('users').countDocuments();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
      const activeWithdrawals = await this.db.collection('withdrawals').countDocuments({
        status: { $in: ['queued', 'processing'] }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      const activeDeposits = await this.db.collection('deposits').countDocuments({
        matched: false,
        expiresAt: { $gt: new Date() }
      });
      
      const integrityOk = userCount > 0 && activeWithdrawals >= 0 && activeDeposits >= 0;
      
      if (integrityOk) {
        this.testResults.tests.push({
          name: 'Database Integrity',
          status: 'PASS',
          details: {
            users: userCount,
            activeWithdrawals: activeWithdrawals,
            activeDeposits: activeDeposits
          }
        });
        console.log(`‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î: ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${activeWithdrawals} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤, ${activeDeposits} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
      } else {
        this.testResults.tests.push({
          name: 'Database Integrity',
          status: 'FAIL',
          details: {
            users: userCount,
            activeWithdrawals: activeWithdrawals,
            activeDeposits: activeDeposits
          }
        });
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å—é –ë–î');
      }
    } catch (error) {
      this.testResults.tests.push({
        name: 'Database Integrity',
        status: 'ERROR',
        details: { error: error.message }
      });
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î:', error.message);
    }
  }

  async cleanupTestData() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const testUsersResult = await this.db.collection('users').deleteMany({
        userId: { $regex: /^test_/ }
      });
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
      const testDepositsResult = await this.db.collection('deposits').deleteMany({
        userId: { $regex: /^test_/ }
      });
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
      const testWithdrawalsResult = await this.db.collection('withdrawals').deleteMany({
        userId: { $regex: /^test_/ }
      });
      
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ: ${testUsersResult.deletedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${testDepositsResult.deletedCount} –¥–µ–ø–æ–∑–∏—Ç–æ–≤, ${testWithdrawalsResult.deletedCount} –≤—ã–≤–æ–¥–æ–≤`);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }

  async generateSummary() {
    console.log('\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤...');
    
    const summary = {
      totalTests: this.testResults.tests.length,
      passed: this.testResults.tests.filter(t => t.status === 'PASS').length,
      failed: this.testResults.tests.filter(t => t.status === 'FAIL').length,
      errors: this.testResults.tests.filter(t => t.status === 'ERROR').length,
      successRate: 0
    };
    
    summary.successRate = summary.totalTests > 0 ? (summary.passed / summary.totalTests * 100).toFixed(1) : 0;
    
    this.testResults.summary = summary;
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async runFullTest() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ DEL...\n');
    
    try {
      await this.initialize();
      
      await this.testAPI();
      await this.testBlockchainSync();
      await this.testDatabaseIntegrity();
      await this.testDepositCreation();
      await this.testWithdrawalCreation();
      
      await this.generateSummary();
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
      console.log(JSON.stringify(this.testResults, null, 2));
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const testCollection = this.db.collection('system_tests');
      await testCollection.insertOne({
        ...this.testResults,
        createdAt: new Date()
      });
      
      console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      if (this.testResults.summary.successRate >= 80) {
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!');
        console.log('üîÑ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É');
      } else {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
      await this.cleanupTestData();
      if (this.redis) await this.redis.disconnect();
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const tester = new SystemTester();
tester.runFullTest(); 