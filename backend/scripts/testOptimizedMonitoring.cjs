const { MongoClient } = require('mongodb');

async function testOptimizedMonitoring() {
  try {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê');
    console.log('==============================================\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const generateCleanMongoURI = () => {
      const username = 'TAPDEL';
      const password = 'fpz%sE62KPzmHfM';
      const cluster = 'cluster0.ejo8obw.mongodb.net';
      const database = 'tapdel';
      
      const encodedPassword = encodeURIComponent(password);
      return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
    };

    const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
    const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';
    
    const client = new MongoClient(MONGODB_URI);
    await client.connect();
    const database = client.db(MONGODB_DB);
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    const activeDeposits = await database.collection('deposits').countDocuments({
      matched: false,
      expiresAt: { $gt: new Date() }
    });
    
    console.log(`üì• –ê–ö–¢–ò–í–ù–´–ï –î–ï–ü–û–ó–ò–¢–´: ${activeDeposits}`);
    
    if (activeDeposits > 0) {
      const deposits = await database.collection('deposits').find({
        matched: false,
        expiresAt: { $gt: new Date() }
      }).toArray();
      
      for (const deposit of deposits) {
        const timeLeft = Math.round((deposit.expiresAt - new Date()) / 1000 / 60);
        console.log(`   - ${deposit.userId}: ${deposit.uniqueAmount} DEL (–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${timeLeft} –º–∏–Ω)`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    const queuedWithdrawals = await database.collection('withdrawals').countDocuments({
      status: 'queued'
    });
    
    const processingWithdrawals = await database.collection('withdrawals').countDocuments({
      status: 'processing'
    });
    
    console.log(`\nüì§ –ê–ö–¢–ò–í–ù–´–ï –í–´–í–û–î–´:`);
    console.log(`   –í –æ—á–µ—Ä–µ–¥–∏: ${queuedWithdrawals}`);
    console.log(`   –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${processingWithdrawals}`);
    
    if (queuedWithdrawals > 0) {
      const withdrawals = await database.collection('withdrawals').find({
        status: 'queued'
      }).toArray();
      
      for (const withdrawal of withdrawals) {
        const timeWaiting = Math.round((new Date() - withdrawal.requestedAt) / 1000 / 60);
        console.log(`   - ${withdrawal.userId}: ${withdrawal.amount} DEL ‚Üí ${withdrawal.toAddress} (–æ–∂–∏–¥–∞–µ—Ç ${timeWaiting} –º–∏–Ω)`);
      }
    }
    
    if (processingWithdrawals > 0) {
      const withdrawals = await database.collection('withdrawals').find({
        status: 'processing'
      }).toArray();
      
      for (const withdrawal of withdrawals) {
        const timeProcessing = Math.round((new Date() - withdrawal.processingStartedAt) / 1000);
        console.log(`   - ${withdrawal.userId}: ${withdrawal.amount} DEL ‚Üí ${withdrawal.toAddress} (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ${timeProcessing} —Å–µ–∫)`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã
    const stuckWithdrawals = await database.collection('withdrawals').countDocuments({
      status: 'processing',
      processingStartedAt: { $lt: new Date(Date.now() - 5 * 60 * 1000) } // 5 –º–∏–Ω—É—Ç
    });
    
    console.log(`\n‚ö†Ô∏è –ó–ê–°–¢–†–Ø–í–®–ò–ï –í–´–í–û–î–´ (>5 –º–∏–Ω): ${stuckWithdrawals}`);
    
    if (stuckWithdrawals > 0) {
      const withdrawals = await database.collection('withdrawals').find({
        status: 'processing',
        processingStartedAt: { $lt: new Date(Date.now() - 5 * 60 * 1000) }
      }).toArray();
      
      for (const withdrawal of withdrawals) {
        const timeStuck = Math.round((new Date() - withdrawal.processingStartedAt) / 1000 / 60);
        console.log(`   - ${withdrawal.userId}: ${withdrawal.amount} DEL (–∑–∞—Å—Ç—Ä—è–ª –Ω–∞ ${timeStuck} –º–∏–Ω)`);
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–£:`);
    
    if (activeDeposits === 0 && queuedWithdrawals === 0 && processingWithdrawals === 0) {
      console.log(`   ‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`);
      console.log(`   üí§ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è`);
    } else {
      console.log(`   üîç –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º`);
      console.log(`   ‚ö° –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`);
    }
    
    if (stuckWithdrawals > 0) {
      console.log(`   üö® –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ`);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
    console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–õ–õ–ï–ö–¶–ò–ô:`);
    
    const depositsCount = await database.collection('deposits').countDocuments();
    const withdrawalsCount = await database.collection('withdrawals').countDocuments();
    const usersCount = await database.collection('users').countDocuments();
    
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}`);
    console.log(`   –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${depositsCount}`);
    console.log(`   –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawalsCount}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤—ã–≤–æ–¥–æ–≤
    const withdrawalStats = await database.collection('withdrawals').aggregate([
      { $group: { _id: '$status', count: { $sum: 1 } } }
    ]).toArray();
    
    console.log(`\nüìà –°–¢–ê–¢–£–°–´ –í–´–í–û–î–û–í:`);
    for (const stat of withdrawalStats) {
      console.log(`   ${stat._id}: ${stat.count}`);
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.error(error.message);
  } finally {
    await client.close();
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

testOptimizedMonitoring().catch(console.error); 