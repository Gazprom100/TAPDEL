const { MongoClient } = require('mongodb');

function generateCleanMongoURI() {
  const uri = process.env.MONGODB_URI;
  if (!uri) {
    throw new Error('MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  return uri;
}

const MONGODB_URI = generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function fixAllBalances() {
  let client;
  
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(MONGODB_DB);
    
    const users = await db.collection('users').find({}).toArray();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    let fixedCount = 0;
    let totalTokensBefore = 0;
    let totalGameBalanceBefore = 0;
    let totalTokensAfter = 0;
    let totalGameBalanceAfter = 0;
    
    for (const user of users) {
      const tokens = user.gameState?.tokens || 0;
      const gameBalance = user.gameBalance || 0;
      const highScore = user.gameState?.highScore || 0;
      
      totalTokensBefore += tokens;
      totalGameBalanceBefore += gameBalance;
      
      const hasMismatch = Math.abs(tokens - gameBalance) > 0.001;
      
      if (hasMismatch) {
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ${user.profile?.telegramUsername || user.profile?.username || user.userId}:`);
        console.log(`   tokens: ${tokens.toFixed(3)} ‚Üí gameBalance: ${tokens.toFixed(3)}`);
        
        await db.collection('users').updateOne(
          { userId: user.userId },
          { $set: { gameBalance: tokens } }
        );
        
        fixedCount++;
      } else {
        console.log(`‚úÖ ${user.profile?.telegramUsername || user.profile?.username || user.userId}: OK`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedUsers = await db.collection('users').find({}).toArray();
    
    for (const user of updatedUsers) {
      const tokens = user.gameState?.tokens || 0;
      const gameBalance = user.gameBalance || 0;
      
      totalTokensAfter += tokens;
      totalGameBalanceAfter += gameBalance;
    }
    
    console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('=' * 50);
    console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${fixedCount}/${users.length}`);
    console.log(`–û–±—â–∏–π tokens –¥–æ: ${totalTokensBefore.toFixed(3)}`);
    console.log(`–û–±—â–∏–π gameBalance –¥–æ: ${totalGameBalanceBefore.toFixed(3)}`);
    console.log(`–û–±—â–∏–π tokens –ø–æ—Å–ª–µ: ${totalTokensAfter.toFixed(3)}`);
    console.log(`–û–±—â–∏–π gameBalance –ø–æ—Å–ª–µ: ${totalGameBalanceAfter.toFixed(3)}`);
    
    if (fixedCount > 0) {
      console.log('\n‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
    } else {
      console.log('\n‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã —É–∂–µ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

fixAllBalances(); 