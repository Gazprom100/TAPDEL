const { MongoClient } = require('mongodb');
const redis = require('redis');
const { Web3 } = require('web3');
require('dotenv').config({ path: './.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0',
  REDIS_URL: process.env.REDIS_URL,
  DECIMAL_RPC_URL: process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/',
  WORKING_ADDRESS: process.env.DECIMAL_WORKING_ADDRESS,
  WORKING_PRIVKEY_ENC: process.env.DECIMAL_WORKING_PRIVKEY_ENC,
  KEY_PASSPHRASE: process.env.DECIMAL_KEY_PASSPHRASE
};

class BalanceFixer {
  constructor() {
    this.db = null;
    this.redis = null;
    this.web3 = null;
    this.results = {
      timestamp: new Date(),
      fixes: [],
      errors: []
    };
  }

  async initialize() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤...');
    
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
      const client = new MongoClient(config.MONGODB_URI);
      await client.connect();
      this.db = client.db('tapdel');
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
      if (config.REDIS_URL) {
        const redisConfig = config.REDIS_URL.includes('upstash.io') ? {
          url: config.REDIS_URL,
          socket: { tls: true, rejectUnauthorized: false },
          connectTimeout: 60000,
          lazyConnect: true
        } : {
          url: config.REDIS_URL,
          socket: { connectTimeout: 10000, tls: false },
          connectTimeout: 10000,
          lazyConnect: true
        };
        
        this.redis = redis.createClient(redisConfig);
        await this.redis.connect();
        console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain
      this.web3 = new Web3(config.DECIMAL_RPC_URL);
      const blockNumber = await this.web3.eth.getBlockNumber();
      console.log(`‚úÖ DecimalChain –ø–æ–¥–∫–ª—é—á–µ–Ω, –±–ª–æ–∫: ${blockNumber}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async fixBlockchainSync() {
    console.log('\nüîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º...');
    
    if (!this.redis) {
      console.log('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return;
    }

    try {
      const lastBlockKey = 'DECIMAL_LAST_BLOCK';
      const currentBlock = await this.web3.eth.getBlockNumber();
      const currentBlockNum = Number(currentBlock);
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–ª–æ–∫
      await this.redis.del(lastBlockKey);
      await this.redis.set(lastBlockKey, (currentBlockNum - 5).toString());
      
      this.results.fixes.push({
        type: 'blockchain_sync',
        action: 'reset_last_block',
        oldBlock: 'unknown',
        newBlock: currentBlockNum - 5,
        currentBlock: currentBlockNum
      });
      
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–ª–æ–∫ ${currentBlockNum - 5} (—Ç–µ–∫—É—â–∏–π: ${currentBlockNum})`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      this.results.errors.push({
        type: 'blockchain_sync',
        error: error.message
      });
    }
  }

  async fixFailedWithdrawals() {
    console.log('\nüí∏ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤...');
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã
      const failedWithdrawals = await this.db.collection('withdrawals').find({
        status: 'failed'
      }).toArray();

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${failedWithdrawals.length} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤`);

      for (const withdrawal of failedWithdrawals) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã
          const user = await this.db.collection('users').findOne({ userId: withdrawal.userId });
          if (!user) {
            console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${withdrawal.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
          const amount = parseFloat(withdrawal.amount);
          if (isNaN(amount) || amount <= 0) {
            console.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ${withdrawal._id}: ${withdrawal.amount}`);
            continue;
          }

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã
          await this.db.collection('users').updateOne(
            { userId: withdrawal.userId },
            { $inc: { "gameState.tokens": amount } }
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            {
              $set: {
                status: 'refunded',
                refundedAt: new Date(),
                refundAmount: amount
              }
            }
          );

          this.results.fixes.push({
            type: 'failed_withdrawal_refund',
            withdrawalId: withdrawal._id.toString(),
            userId: withdrawal.userId,
            amount: amount,
            error: withdrawal.error
          });

          console.log(`üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawal.userId}: +${amount} DEL`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ ${withdrawal._id}:`, error);
          this.results.errors.push({
            type: 'withdrawal_refund',
            withdrawalId: withdrawal._id.toString(),
            error: error.message
          });
        }
      }

      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤:', error);
      this.results.errors.push({
        type: 'withdrawals_fix',
        error: error.message
      });
    }
  }

  async fixStuckWithdrawals() {
    console.log('\nüîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤...');
    
    try {
      const now = new Date();
      const fiveMinutesAgo = new Date(now - 5 * 60 * 1000);

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã –≤ —Å—Ç–∞—Ç—É—Å–µ processing
      const stuckWithdrawals = await this.db.collection('withdrawals').find({
        status: 'processing',
        processingStartedAt: { $lt: fiveMinutesAgo }
      }).toArray();

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${stuckWithdrawals.length} –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤`);

      for (const withdrawal of stuckWithdrawals) {
        try {
          const amount = parseFloat(withdrawal.amount);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
          await this.db.collection('users').updateOne(
            { userId: withdrawal.userId },
            { $inc: { "gameState.tokens": amount } }
          );

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            {
              $set: {
                status: 'failed',
                error: 'Timeout - processing took too long (auto-fixed)',
                processedAt: new Date()
              },
              $unset: { processingStartedAt: 1 }
            }
          );

          this.results.fixes.push({
            type: 'stuck_withdrawal_fix',
            withdrawalId: withdrawal._id.toString(),
            userId: withdrawal.userId,
            amount: amount
          });

          console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∑–∞—Å—Ç—Ä—è–≤—à–∏–π –≤—ã–≤–æ–¥ ${withdrawal._id}: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${amount} DEL`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Å—Ç—Ä—è–≤—à–µ–≥–æ –≤—ã–≤–æ–¥–∞ ${withdrawal._id}:`, error);
          this.results.errors.push({
            type: 'stuck_withdrawal_fix',
            withdrawalId: withdrawal._id.toString(),
            error: error.message
          });
        }
      }

      console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤:', error);
      this.results.errors.push({
        type: 'stuck_withdrawals_fix',
        error: error.message
      });
    }
  }

  async fixExpiredDeposits() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
      const expiredDeposits = await this.db.collection('deposits').find({
        matched: false,
        expiresAt: { $lt: new Date() }
      }).toArray();

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${expiredDeposits.length} –∏—Å—Ç–µ–∫—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);

      if (expiredDeposits.length > 0) {
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ expired
        const result = await this.db.collection('deposits').updateMany(
          {
            matched: false,
            expiresAt: { $lt: new Date() }
          },
          {
            $set: {
              status: 'expired',
              expiredAt: new Date()
            }
          }
        );

        this.results.fixes.push({
          type: 'expired_deposits_cleanup',
          count: result.modifiedCount
        });

        console.log(`‚úÖ ${result.modifiedCount} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      this.results.errors.push({
        type: 'expired_deposits_cleanup',
        error: error.message
      });
    }
  }

  async fixAnomalousBalances() {
    console.log('\nüë• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤...');
    
    try {
      const users = await this.db.collection('users').find().toArray();
      const anomalousUsers = [];

      for (const user of users) {
        const tokens = user.gameState?.tokens || 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ –±–∞–ª–∞–Ω—Å—ã (>1000 DEL)
        if (tokens > 1000) {
          anomalousUsers.push({
            userId: user.userId,
            currentTokens: tokens,
            isTestUser: user.userId.includes('test') || user.userId.includes('debug')
          });
        }
      }

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${anomalousUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏`);

      for (const anomalous of anomalousUsers) {
        try {
          if (anomalous.isTestUser) {
            // –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            await this.db.collection('users').updateOne(
              { userId: anomalous.userId },
              { $set: { "gameState.tokens": 0, updatedAt: new Date() } }
            );

            this.results.fixes.push({
              type: 'test_user_balance_reset',
              userId: anomalous.userId,
              oldBalance: anomalous.currentTokens,
              newBalance: 0
            });

            console.log(`üß™ –°–±—Ä–æ—à–µ–Ω –±–∞–ª–∞–Ω—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${anomalous.userId}: ${anomalous.currentTokens} ‚Üí 0 DEL`);
          } else {
            // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            this.results.fixes.push({
              type: 'anomalous_balance_detected',
              userId: anomalous.userId,
              balance: anomalous.currentTokens,
              action: 'manual_review_required'
            });

            console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–Ω–æ–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —É ${anomalous.userId}: ${anomalous.currentTokens} DEL (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ${anomalous.userId}:`, error);
          this.results.errors.push({
            type: 'anomalous_balance_fix',
            userId: anomalous.userId,
            error: error.message
          });
        }
      }

      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤:', error);
      this.results.errors.push({
        type: 'anomalous_balances_fix',
        error: error.message
      });
    }
  }

  async resetNonceCache() {
    console.log('\nüîÑ –°–±—Ä–æ—Å –∫—ç—à–∞ nonce...');
    
    if (!this.redis) {
      console.log('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å nonce');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce —Å –±–ª–æ–∫—á–µ–π–Ω–∞
      const currentNonce = await this.web3.eth.getTransactionCount(config.WORKING_ADDRESS);
      const nonceKey = `DECIMAL_NONCE_${config.WORKING_ADDRESS.toLowerCase()}`;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π nonce
      await this.redis.setEx(nonceKey, 30, Number(currentNonce).toString());
      
      this.results.fixes.push({
        type: 'nonce_cache_reset',
        address: config.WORKING_ADDRESS,
        newNonce: Number(currentNonce)
      });

      console.log(`‚úÖ –ö—ç—à nonce —Å–±—Ä–æ—à–µ–Ω: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ${Number(currentNonce)} –¥–ª—è ${config.WORKING_ADDRESS}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ nonce:', error);
      this.results.errors.push({
        type: 'nonce_reset',
        error: error.message
      });
    }
  }

  async generateSummary() {
    console.log('\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
    
    const summary = {
      totalFixes: this.results.fixes.length,
      totalErrors: this.results.errors.length,
      fixTypes: {},
      errorTypes: {}
    };

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    for (const fix of this.results.fixes) {
      summary.fixTypes[fix.type] = (summary.fixTypes[fix.type] || 0) + 1;
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
    for (const error of this.results.errors) {
      summary.errorTypes[error.type] = (summary.errorTypes[error.type] || 0) + 1;
    }

    this.results.summary = summary;
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async runFullFix() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ DEL...\n');
    
    try {
      await this.initialize();
      
      await this.fixBlockchainSync();
      await this.fixFailedWithdrawals();
      await this.fixStuckWithdrawals();
      await this.fixExpiredDeposits();
      await this.fixAnomalousBalances();
      await this.resetNonceCache();
      
      await this.generateSummary();
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:');
      console.log(JSON.stringify(this.results, null, 2));
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const fixCollection = this.db.collection('balance_fixes');
      await fixCollection.insertOne({
        ...this.results,
        createdAt: new Date()
      });
      
      console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
      console.log('\nüîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
      console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã/–≤—ã–≤–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:', error);
    } finally {
      if (this.redis) await this.redis.disconnect();
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const fixer = new BalanceFixer();
fixer.runFullFix(); 