const redisConfig = require('../config/redis');
const supabaseService = require('../services/supabaseService');
const cacheService = require('../services/cacheService');
require('dotenv').config();

async function checkNewServices() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Redis –∏ Supabase');
  console.log('=' .repeat(50));
  
  const results = {
    redis: false,
    supabase: false,
    cache: false
  };
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê REDIS');
    console.log('-'.repeat(30));
    
    if (redisConfig.isConfigured()) {
      console.log('‚úÖ Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
      console.log(`   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${redisConfig.getProviderType()}`);
      console.log(`   URL –º–∞—Å–∫–∞: ${process.env.REDIS_URL?.replace(/\/\/.*@/, '//***:***@') || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      
      try {
        await cacheService.initialize();
        if (cacheService.isConnected) {
          console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
          results.redis = true;
        } else {
          console.log('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç');
          results.redis = false;
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', error.message);
        results.redis = false;
      }
    } else {
      console.log('‚ùå Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é REDIS_URL –≤ Vercel');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê SUPABASE');
    console.log('-'.repeat(30));
    
    if (supabaseService.config.isConfigured()) {
      console.log('‚úÖ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
      console.log(`   URL: ${supabaseService.config.supabaseUrl}`);
      console.log(`   Anon Key: ${supabaseService.config.supabaseKey ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      console.log(`   Service Key: ${supabaseService.config.supabaseServiceKey ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      
      try {
        await supabaseService.initialize();
        console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        results.supabase = true;
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
        results.supabase = false;
      }
    } else {
      console.log('‚ùå Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏ SUPABASE_ANON_KEY –≤ Vercel');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Cache Service
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê CACHE SERVICE');
    console.log('-'.repeat(30));
    
    try {
      const stats = cacheService.getStats();
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Cache Service:');
      console.log(`   –ü–æ–¥–∫–ª—é—á–µ–Ω: ${stats.isConnected ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à: ${stats.localCacheSize} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      console.log(`   Hits: ${stats.stats.hits}`);
      console.log(`   Misses: ${stats.stats.misses}`);
      console.log(`   Errors: ${stats.stats.errors}`);
      
      results.cache = true;
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ Cache Service:', error.message);
      results.cache = false;
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô');
    console.log('-'.repeat(30));
    
    if (results.redis) {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –æ–ø–µ—Ä–∞—Ü–∏–π...');
      try {
        await cacheService.set('test_key', { message: 'Hello Redis!', timestamp: new Date() }, 60);
        const testData = await cacheService.get('test_key');
        if (testData && testData.message === 'Hello Redis!') {
          console.log('‚úÖ Redis –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
        } else {
          console.log('‚ùå Redis –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
        }
        await cacheService.del('test_key');
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis:', error.message);
      }
    }
    
    if (results.supabase) {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Supabase –æ–ø–µ—Ä–∞—Ü–∏–π...');
      try {
        const stats = await supabaseService.getStatistics();
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Supabase:');
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stats.totalUsers}`);
        console.log(`   –õ–∏–¥–µ—Ä–±–æ—Ä–¥: ${stats.totalLeaderboard}`);
        console.log(`   –î–µ–ø–æ–∑–∏—Ç—ã: ${stats.totalDeposits}`);
        console.log(`   –í—ã–≤–æ–¥—ã: ${stats.totalWithdrawals}`);
        console.log('‚úÖ Supabase –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase:', error.message);
      }
    }
    
    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('=' .repeat(50));
    
    console.log(`Redis: ${results.redis ? '‚úÖ OK' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log(`Supabase: ${results.supabase ? '‚úÖ OK' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log(`Cache Service: ${results.cache ? '‚úÖ OK' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    
    const successCount = Object.values(results).filter(Boolean).length;
    const totalCount = Object.keys(results).length;
    
    if (successCount === totalCount) {
      console.log('\nüéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢!');
      console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: npm run migrate:supabase');
      console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase');
      console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É');
    } else {
      console.log('\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –°–ï–†–í–ò–°–´ –¢–†–ï–ë–£–Æ–¢ –ù–ê–°–¢–†–û–ô–ö–ò');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      if (!results.redis) {
        console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é REDIS_URL –≤ Vercel');
        console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω');
      }
      if (!results.supabase) {
        console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏ SUPABASE_ANON_KEY –≤ Vercel');
        console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  checkNewServices()
    .then(() => {
      console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { checkNewServices };
