const databaseConfig = require('../config/database');
const decimalService = require('../services/decimalService');

async function fixSystemIssues() {
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –°–ò–°–¢–ï–ú–´');
    console.log('=================================');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await databaseConfig.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalService
    if (!decimalService.web3) {
      await decimalService.initialize();
    }
    console.log('‚úÖ DecimalService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // === 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–õ–û–ö–û–í ===
    console.log('\nüëÅÔ∏è 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–õ–û–ö–û–í');
    console.log('========================================');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
    const currentBlock = await decimalService.web3.eth.getBlockNumber();
    console.log(`–¢–µ–∫—É—â–∏–π –±–ª–æ–∫: ${currentBlock}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫ –Ω–∞ 50 –±–ª–æ–∫–æ–≤ –Ω–∞–∑–∞–¥
    const lastBlock = Number(currentBlock) - 50;
    console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: ${lastBlock}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    if (decimalService.hasRedis && decimalService.redis) {
      try {
        await decimalService.redis.set('DECIMAL_LAST_BLOCK', lastBlock.toString());
        console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis');
      } catch (error) {
        console.log(`‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞: ${error.message}`);
        decimalService.localLastBlock = lastBlock;
        console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
      }
    } else {
      decimalService.localLastBlock = lastBlock;
      console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
    }
    
    // === 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï–£–î–ê–ß–ù–´–• –í–´–í–û–î–û–í ===
    console.log('\nüì§ 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï–£–î–ê–ß–ù–´–• –í–´–í–û–î–û–í');
    console.log('======================================');
    
    const failedWithdrawals = await database.collection('withdrawals').find({
      status: 'failed'
    }).toArray();
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤: ${failedWithdrawals.length}`);
    
    for (const withdrawal of failedWithdrawals) {
      console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ ${withdrawal.amount} DEL:`);
      console.log(`   ID: ${withdrawal._id}`);
      console.log(`   –û—à–∏–±–∫–∞: ${withdrawal.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      const workingBalance = await decimalService.getWorkingBalance();
      console.log(`   –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${workingBalance} DEL`);
      
      if (workingBalance < withdrawal.amount) {
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞`);
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–≤–æ–¥
      const newWithdrawal = {
        userId: withdrawal.userId,
        amount: withdrawal.amount,
        address: withdrawal.address || '0xd6187dD54DF3002D5C82043b81EdE74187A5A647',
        status: 'queued',
        createdAt: new Date(),
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
      };
      
      const result = await database.collection('withdrawals').insertOne(newWithdrawal);
      console.log(`   ‚úÖ –ù–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω —Å ID: ${result.insertedId}`);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
      try {
        const txHash = await decimalService.signAndSend(
          newWithdrawal.address,
          newWithdrawal.amount
        );
        
        if (txHash) {
          console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! TX Hash: ${txHash}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
          await database.collection('withdrawals').updateOne(
            { _id: result.insertedId },
            {
              $set: {
                status: 'sent',
                txHash: txHash,
                sentAt: new Date()
              }
            }
          );
          
          console.log('   ‚úÖ –°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "sent"');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await database.collection('users').findOne({ userId: withdrawal.userId });
          if (user) {
            const currentTokens = user.gameState?.tokens || 0;
            const newTokens = currentTokens - withdrawal.amount;
            
            await database.collection('users').updateOne(
              { userId: withdrawal.userId },
              {
                $set: {
                  "gameState.tokens": newTokens,
                  "gameState.lastSaved": new Date(),
                  updatedAt: new Date()
                }
              }
            );
            
            console.log(`   ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω!`);
            console.log(`   –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: ${currentTokens} DEL`);
            console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newTokens} DEL`);
            console.log(`   –°–ø–∏—Å–∞–Ω–æ: -${withdrawal.amount} DEL`);
          }
          
        } else {
          console.log('   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        }
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞: ${error.message}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
        await database.collection('withdrawals').updateOne(
          { _id: result.insertedId },
          {
            $set: {
              status: 'failed',
              error: error.message,
              failedAt: new Date()
            }
          }
        );
      }
    }
    
    // === 3. –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–¢–ò–í–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í ===
    console.log('\nüì• 3. –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–¢–ò–í–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í');
    console.log('=====================================');
    
    const activeDeposits = await database.collection('deposits').find({
      matched: false,
      expiresAt: { $gt: new Date() }
    }).toArray();
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${activeDeposits.length}`);
    
    if (activeDeposits.length > 0) {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–ª–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤
      await decimalService.startDepositWatcher(database);
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const currentBlock = await decimalService.web3.eth.getBlockNumber();
      const startBlock = Math.max(Number(currentBlock) - 100, 1);
      
      console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Å ${startBlock} –ø–æ ${currentBlock}...`);
      
      for (let blockNum = startBlock; blockNum <= currentBlock; blockNum++) {
        await decimalService.processBlock(blockNum, database);
      }
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    // === 4. –û–ß–ò–°–¢–ö–ê –ò–°–¢–ï–ö–®–ò–• –î–ï–ü–û–ó–ò–¢–û–í ===
    console.log('\nüßπ 4. –û–ß–ò–°–¢–ö–ê –ò–°–¢–ï–ö–®–ò–• –î–ï–ü–û–ó–ò–¢–û–í');
    console.log('===================================');
    
    const expiredDeposits = await database.collection('deposits').find({
      expiresAt: { $lte: new Date() },
      matched: false
    }).toArray();
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${expiredDeposits.length}`);
    
    if (expiredDeposits.length > 0) {
      const result = await database.collection('deposits').deleteMany({
        expiresAt: { $lte: new Date() },
        matched: false
      });
      
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${result.deletedCount}`);
    }
    
    // === 5. –ó–ê–ü–£–°–ö –†–ê–ë–û–ß–ò–• –ü–†–û–¶–ï–°–°–û–í ===
    console.log('\n‚öôÔ∏è 5. –ó–ê–ü–£–°–ö –†–ê–ë–û–ß–ò–• –ü–†–û–¶–ï–°–°–û–í');
    console.log('==================================');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º withdrawal worker
    await decimalService.startWithdrawalWorker(database);
    console.log('‚úÖ Withdrawal worker –∑–∞–ø—É—â–µ–Ω');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º confirmation updater
    await decimalService.startConfirmationUpdater(database);
    console.log('‚úÖ Confirmation updater –∑–∞–ø—É—â–µ–Ω');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º cleaner –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    await decimalService.startExpiredDepositsCleaner(database);
    console.log('‚úÖ Expired deposits cleaner –∑–∞–ø—É—â–µ–Ω');
    
    console.log('\nüéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
  }
}

fixSystemIssues(); 