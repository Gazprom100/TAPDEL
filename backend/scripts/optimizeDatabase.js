const { connectToDatabase } = require('../config/database');

async function optimizeDatabase() {
  let db;
  
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    db = await connectToDatabase();
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
    console.log('üìä –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è users...');
    await db.collection('users').createIndex({ userId: 1 }, { unique: true });
    await db.collection('users').createIndex({ 'gameState.tokens': 1 });
    await db.collection('users').createIndex({ 'gameState.highScore': -1 });
    await db.collection('users').createIndex({ createdAt: -1 });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ leaderboard
    console.log('üèÜ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è leaderboard...');
    await db.collection('leaderboard').createIndex({ userId: 1 }, { unique: true });
    await db.collection('leaderboard').createIndex({ score: -1 });
    await db.collection('leaderboard').createIndex({ tokenSymbol: 1, score: -1 });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ user_token_balances
    console.log('üí∞ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è user_token_balances...');
    await db.collection('user_token_balances').createIndex({ userId: 1, tokenSymbol: 1 }, { unique: true });
    await db.collection('user_token_balances').createIndex({ tokenSymbol: 1, balance: -1 });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ withdrawals
    console.log('üí∏ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è withdrawals...');
    await db.collection('withdrawals').createIndex({ userId: 1 });
    await db.collection('withdrawals').createIndex({ status: 1 });
    await db.collection('withdrawals').createIndex({ createdAt: -1 });
    await db.collection('withdrawals').createIndex({ txHash: 1 }, { sparse: true });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ deposits
    console.log('üì• –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è deposits...');
    await db.collection('deposits').createIndex({ userId: 1 });
    await db.collection('deposits').createIndex({ status: 1 });
    await db.collection('deposits').createIndex({ createdAt: -1 });
    await db.collection('deposits').createIndex({ txHash: 1 }, { sparse: true });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ token_history
    console.log('üìà –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è token_history...');
    await db.collection('token_history').createIndex({ userId: 1 });
    await db.collection('token_history').createIndex({ tokenSymbol: 1 });
    await db.collection('token_history').createIndex({ createdAt: -1 });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ system_config
    console.log('‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è system_config...');
    await db.collection('system_config').createIndex({ key: 1 }, { unique: true });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ tokens
    console.log('ü™ô –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è tokens...');
    await db.collection('tokens').createIndex({ symbol: 1 }, { unique: true });
    await db.collection('tokens').createIndex({ isActive: 1 });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ wallet_balances
    console.log('üè¶ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è wallet_balances...');
    await db.collection('wallet_balances').createIndex({ tokenSymbol: 1 }, { unique: true });
    await db.collection('wallet_balances').createIndex({ updatedAt: -1 });
    
    console.log('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...');
    
    const collections = [
      'users', 'leaderboard', 'user_token_balances', 
      'withdrawals', 'deposits', 'token_history', 
      'system_config', 'tokens', 'wallet_balances'
    ];
    
    for (const collectionName of collections) {
      const stats = await db.collection(collectionName).stats();
      console.log(`üìà ${collectionName}: ${stats.count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, ${Math.round(stats.size / 1024)}KB`);
    }
    
    console.log('üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
optimizeDatabase(); 