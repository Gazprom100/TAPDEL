const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class ServerManager {
  constructor() {
    this.serverProcess = null;
    this.isRestarting = false;
    this.restartCount = 0;
    this.maxRestarts = 3;
    this.restartDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
  }

  async checkServerHealth() {
    try {
      const response = await fetch('http://localhost:3000/api/decimal/test');
      const data = await response.json();
      return response.ok && data.message === 'DecimalChain API —Ä–∞–±–æ—Ç–∞–µ—Ç!';
    } catch (error) {
      return false;
    }
  }

  async waitForServer(maxAttempts = 30) {
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      const isHealthy = await this.checkServerHealth();
      if (isHealthy) {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})`);
        return true;
      }
      
      console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}: —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
    return false;
  }

  startServer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    this.serverProcess = spawn('node', ['server.js'], {
      stdio: 'pipe',
      cwd: __dirname
    });

    this.serverProcess.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(`üì§ [SERVER] ${output.trim()}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
      if (output.includes('Server is ready to handle requests')) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      }
    });

    this.serverProcess.stderr.on('data', (data) => {
      const error = data.toString();
      console.log(`‚ùå [SERVER ERROR] ${error.trim()}`);
    });

    this.serverProcess.on('close', (code) => {
      console.log(`üî¥ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
      
      if (!this.isRestarting && this.restartCount < this.maxRestarts) {
        this.restartCount++;
        console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (${this.restartCount}/${this.maxRestarts})...`);
        this.restartServer();
      } else if (this.restartCount >= this.maxRestarts) {
        console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤');
        process.exit(1);
      }
    });

    this.serverProcess.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    });
  }

  async restartServer() {
    this.isRestarting = true;
    
    if (this.serverProcess) {
      console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
      this.serverProcess.kill('SIGTERM');
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      await new Promise(resolve => setTimeout(resolve, this.restartDelay));
    }
    
    this.isRestarting = false;
    this.startServer();
  }

  async stopServer() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    if (this.serverProcess) {
      this.isRestarting = true; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
      this.serverProcess.kill('SIGTERM');
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }

  async runHealthCheck() {
    console.log('\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...');
    
    try {
      const response = await fetch('http://localhost:3000/api/decimal/info');
      const data = await response.json();
      
      console.log('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:');
      console.log(`   –†–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å: ${data.workingAddress}`);
      console.log(`   –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${data.workingBalance} DEL`);
      console.log(`   Chain ID: ${data.chainId}`);
      console.log(`   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${data.confirmationsRequired}`);
      
      return true;
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error.message);
      return false;
    }
  }

  async runFullRestart() {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã TAPDEL...\n');
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
      await this.stopServer();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      this.startServer();
      
      // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
      const isStarted = await this.waitForServer();
      
      if (isStarted) {
        console.log('\n‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        await this.runHealthCheck();
        
        console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ TAPDEL –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
        console.log('üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∏–∂–µ:');
        console.log('=' * 50);
        
        // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        process.on('SIGINT', async () => {
          console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
          await this.stopServer();
          process.exit(0);
        });
        
        process.on('SIGTERM', async () => {
          console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
          await this.stopServer();
          process.exit(0);
        });
        
      } else {
        console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
        process.exit(1);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
const manager = new ServerManager();
manager.runFullRestart(); 