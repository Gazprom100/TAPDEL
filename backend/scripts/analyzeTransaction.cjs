const { Web3 } = require('web3');

// DecimalChain –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const RPC_URL = process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/';
const WORKING_ADDRESS = process.env.DECIMAL_WORKING_ADDRESS || '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43';

async function analyzeTransaction() {
  try {
    console.log('üîç –ê–ù–ê–õ–ò–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ò 0,001 DEL');
    console.log('==============================\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ DecimalChain
    const web3 = new Web3(RPC_URL);
    console.log(`üåê RPC URL: ${RPC_URL}`);
    console.log(`üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${WORKING_ADDRESS}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const blockNumber = await web3.eth.getBlockNumber();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏: –±–ª–æ–∫ #${blockNumber}`);
    
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å—É–º–º–æ–π 0,001 DEL
    const targetAmountWei = web3.utils.toWei('0.001', 'ether');
    console.log(`üéØ –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å—É–º–º—É: 0.001 DEL (${targetAmountWei} wei)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –±–ª–æ–∫–æ–≤
    console.log('\nüîç –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –ü–û–°–õ–ï–î–ù–ò–• 100 –ë–õ–û–ö–ê–•:');
    console.log('='.repeat(60));
    
    let foundTransactions = [];
    
    for (let i = 0; i < 100; i++) {
      const blockNum = Number(blockNumber) - i;
      const block = await web3.eth.getBlock(blockNum, true);
      
      if (block.transactions) {
        const incomingTxs = block.transactions.filter(tx => 
          tx.to && tx.to.toLowerCase() === WORKING_ADDRESS.toLowerCase()
        );
        
        for (const tx of incomingTxs) {
          const valueDel = web3.utils.fromWei(tx.value, 'ether');
          
          // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –±–ª–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
          if (Math.abs(parseFloat(valueDel) - 0.001) < 0.0001) {
            foundTransactions.push({
              hash: tx.hash,
              from: tx.from,
              value: valueDel,
              blockNumber: blockNum,
              timestamp: new Date(block.timestamp * 1000)
            });
          }
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 –±–ª–æ–∫–æ–≤
      if (i % 20 === 0) {
        console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –±–ª–æ–∫–æ–≤: ${i + 1}/100`);
      }
    }
    
    if (foundTransactions.length > 0) {
      console.log(`\n‚úÖ –ù–ê–ô–î–ï–ù–û –¢–†–ê–ù–ó–ê–ö–¶–ò–ô: ${foundTransactions.length}`);
      console.log('='.repeat(60));
      
      for (const tx of foundTransactions) {
        console.log(`üìÑ TX Hash: ${tx.hash}`);
        console.log(`   –û—Ç: ${tx.from}`);
        console.log(`   –°—É–º–º–∞: ${tx.value} DEL`);
        console.log(`   –ë–ª–æ–∫: ${tx.blockNumber}`);
        console.log(`   –í—Ä–µ–º—è: ${tx.timestamp.toLocaleString()}`);
        console.log('-'.repeat(40));
      }
    } else {
      console.log('\n‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–´');
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—É–º–º—ã –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ –ø–æ–∏—Å–∫');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –±–ª–æ–∫–∞—Ö
    console.log('\nüìã –í–°–ï –í–•–û–î–Ø–©–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–ª–æ–∫–æ–≤):');
    console.log('='.repeat(60));
    
    for (let i = 0; i < 10; i++) {
      const blockNum = Number(blockNumber) - i;
      const block = await web3.eth.getBlock(blockNum, true);
      
      if (block.transactions) {
        const incomingTxs = block.transactions.filter(tx => 
          tx.to && tx.to.toLowerCase() === WORKING_ADDRESS.toLowerCase()
        );
        
        if (incomingTxs.length > 0) {
          console.log(`\nüß± –ë–ª–æ–∫ ${blockNum} (${new Date(block.timestamp * 1000).toLocaleString()}):`);
          
          for (const tx of incomingTxs) {
            const valueDel = web3.utils.fromWei(tx.value, 'ether');
            console.log(`   ${valueDel} DEL –æ—Ç ${tx.from.substring(0, 10)}... (${tx.hash.substring(0, 10)}...)`);
          }
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    console.log('\nüí∞ –ë–ê–õ–ê–ù–° –†–ê–ë–û–ß–ï–ì–û –ö–û–®–ï–õ–¨–ö–ê:');
    const balanceWei = await web3.eth.getBalance(WORKING_ADDRESS);
    const balanceDel = web3.utils.fromWei(balanceWei, 'ether');
    console.log(`   Wei: ${balanceWei}`);
    console.log(`   DEL: ${balanceDel}`);
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:');
    console.error(error.message);
  }
}

analyzeTransaction().catch(console.error); 