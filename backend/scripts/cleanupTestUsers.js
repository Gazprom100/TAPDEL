require('dotenv').config();
const { MongoClient } = require('mongodb');

async function cleanupTestUsers() {
  const client = new MongoClient(process.env.MONGODB_URI);
  
  try {
    await client.connect();
    const db = client.db('tapdel');
    
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ userId
    const testUserPatterns = [
      /^test/i,
      /^demo/i,
      /^example/i,
      /^user\d+$/i,
      /^player\d+$/i,
      /^admin_test/i,
      /^temp_/i
    ];
    
    let deletedCount = 0;
    
    for (const pattern of testUserPatterns) {
      const result = await db.collection('users').deleteMany({
        userId: { $regex: pattern }
      });
      
      if (result.deletedCount > 0) {
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º ${pattern}`);
        deletedCount += result.deletedCount;
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ telegramId
    const testTelegramPatterns = [
      /^123456789$/,
      /^987654321$/,
      /^555666777$/
    ];
    
    for (const pattern of testTelegramPatterns) {
      const result = await db.collection('users').deleteMany({
        'profile.telegramId': { $regex: pattern }
      });
      
      if (result.deletedCount > 0) {
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegramId ${pattern}`);
        deletedCount += result.deletedCount;
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    const testNamePatterns = [
      /^test/i,
      /^demo/i,
      /^example/i,
      /^user\d+$/i,
      /^player\d+$/i
    ];
    
    for (const pattern of testNamePatterns) {
      const result = await db.collection('users').deleteMany({
        $or: [
          { 'profile.username': { $regex: pattern } },
          { 'profile.telegramUsername': { $regex: pattern } }
        ]
      });
      
      if (result.deletedCount > 0) {
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º ${pattern}`);
        deletedCount += result.deletedCount;
      }
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const collectionsToClean = ['leaderboard', 'deposits', 'withdrawals', 'user_token_balances'];
    
    for (const collectionName of collectionsToClean) {
      let collectionDeletedCount = 0;
      
      for (const pattern of testUserPatterns) {
        const result = await db.collection(collectionName).deleteMany({
          userId: { $regex: pattern }
        });
        
        if (result.deletedCount > 0) {
          collectionDeletedCount += result.deletedCount;
        }
      }
      
      if (collectionDeletedCount > 0) {
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${collectionDeletedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${collectionName}`);
      }
    }
    
    console.log(`üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: ${deletedCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalUsers = await db.collection('users').countDocuments();
    const totalLeaderboard = await db.collection('leaderboard').countDocuments();
    const totalDeposits = await db.collection('deposits').countDocuments();
    const totalWithdrawals = await db.collection('withdrawals').countDocuments();
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:');
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`- –ó–∞–ø–∏—Å–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${totalLeaderboard}`);
    console.log(`- –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits}`);
    console.log(`- –í—ã–≤–æ–¥–æ–≤: ${totalWithdrawals}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await client.close();
  }
}

cleanupTestUsers(); 