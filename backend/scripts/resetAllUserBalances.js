require("dotenv").config(); const { MongoClient } = require("mongodb"); async function resetAllUserBalances() { const client = new MongoClient(process.env.MONGODB_URI); try { await client.connect(); const db = client.db("tapdel"); console.log("üßπ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."); const users = await db.collection("users").find({}).toArray(); console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`); let resetCount = 0; for (const user of users) { try { const result = await db.collection("users").updateOne({ _id: user._id }, { \$set: { "gameState.tokens": 0, "gameState.highScore": 0 } }); if (result.modifiedCount > 0) { resetCount++; console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è ${user.userId} (${user.profile?.username || "N/A"})`); } await db.collection("user_token_balances").deleteMany({ userId: user.userId }); await db.collection("leaderboard").updateOne({ userId: user.userId }, { \$set: { score: 0, tokens: 0, highScore: 0 } }, { upsert: true }); } catch (error) { console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–ª—è ${user.userId}:`, error.message); } } console.log(`üéâ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –°–±—Ä–æ—à–µ–Ω–æ: ${resetCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`); } catch (error) { console.error("‚ùå –û—à–∏–±–∫–∞:", error); } finally { await client.close(); } } resetAllUserBalances();
