const { Web3 } = require('web3');
const redis = require('redis');
require('dotenv').config();

const config = require('../config/decimal');

async function testDecimalConnection() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DecimalChain –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');
  
  const tests = [];
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
  try {
    console.log(`   RPC URL: ${config.RPC_URL}`);
    console.log(`   Chain ID: ${config.CHAIN_ID}`);
    console.log(`   Working Address: ${config.WORKING_ADDRESS}`);
    console.log(`   Gas Price: ${config.GAS_PRICE} Gwei`);
    console.log(`   Confirmations: ${config.CONFIRMATIONS}`);
    console.log(`   Redis URL: ${config.REDIS_URL}`);
    
    if (!config.WORKING_ADDRESS) {
      throw new Error('DECIMAL_WORKING_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    tests.push({ name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', status: '‚úÖ –ü—Ä–æ–π–¥–µ–Ω' });
  } catch (error) {
    tests.push({ name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', status: '‚ùå –û—à–∏–±–∫–∞: ' + error.message });
  }
  
  // –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain
  console.log('\n2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain...');
  try {
    const web3 = new Web3(config.RPC_URL);
    const blockNumber = await web3.eth.getBlockNumber();
    console.log(`   –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: ${blockNumber}`);
    
    const balance = await web3.eth.getBalance(config.WORKING_ADDRESS);
    const balanceEth = web3.utils.fromWei(balance, 'ether');
    console.log(`   –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${balanceEth} DEL`);
    
    tests.push({ name: 'DecimalChain RPC', status: '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' });
  } catch (error) {
    tests.push({ name: 'DecimalChain RPC', status: '‚ùå –û—à–∏–±–∫–∞: ' + error.message });
  }
  
  // –¢–µ—Å—Ç 3: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...');
  try {
    const privateKey = config.getPrivateKey();
    console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${privateKey.substring(0, 8)}...${privateKey.substring(privateKey.length - 8)}`);
    
    // –û—á–∏—â–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    privateKey.split('').forEach((char, index) => {
      privateKey[index] = '0';
    });
    
    tests.push({ name: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á', status: '‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω' });
  } catch (error) {
    tests.push({ name: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á', status: '‚ùå –û—à–∏–±–∫–∞: ' + error.message });
  }
  
  // –¢–µ—Å—Ç 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
  console.log('\n4Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...');
  let redisClient = null;
  try {
    redisClient = redis.createClient({ url: config.REDIS_URL });
    await redisClient.connect();
    
    // –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    await redisClient.set('test_key', 'test_value');
    const value = await redisClient.get('test_key');
    await redisClient.del('test_key');
    
    if (value === 'test_value') {
      console.log('   Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      tests.push({ name: 'Redis', status: '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' });
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è');
    }
  } catch (error) {
    tests.push({ name: 'Redis', status: '‚ùå –û—à–∏–±–∫–∞: ' + error.message });
  } finally {
    if (redisClient) {
      await redisClient.disconnect();
    }
  }
  
  // –¢–µ—Å—Ç 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—É–º–º
  console.log('\n5Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—É–º–º...');
  try {
    const testUserId = 'test-user-123';
    const baseAmount = 1.0;
    
    const uniqueAmount1 = config.generateUniqueAmount(baseAmount, testUserId);
    const uniqueAmount2 = config.generateUniqueAmount(baseAmount, testUserId + '456');
    
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: ${baseAmount} ‚Üí ${uniqueAmount1} DEL`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: ${baseAmount} ‚Üí ${uniqueAmount2} DEL`);
    
    if (uniqueAmount1 !== uniqueAmount2) {
      tests.push({ name: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã', status: '‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è' });
    } else {
      throw new Error('–°—É–º–º—ã –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã');
    }
  } catch (error) {
    tests.push({ name: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã', status: '‚ùå –û—à–∏–±–∫–∞: ' + error.message });
  }
  
  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  let passed = 0;
  tests.forEach(test => {
    console.log(`${test.status.includes('‚úÖ') ? '‚úÖ' : '‚ùå'} ${test.name}: ${test.status}`);
    if (test.status.includes('‚úÖ')) passed++;
  });
  
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${tests.length} —Ç–µ—Å—Ç–æ–≤`);
  
  if (passed === tests.length) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! DecimalChain –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
  }
  
  process.exit(passed === tests.length ? 0 : 1);
}

testDecimalConnection().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  process.exit(1);
}); 