const { MongoClient } = require('mongodb');
require('dotenv').config({ path: './.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0'
};

class BalanceFixer {
  constructor() {
    this.db = null;
  }

  async initialize() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...');
    
    try {
      const client = new MongoClient(config.MONGODB_URI);
      await client.connect();
      this.db = client.db('tapdel');
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async fixUserBalance(userId) {
    console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.db.collection('users').findOne({ userId });
      if (!user) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const deposits = await this.db.collection('deposits').find({
        userId: userId
      }).toArray();

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const withdrawals = await this.db.collection('withdrawals').find({
        userId: userId
      }).toArray();

      console.log(`üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è ${userId}:`);
      console.log(`   –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
      console.log(`   –í—ã–≤–æ–¥–æ–≤: ${withdrawals.length}`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
      let totalDeposits = 0;
      let confirmedDeposits = 0;
      
      for (const deposit of deposits) {
        console.log(`   –î–µ–ø–æ–∑–∏—Ç: ${deposit.amountRequested} DEL, —Å—Ç–∞—Ç—É—Å: ${deposit.status}, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${deposit.confirmations}`);
        
        if (deposit.matched && deposit.confirmations >= 6) {
          totalDeposits += deposit.amountRequested;
          confirmedDeposits++;
        }
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥—ã
      let totalWithdrawals = 0;
      let successfulWithdrawals = 0;
      let refundedWithdrawals = 0;
      
      for (const withdrawal of withdrawals) {
        console.log(`   –í—ã–≤–æ–¥: ${withdrawal.amount} DEL, —Å—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
        
        if (withdrawal.status === 'sent') {
          totalWithdrawals += withdrawal.amount;
          successfulWithdrawals++;
        } else if (withdrawal.status === 'refunded') {
          refundedWithdrawals++;
        }
      }

      console.log(`\nüìã –°–≤–æ–¥–∫–∞ –ø–æ ${userId}:`);
      console.log(`   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${confirmedDeposits} (${totalDeposits} DEL)`);
      console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤: ${successfulWithdrawals} (${totalWithdrawals} DEL)`);
      console.log(`   –í–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤: ${refundedWithdrawals}`);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const correctBalance = totalDeposits - totalWithdrawals;
      const currentBalance = user.gameState?.tokens || 0;

      console.log(`\nüí∞ –ë–∞–ª–∞–Ω—Å:`);
      console.log(`   –¢–µ–∫—É—â–∏–π: ${currentBalance} DEL`);
      console.log(`   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: ${correctBalance} DEL`);
      console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${correctBalance - currentBalance} DEL`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (Math.abs(currentBalance - correctBalance) > 0.01) {
        await this.db.collection('users').updateOne(
          { userId },
          {
            $set: {
              "gameState.tokens": correctBalance,
              "gameState.lastSaved": new Date(),
              updatedAt: new Date()
            }
          }
        );

        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${currentBalance} ‚Üí ${correctBalance} DEL`);
        
        return {
          userId: userId,
          oldBalance: currentBalance,
          newBalance: correctBalance,
          deposits: totalDeposits,
          withdrawals: totalWithdrawals,
          confirmedDeposits: confirmedDeposits,
          successfulWithdrawals: successfulWithdrawals,
          refundedWithdrawals: refundedWithdrawals
        };
      } else {
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${currentBalance} DEL`);
        return null;
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${userId}:`, error);
      throw error;
    }
  }

  async runFix() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...\n');
    
    try {
      await this.initialize();
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const result = await this.fixUserBalance('telegram-297810833');
      
      if (result) {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
        console.log(JSON.stringify(result, null, 2));
      }
      
      console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    } finally {
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
const fixer = new BalanceFixer();
fixer.runFix(); 