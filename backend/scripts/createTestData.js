const { MongoClient } = require('mongodb');
require('dotenv').config({ path: './.env' });

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function createTestData() {
  let client;
  
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(MONGODB_DB);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = [
      {
        userId: 'test-user-1',
        profile: {
          username: 'TestUser1',
          telegramId: '123456789',
          telegramUsername: 'testuser1',
          telegramFirstName: 'Test',
          telegramLastName: 'User1'
        },
        gameState: {
          tokens: 1500.5,
          highScore: 1500.5,
          lastSaved: new Date()
        },
        updatedAt: new Date()
      },
      {
        userId: 'test-user-2',
        profile: {
          username: 'TestUser2',
          telegramId: '987654321',
          telegramUsername: 'testuser2',
          telegramFirstName: 'Test',
          telegramLastName: 'User2'
        },
        gameState: {
          tokens: 2300.75,
          highScore: 2300.75,
          lastSaved: new Date()
        },
        updatedAt: new Date()
      },
      {
        userId: 'test-user-3',
        profile: {
          username: 'TestUser3',
          telegramId: '555666777',
          telegramUsername: 'testuser3',
          telegramFirstName: 'Test',
          telegramLastName: 'User3'
        },
        gameState: {
          tokens: 800.25,
          highScore: 800.25,
          lastSaved: new Date()
        },
        updatedAt: new Date()
      },
      {
        userId: 'test-user-4',
        profile: {
          username: 'TestUser4',
          telegramId: '111222333',
          telegramUsername: 'testuser4',
          telegramFirstName: 'Test',
          telegramLastName: 'User4'
        },
        gameState: {
          tokens: 3200.0,
          highScore: 3200.0,
          lastSaved: new Date()
        },
        updatedAt: new Date()
      },
      {
        userId: 'test-user-5',
        profile: {
          username: 'TestUser5',
          telegramId: '444555666',
          telegramUsername: 'testuser5',
          telegramFirstName: 'Test',
          telegramLastName: 'User5'
        },
        gameState: {
          tokens: 950.125,
          highScore: 950.125,
          lastSaved: new Date()
        },
        updatedAt: new Date()
      }
    ];
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await db.collection('users').deleteMany({});
    await db.collection('leaderboard').deleteMany({});
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await db.collection('users').insertMany(testUsers);
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    const leaderboardEntries = testUsers.map((user, index) => ({
      userId: user.userId,
      username: user.profile.username,
      telegramId: user.profile.telegramId,
      telegramUsername: user.profile.telegramUsername,
      telegramFirstName: user.profile.telegramFirstName,
      telegramLastName: user.profile.telegramLastName,
      tokens: user.gameState.highScore,
      rank: index + 1,
      updatedAt: new Date()
    }));
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º (—É–±—ã–≤–∞–Ω–∏–µ)
    leaderboardEntries.sort((a, b) => b.tokens - a.tokens);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
    leaderboardEntries.forEach((entry, index) => {
      entry.rank = index + 1;
    });
    
    await db.collection('leaderboard').insertMany(leaderboardEntries);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Å 5 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await db.collection('leaderboard').createIndex({ tokens: -1 });
    await db.collection('leaderboard').createIndex({ userId: 1 });
    await db.collection('leaderboard').createIndex({ updatedAt: -1 });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const userCount = await db.collection('users').countDocuments();
    const leaderboardCount = await db.collection('leaderboard').countDocuments();
    
    console.log('');
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${leaderboardCount}`);
    
    const top3 = await db.collection('leaderboard')
      .find()
      .sort({ tokens: -1 })
      .limit(3)
      .toArray();
    
    console.log('');
    console.log('üèÜ –¢–æ–ø-3:');
    top3.forEach((user, index) => {
      console.log(`${index + 1}. ${user.username}: ${user.tokens} DEL (—Ä–∞–Ω–≥: ${user.rank})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

createTestData(); 