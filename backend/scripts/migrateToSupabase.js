const { MongoClient } = require('mongodb');
const supabaseService = require('../services/supabaseService');
require('dotenv').config();

// Database configuration
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%25sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  return `mongodb+srv://${username}:${password}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function migrateToSupabase() {
  let mongoClient = null;
  
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ Supabase');
    console.log('=' .repeat(60));
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    console.log('\n1Ô∏è‚É£ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE');
    console.log('-'.repeat(30));
    
    await supabaseService.initialize();
    console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    console.log('\n2Ô∏è‚É£ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB');
    console.log('-'.repeat(30));
    
    mongoClient = new MongoClient(MONGODB_URI);
    await mongoClient.connect();
    const db = mongoClient.db(MONGODB_DB);
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB
    console.log('\n3Ô∏è‚É£ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó MONGODB');
    console.log('-'.repeat(30));
    
    const mongoData = {};
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    console.log('üì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    mongoData.users = await db.collection('users').find({}).toArray();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${mongoData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // –õ–∏–¥–µ—Ä–±–æ—Ä–¥
    console.log('üì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥...');
    mongoData.leaderboard = await db.collection('leaderboard').find({}).toArray();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${mongoData.leaderboard.length} –∑–∞–ø–∏—Å–µ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞`);
    
    // –î–µ–ø–æ–∑–∏—Ç—ã
    console.log('üì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã...');
    mongoData.deposits = await db.collection('deposits').find({}).toArray();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${mongoData.deposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    
    // –í—ã–≤–æ–¥—ã
    console.log('üì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–≤–æ–¥—ã...');
    mongoData.withdrawals = await db.collection('withdrawals').find({}).toArray();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${mongoData.withdrawals.length} –≤—ã–≤–æ–¥–æ–≤`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    console.log('üì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...');
    mongoData.adminSettings = await db.collection('adminSettings').find({}).toArray();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${mongoData.adminSettings.length} –Ω–∞—Å—Ç—Ä–æ–µ–∫`);
    
    // –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    console.log('üì¶ –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    mongoData.systemConfig = await db.collection('system_config').find({}).toArray();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${mongoData.systemConfig.length} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π`);
    
    // 4. –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
    console.log('\n4Ô∏è‚É£ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –í SUPABASE');
    console.log('-'.repeat(30));
    
    await supabaseService.migrateFromMongoDB(mongoData);
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ò');
    console.log('-'.repeat(30));
    
    const stats = await supabaseService.getStatistics();
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stats.totalUsers}`);
    console.log(`   –õ–∏–¥–µ—Ä–±–æ—Ä–¥: ${stats.totalLeaderboard}`);
    console.log(`   –î–µ–ø–æ–∑–∏—Ç—ã: ${stats.totalDeposits}`);
    console.log(`   –í—ã–≤–æ–¥—ã: ${stats.totalWithdrawals}`);
    
    // 6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Supabase (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    console.log('\n6Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –í SUPABASE');
    console.log('-'.repeat(30));
    
    console.log('üìã –°–æ–∑–¥–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü...');
    const sqlScript = generateSupabaseTablesSQL();
    console.log('‚úÖ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω (—Å–º. supabase_tables.sql)');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç –≤ —Ñ–∞–π–ª
    const fs = require('fs');
    fs.writeFileSync('supabase_tables.sql', sqlScript);
    
    console.log('\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('=' .repeat(60));
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç –≤ Supabase Dashboard');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    if (mongoClient) {
      await mongoClient.close();
      console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

function generateSupabaseTablesSQL() {
  return `
-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è TAPDEL –≤ Supabase
-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ Supabase SQL Editor

-- 1. –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS users (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  userId TEXT UNIQUE NOT NULL,
  profile JSONB,
  gameState JSONB,
  gameBalance DECIMAL DEFAULT 0,
  transactions JSONB DEFAULT '[]',
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updatedAt TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
CREATE TABLE IF NOT EXISTS leaderboard (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  userId TEXT UNIQUE NOT NULL,
  username TEXT,
  telegramId BIGINT,
  telegramUsername TEXT,
  telegramFirstName TEXT,
  telegramLastName TEXT,
  tokens DECIMAL DEFAULT 0,
  rank INTEGER,
  updatedAt TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. –¢–∞–±–ª–∏—Ü–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
CREATE TABLE IF NOT EXISTS deposits (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  userId TEXT NOT NULL,
  amount DECIMAL NOT NULL,
  uniqueAmount DECIMAL NOT NULL,
  matched BOOLEAN DEFAULT FALSE,
  txHash TEXT,
  confirmations INTEGER DEFAULT 0,
  expiresAt TIMESTAMP WITH TIME ZONE,
  matchedAt TIMESTAMP WITH TIME ZONE,
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. –¢–∞–±–ª–∏—Ü–∞ –≤—ã–≤–æ–¥–æ–≤
CREATE TABLE IF NOT EXISTS withdrawals (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  userId TEXT NOT NULL,
  toAddress TEXT NOT NULL,
  amount DECIMAL NOT NULL,
  status TEXT DEFAULT 'queued',
  txHash TEXT,
  error TEXT,
  processingStartedAt TIMESTAMP WITH TIME ZONE,
  processedAt TIMESTAMP WITH TIME ZONE,
  createdAt TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
CREATE TABLE IF NOT EXISTS admin_settings (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  settings JSONB NOT NULL,
  updatedAt TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 6. –¢–∞–±–ª–∏—Ü–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CREATE TABLE IF NOT EXISTS system_config (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  key TEXT UNIQUE NOT NULL,
  value JSONB NOT NULL,
  updatedAt TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
CREATE TABLE IF NOT EXISTS token_history (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  userId TEXT NOT NULL,
  tokenSymbol TEXT NOT NULL,
  oldValue JSONB,
  newValue JSONB,
  changedAt TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_users_userId ON users(userId);
CREATE INDEX IF NOT EXISTS idx_users_telegramId ON users(profile->>'telegramId');
CREATE INDEX IF NOT EXISTS idx_leaderboard_tokens ON leaderboard(tokens DESC);
CREATE INDEX IF NOT EXISTS idx_leaderboard_userId ON leaderboard(userId);
CREATE INDEX IF NOT EXISTS idx_deposits_userId ON deposits(userId);
CREATE INDEX IF NOT EXISTS idx_deposits_matched ON deposits(matched);
CREATE INDEX IF NOT EXISTS idx_deposits_expiresAt ON deposits(expiresAt);
CREATE INDEX IF NOT EXISTS idx_withdrawals_userId ON withdrawals(userId);
CREATE INDEX IF NOT EXISTS idx_withdrawals_status ON withdrawals(status);
CREATE INDEX IF NOT EXISTS idx_withdrawals_createdAt ON withdrawals(createdAt);
CREATE INDEX IF NOT EXISTS idx_system_config_key ON system_config(key);
CREATE INDEX IF NOT EXISTS idx_token_history_userId ON token_history(userId);
CREATE INDEX IF NOT EXISTS idx_token_history_changedAt ON token_history(changedAt DESC);

-- –í–∫–ª—é—á–µ–Ω–∏–µ Row Level Security (RLS)
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE leaderboard ENABLE ROW LEVEL SECURITY;
ALTER TABLE deposits ENABLE ROW LEVEL SECURITY;
ALTER TABLE withdrawals ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_config ENABLE ROW LEVEL SECURITY;
ALTER TABLE token_history ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è service role)
CREATE POLICY "Enable all for service role" ON users FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Enable all for service role" ON leaderboard FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Enable all for service role" ON deposits FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Enable all for service role" ON withdrawals FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Enable all for service role" ON admin_settings FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Enable all for service role" ON system_config FOR ALL USING (auth.role() = 'service_role');
CREATE POLICY "Enable all for service role" ON token_history FOR ALL USING (auth.role() = 'service_role');

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
CREATE POLICY "Enable read for anon" ON users FOR SELECT USING (true);
CREATE POLICY "Enable read for anon" ON leaderboard FOR SELECT USING (true);
CREATE POLICY "Enable read for anon" ON deposits FOR SELECT USING (true);
CREATE POLICY "Enable read for anon" ON withdrawals FOR SELECT USING (true);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updatedAt
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updatedAt = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updatedAt
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_leaderboard_updated_at BEFORE UPDATE ON leaderboard FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_admin_settings_updated_at BEFORE UPDATE ON admin_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_system_config_updated_at BEFORE UPDATE ON system_config FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- –í—Å—Ç–∞–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
INSERT INTO admin_settings (settings) VALUES (
  '{
    "token": {
      "symbol": "BOOST",
      "contractAddress": "0x15cefa2ffb0759b519c15e23025a718978be9322",
      "decimals": 18
    },
    "gameMechanics": {
      "baseReward": 1,
      "maxFingers": 5,
      "rateWindow": 1000
    },
    "gearMultipliers": {
      "N": 0,
      "1": 1,
      "2": 1.5,
      "3": 2,
      "4": 3,
      "M": 5
    },
    "gearThresholds": {
      "1": 1,
      "2": 5,
      "3": 10,
      "4": 15,
      "M": 20
    },
    "energy": {
      "recoveryRate": 0.033,
      "consumptionRate": {
        "N": 0,
        "1": 0.006,
        "2": 0.009,
        "3": 0.012,
        "4": 0.015,
        "M": 0.0165
      }
    },
    "components": {
      "engines": [100, 250, 500, 1000, 2000, 4000, 8000, 16000, 32000, 64000],
      "gearboxes": [50, 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600],
      "batteries": [100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200],
      "hyperdrives": [5000, 10000, 20000, 40000, 80000],
      "powerGrids": [500, 1000, 2000, 4000, 8000]
    }
  }'::jsonb
) ON CONFLICT DO NOTHING;

-- –í—Å—Ç–∞–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
INSERT INTO system_config (key, value) VALUES (
  'tokens',
  '[
    {
      "symbol": "BOOST",
      "address": "0x15cefa2ffb0759b519c15e23025a718978be9322",
      "decimals": 18,
      "name": "BOOST Token",
      "isActive": true
    },
    {
      "symbol": "DEL",
      "address": "0x0000000000000000000000000000000000000000",
      "decimals": 18,
      "name": "Decimal Token",
      "isActive": false
    }
  ]'::jsonb
) ON CONFLICT (key) DO NOTHING;

-- –ì–æ—Ç–æ–≤–æ!
SELECT 'TAPDEL —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!' as status;
`;
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateToSupabase()
    .then(() => {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { migrateToSupabase };
