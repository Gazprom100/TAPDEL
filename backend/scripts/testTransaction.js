const { Web3 } = require('web3');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DecimalChain
const RPC_URL = 'https://node.decimalchain.com/web3/';
const CHAIN_ID = 75;
const GAS_LIMIT = 21000;
const GAS_PRICE = 50000;

// –†–∞–±–æ—á–∏–π –∫–æ—à–µ–ª–µ–∫
const WORKING_ADDRESS = '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43';
const WORKING_PRIVKEY_ENC = 'x435O9YfEK4jdApK2VSc0N8lu/LlWtjDpUmhjGat4AB/7U4eMsOxgBqQOYO/GUjGonYr1csAuwhgXqMw+HtByeUy0JiX50XLLyCTOTtFfrjgqlb6t4X2WIem+guMG00Q';
const KEY_PASSPHRASE = 'PyL34X8rWaU6p2OwErGV';

// –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
function getPrivateKey() {
  try {
    const algorithm = 'aes-256-cbc';
    const key = crypto.scryptSync(KEY_PASSPHRASE, 'salt', 32);
    const encryptedData = Buffer.from(WORKING_PRIVKEY_ENC, 'base64');
    
    const iv = encryptedData.slice(0, 16);
    const encrypted = encryptedData.slice(16);
    
    const decipher = crypto.createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(encrypted, null, 'utf8');
    decrypted += decipher.final('utf8');
    
    if (!decrypted.startsWith('0x')) {
      decrypted = '0x' + decrypted;
    }
    
    return decrypted;
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ' + error.message);
  }
}

async function testTransaction() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    
    const web3 = new Web3(RPC_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const blockNumber = await web3.eth.getBlockNumber();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ DecimalChain, –±–ª–æ–∫:', blockNumber);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await web3.eth.getBalance(WORKING_ADDRESS);
    const balanceInDel = parseFloat(web3.utils.fromWei(balance, 'ether'));
    console.log('üí∞ –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:', balanceInDel, 'DEL');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    const privateKey = getPrivateKey();
    console.log('üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º nonce
    const nonce = await web3.eth.getTransactionCount(WORKING_ADDRESS);
    console.log('üìù Nonce:', nonce);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (0.001 DEL)
    const testAmount = '0.001';
    const testToAddress = '0xd6187dD54DF3002D5C82043b81EdE74187A5A647';
    
    const transaction = {
      from: web3.utils.toChecksumAddress(WORKING_ADDRESS),
      to: web3.utils.toChecksumAddress(testToAddress),
      value: web3.utils.toWei(testAmount, 'ether'),
      gas: GAS_LIMIT,
      gasPrice: web3.utils.toWei(GAS_PRICE.toString(), 'gwei'),
      nonce: nonce,
      chainId: CHAIN_ID
    };
    
    console.log('üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
      from: transaction.from,
      to: transaction.to,
      value: testAmount + ' DEL',
      gas: transaction.gas,
      gasPrice: GAS_PRICE + ' gwei'
    });
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const signedTx = await web3.eth.accounts.signTransaction(transaction, privateKey);
    console.log('‚úçÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
    
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìÑ Hash:', receipt.transactionHash);
    console.log('üì¶ Block:', receipt.blockNumber);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('üìã –î–µ—Ç–∞–ª–∏:', error);
  }
}

testTransaction(); 