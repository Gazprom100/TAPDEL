const databaseConfig = require('../config/database');
const decimalService = require('../services/decimalService');

async function checkEvgeniWithdrawal() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –í–´–í–û–î–ê EVGENI_KRASNOV');
    console.log('=====================================');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await databaseConfig.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await database.collection('users').findOne({
      $or: [
        { username: 'Evgeni_Krasnov' },
        { telegramUsername: 'Evgeni_Krasnov' },
        { userId: 'Evgeni_Krasnov' }
      ]
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Evgeni_Krasnov –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${user.userId}`);
    console.log(`   Username: ${user.username || user.telegramUsername}`);
    console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.gameState?.tokens || 0} DEL`);
    
    // –ò—â–µ–º –≤—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const withdrawals = await database.collection('withdrawals').find({
      userId: user.userId
    }).sort({ createdAt: -1 }).toArray();
    
    console.log(`\nüìã –í—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ–≥–æ: ${withdrawals.length}):`);
    
    for (const withdrawal of withdrawals) {
      console.log(`\n   –í—ã–≤–æ–¥ ID: ${withdrawal._id}`);
      console.log(`   –°—É–º–º–∞: ${withdrawal.amount} DEL`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
      console.log(`   –ê–¥—Ä–µ—Å: ${withdrawal.address}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${withdrawal.createdAt}`);
      
      if (withdrawal.processingStartedAt) {
        console.log(`   –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${withdrawal.processingStartedAt}`);
      }
      
      if (withdrawal.txHash) {
        console.log(`   TX Hash: ${withdrawal.txHash}`);
      }
      
      if (withdrawal.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${withdrawal.error}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥ –Ω–∞ 3000 DEL
      if (withdrawal.amount === 3000) {
        console.log(`\nüéØ –ù–ê–ô–î–ï–ù –í–´–í–û–î –ù–ê 3000 DEL!`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
        
        if (withdrawal.status === 'processing' && !withdrawal.txHash) {
          console.log(`   ‚ö†Ô∏è –í–´–í–û–î –ó–ê–°–¢–†–Ø–õ –í –û–ë–†–ê–ë–û–¢–ö–ï!`);
          console.log(`   –ù—É–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å`);
        } else if (withdrawal.status === 'completed' && withdrawal.txHash) {
          console.log(`   ‚úÖ –í–´–í–û–î –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!`);
          console.log(`   TX Hash: ${withdrawal.txHash}`);
        } else if (withdrawal.status === 'failed') {
          console.log(`   ‚ùå –í–´–í–û–î –ü–†–û–í–ê–õ–ï–ù!`);
          console.log(`   –û—à–∏–±–∫–∞: ${withdrawal.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    const activeWithdrawals = withdrawals.filter(w => 
      w.status === 'queued' || w.status === 'processing'
    );
    
    console.log(`\nüîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã: ${activeWithdrawals.length}`);
    
    if (activeWithdrawals.length > 0) {
      console.log('   –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤:');
      for (const withdrawal of activeWithdrawals) {
        console.log(`   - ${withdrawal.amount} DEL (${withdrawal.status})`);
      }
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

checkEvgeniWithdrawal(); 