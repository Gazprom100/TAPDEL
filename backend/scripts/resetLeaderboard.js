const { MongoClient } = require('mongodb');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–π MongoDB URI
function generateCleanMongoURI() {
  const originalUri = process.env.MONGODB_URI;
  if (!originalUri) {
    throw new Error('MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  let cleanUri = originalUri;
  
  // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
  const problematicParams = [
    'retryWrites=true',
    'w=majority',
    'journal=true',
    'readPreference=primary'
  ];
  
  problematicParams.forEach(param => {
    cleanUri = cleanUri.replace(new RegExp(`[&?]${param}`, 'g'), '');
  });
  
  // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
  cleanUri = cleanUri.replace(/[&?]+$/, '');
  cleanUri = cleanUri.replace(/\?&/, '?');
  
  return cleanUri;
}

const MONGODB_URI = generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function resetLeaderboard() {
  let client;
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(MONGODB_DB);
    
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...');
    
    // 1. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ leaderboard
    const leaderboardResult = await db.collection('leaderboard').deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${leaderboardResult.deletedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ leaderboard`);
    
    // 2. –°–±—Ä–æ—Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîÑ –°–±—Ä–æ—Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResult = await db.collection('users').updateMany(
      {},
      {
        $set: {
          'gameState.tokens': 0,
          'gameState.highScore': 0,
          'gameBalance': 0,
          updatedAt: new Date()
        }
      }
    );
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${usersResult.modifiedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // 3. –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    const transactionsResult = await db.collection('users').updateMany(
      {},
      {
        $set: {
          transactions: []
        }
      }
    );
    console.log(`‚úÖ –û—á–∏—â–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É ${transactionsResult.modifiedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // 4. –û—á–∏—Å—Ç–∫–∞ DecimalChain –¥–∞–Ω–Ω—ã—Ö (–¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã)
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ DecimalChain –¥–∞–Ω–Ω—ã—Ö...');
    const depositsResult = await db.collection('deposits').deleteMany({});
    const withdrawalsResult = await db.collection('withdrawals').deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${depositsResult.deletedCount} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${withdrawalsResult.deletedCount} –≤—ã–≤–æ–¥–æ–≤`);
    
    // 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const testUsers = [
      {
        userId: 'demo-user-main',
        username: '–ï–≤–≥–µ–Ω–∏–π',
        telegramFirstName: '–ï–≤–≥–µ–Ω–∏–π',
        telegramLastName: '–ö—Ä–∞—Å–Ω–æ–≤',
        telegramUsername: 'evgenik',
        tokens: 0
      }
    ];
    
    for (const user of testUsers) {
      await db.collection('leaderboard').updateOne(
        { userId: user.userId },
        {
          $set: {
            ...user,
            rank: 1,
            updatedAt: new Date()
          }
        },
        { upsert: true }
      );
    }
    
    // 6. –ü–µ—Ä–µ—Å—á–µ—Ç —Ä–∞–Ω–≥–æ–≤
    console.log('üî¢ –ü–µ—Ä–µ—Å—á–µ—Ç —Ä–∞–Ω–≥–æ–≤...');
    const users = await db.collection('leaderboard')
      .find()
      .sort({ tokens: -1 })
      .toArray();
    
    for (let i = 0; i < users.length; i++) {
      await db.collection('leaderboard').updateOne(
        { _id: users[i]._id },
        { $set: { rank: i + 1 } }
      );
    }
    
    console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º!');
    console.log('üéÆ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å 0 DEL');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    process.exit(1);
  } finally {
    if (client) {
      await client.close();
      console.log('üîê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
resetLeaderboard(); 