const { upstashRedisService } = require('../services/upstashRedisService');
const decimalService = require('../services/decimalService');
const botService = require('../services/botService');

async function testServicesStatus() {
  try {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê –°–ï–†–í–ò–°–û–í');
    console.log('==================================\n');
    
    const now = new Date();
    const services = [];
    
    // MongoDB
    console.log('üìä MongoDB:');
    try {
      const { MongoClient } = require('mongodb');
      const client = new MongoClient(process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0');
      const start = Date.now();
      await client.connect();
      await client.db().admin().ping();
      const responseTime = Date.now() - start;
      await client.close();
      
      services.push({
        name: 'MongoDB',
        status: 'online',
        responseTime,
        lastCheck: now.toISOString()
      });
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: online (${responseTime}ms)`);
    } catch (error) {
      services.push({
        name: 'MongoDB',
        status: 'offline',
        responseTime: 0,
        lastCheck: now.toISOString(),
        error: error.message
      });
      console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: offline (${error.message})`);
    }
    
    // Redis
    console.log('\nüî¥ Redis:');
    try {
      const start = Date.now();
      await upstashRedisService.ping();
      const responseTime = Date.now() - start;
      
      services.push({
        name: 'Redis',
        status: 'online',
        responseTime,
        lastCheck: now.toISOString()
      });
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: online (${responseTime}ms)`);
    } catch (error) {
      services.push({
        name: 'Redis',
        status: 'offline',
        responseTime: 0,
        lastCheck: now.toISOString(),
        error: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      });
      console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: offline (–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`);
    }
    
    // DecimalChain API
    console.log('\nüîó DecimalChain API:');
    try {
      const start = Date.now();
      await decimalService.getWorkingBalance();
      const responseTime = Date.now() - start;
      
      services.push({
        name: 'DecimalChain API',
        status: 'online',
        responseTime,
        lastCheck: now.toISOString(),
      });
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: online (${responseTime}ms)`);
    } catch (error) {
      services.push({
        name: 'DecimalChain API',
        status: 'offline',
        responseTime: 0,
        lastCheck: now.toISOString(),
        error: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      });
      console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: offline (–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`);
    }
    
    // Telegram Bot
    console.log('\nü§ñ Telegram Bot:');
    try {
      const start = Date.now();
      if (botService.bot) {
        await botService.bot.getMe();
        const responseTime = Date.now() - start;
        
        services.push({
          name: 'Telegram Bot',
          status: 'online',
          responseTime,
          lastCheck: now.toISOString()
        });
        console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: online (${responseTime}ms)`);
      } else {
        services.push({
          name: 'Telegram Bot',
          status: 'offline',
          responseTime: 0,
          lastCheck: now.toISOString(),
          error: '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        });
        console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: offline (–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)`);
      }
    } catch (error) {
      services.push({
        name: 'Telegram Bot',
        status: 'offline',
        responseTime: 0,
        lastCheck: now.toISOString(),
        error: error.message
      });
      console.log(`   ‚ùå –°—Ç–∞—Ç—É—Å: offline (${error.message})`);
    }
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–î–ú–ò–ù–ü–ê–ù–ï–õ–ò:');
    console.log('=====================================');
    console.log(JSON.stringify(services, null, 2));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const onlineCount = services.filter(s => s.status === 'online').length;
    const totalCount = services.length;
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${onlineCount}/${totalCount} —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–Ω–ª–∞–π–Ω`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testServicesStatus();
