const { MongoClient } = require('mongodb');
require('dotenv').config({ path: './.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0'
};

class UserDataRefresher {
  constructor() {
    this.db = null;
    this.results = {
      timestamp: new Date(),
      updated: [],
      errors: []
    };
  }

  async initialize() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      const client = new MongoClient(config.MONGODB_URI);
      await client.connect();
      this.db = client.db('tapdel');
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async refreshUserData(userId) {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.db.collection('users').findOne({ userId });
      if (!user) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const deposits = await this.db.collection('deposits').find({
        userId: userId,
        matched: true
      }).toArray();

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const withdrawals = await this.db.collection('withdrawals').find({
        userId: userId
      }).toArray();

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      let totalDeposits = 0;
      let totalWithdrawals = 0;

      // –°—É–º–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
      for (const deposit of deposits) {
        if (deposit.confirmations >= 6) {
          totalDeposits += deposit.amountRequested;
        }
      }

      // –°—É–º–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –≤—ã–≤–æ–¥—ã
      for (const withdrawal of withdrawals) {
        if (withdrawal.status === 'sent') {
          totalWithdrawals += withdrawal.amount;
        }
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
      const correctBalance = totalDeposits - totalWithdrawals;
      const currentBalance = user.gameState?.tokens || 0;

      console.log(`üìä –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
      console.log(`   –¢–µ–∫—É—â–∏–π: ${currentBalance} DEL`);
      console.log(`   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: ${correctBalance} DEL`);
      console.log(`   –î–µ–ø–æ–∑–∏—Ç—ã: ${totalDeposits} DEL`);
      console.log(`   –í—ã–≤–æ–¥—ã: ${totalWithdrawals} DEL`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –æ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π
      if (Math.abs(currentBalance - correctBalance) > 0.01) {
        await this.db.collection('users').updateOne(
          { userId },
          {
            $set: {
              "gameState.tokens": correctBalance,
              "gameState.lastSaved": new Date(),
              updatedAt: new Date()
            }
          }
        );

        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentBalance} ‚Üí ${correctBalance} DEL`);
        
        this.results.updated.push({
          userId: userId,
          oldBalance: currentBalance,
          newBalance: correctBalance,
          deposits: totalDeposits,
          withdrawals: totalWithdrawals
        });
      } else {
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: ${currentBalance} DEL`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      for (const deposit of deposits) {
        let newStatus = 'waiting';
        
        if (deposit.confirmations >= 6) {
          newStatus = 'confirmed';
        } else if (deposit.confirmations > 0) {
          newStatus = 'processing';
        }

        if (deposit.status !== newStatus) {
          await this.db.collection('deposits').updateOne(
            { _id: deposit._id },
            { $set: { status: newStatus } }
          );
          console.log(`üìã –°—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞ ${deposit._id}: ${deposit.status} ‚Üí ${newStatus}`);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—ã–≤–æ–¥–æ–≤
      for (const withdrawal of withdrawals) {
        let newStatus = withdrawal.status;
        
        // –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –≤ –æ—á–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
        if (withdrawal.status === 'queued' && 
            new Date() - new Date(withdrawal.requestedAt) > 5 * 60 * 1000) {
          newStatus = 'failed';
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await this.db.collection('users').updateOne(
            { userId },
            { $inc: { "gameState.tokens": withdrawal.amount } }
          );
          
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            {
              $set: {
                status: 'failed',
                error: 'Timeout - funds refunded',
                processedAt: new Date()
              }
            }
          );
          
          console.log(`üí∞ –í—ã–≤–æ–¥ ${withdrawal._id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ failed, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã`);
        }
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      this.results.errors.push({
        userId: userId,
        error: error.message
      });
    }
  }

  async refreshAllUsers() {
    console.log('\nüë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    try {
      const users = await this.db.collection('users').find({}).toArray();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

      for (const user of users) {
        await this.refreshUserData(user.userId);
      }

      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      this.results.errors.push({
        type: 'bulk_update',
        error: error.message
      });
    }
  }

  async generateSummary() {
    console.log('\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏...');
    
    const summary = {
      totalUpdated: this.results.updated.length,
      totalErrors: this.results.errors.length,
      totalBalanceChange: 0
    };

    for (const update of this.results.updated) {
      summary.totalBalanceChange += (update.newBalance - update.oldBalance);
    }

    this.results.summary = summary;
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async runRefresh() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
    
    try {
      await this.initialize();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.refreshUserData('telegram-297810833');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.refreshAllUsers();
      
      await this.generateSummary();
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      console.log(JSON.stringify(this.results, null, 2));
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const refreshCollection = this.db.collection('data_refresh');
      await refreshCollection.insertOne({
        ...this.results,
        createdAt: new Date()
      });
      
      console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const refresher = new UserDataRefresher();
refresher.runRefresh(); 