const databaseConfig = require('../config/database');
const decimalService = require('../services/decimalService');
const config = require('../config/decimal');

async function testBlockMonitoring() {
  try {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–õ–û–ö–û–í');
    console.log('=====================================');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await databaseConfig.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalService
    if (!decimalService.web3) {
      await decimalService.initialize();
    }
    console.log('‚úÖ DecimalService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
    const currentBlock = await decimalService.web3.eth.getBlockNumber();
    console.log(`üìä –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: ${currentBlock}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –±–ª–æ–∫–æ–≤
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –±–ª–æ–∫–æ–≤:');
    for (let i = 0; i < 5; i++) {
      const blockNum = Number(currentBlock) - i;
      const block = await decimalService.web3.eth.getBlock(blockNum, true);
      
      if (block && block.transactions) {
        const transactionsToWorkingAddress = block.transactions.filter(tx => 
          tx.to && tx.to.toLowerCase() === config.WORKING_ADDRESS.toLowerCase()
        );
        
        console.log(`   –ë–ª–æ–∫ ${blockNum}: ${block.transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, ${transactionsToWorkingAddress.length} –∫ —Ä–∞–±–æ—á–µ–º—É –∞–¥—Ä–µ—Å—É`);
        
        if (transactionsToWorkingAddress.length > 0) {
          transactionsToWorkingAddress.forEach((tx, index) => {
            const value = parseFloat(decimalService.web3.utils.fromWei(tx.value, 'ether'));
            console.log(`     TX ${index + 1}: ${value} DEL (${tx.hash})`);
          });
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    const activeDeposits = await database.collection('deposits').find({
      matched: false,
      expiresAt: { $gt: new Date() }
    }).toArray();
    
    console.log(`\nüîç –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${activeDeposits.length}`);
    activeDeposits.forEach((deposit, index) => {
      console.log(`   ${index + 1}. ${deposit.uniqueAmount} DEL (${deposit.userId})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω—É–∂–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
    console.log('\nüîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω—É–∂–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏...');
    for (const deposit of activeDeposits) {
      console.log(`   –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ ${deposit.uniqueAmount} DEL...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–ª–æ–∫–æ–≤
      for (let i = 0; i < 10; i++) {
        const blockNum = Number(currentBlock) - i;
        const block = await decimalService.web3.eth.getBlock(blockNum, true);
        
        if (block && block.transactions) {
          for (const tx of block.transactions) {
            if (tx.to && tx.to.toLowerCase() === config.WORKING_ADDRESS.toLowerCase()) {
              const value = parseFloat(decimalService.web3.utils.fromWei(tx.value, 'ether'));
              const roundedValue = Math.round(value * 10000) / 10000;
              const depositRounded = Math.round(deposit.uniqueAmount * 10000) / 10000;
              const EPSILON = 0.00005;
              
              if (Math.abs(roundedValue - depositRounded) <= EPSILON) {
                console.log(`   ‚úÖ –ù–ê–ô–î–ï–ù–ê! –ë–ª–æ–∫ ${blockNum}, TX: ${tx.hash}, –°—É–º–º–∞: ${value} DEL`);
              }
            }
          }
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log('\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:');
    console.log(`   –†–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å: ${config.WORKING_ADDRESS}`);
    console.log(`   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${config.CONFIRMATIONS}`);
    console.log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: 10 —Å–µ–∫—É–Ω–¥`);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testBlockMonitoring(); 