require('dotenv').config({ path: './.env' });
const fetch = require('node-fetch');
const config = require('../config/decimal');

class DecimalApiTester {
  constructor() {
    this.apiBaseUrl = config.API_BASE_URL;
  }

  async testApiEndpoints() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DecimalChain API...\n');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...');
    try {
      const response = await fetch(`${this.apiBaseUrl}/addresses/`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
      if (response.ok) {
        const data = await response.json();
        console.log(`   ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ ${data.result?.adresses?.length || 0} –∞–¥—Ä–µ—Å–æ–≤`);
      } else {
        console.log(`   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusText}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: ${error.message}`);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–¥—Ä–µ—Å–∞
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–¥—Ä–µ—Å–∞...');
    if (config.WORKING_ADDRESS) {
      try {
        const balanceData = await config.getAddressBalance(config.WORKING_ADDRESS);
        console.log(`   –ê–¥—Ä–µ—Å: ${config.WORKING_ADDRESS}`);
        console.log(`   –û—Ç–≤–µ—Ç API:`, JSON.stringify(balanceData, null, 2));
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
      }
    } else {
      console.log('   ‚ö†Ô∏è WORKING_ADDRESS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    if (config.WORKING_ADDRESS) {
      try {
        const txData = await config.getAddressTransactions(config.WORKING_ADDRESS, 5);
        console.log(`   –ê–¥—Ä–µ—Å: ${config.WORKING_ADDRESS}`);
        console.log(`   –û—Ç–≤–µ—Ç API:`, JSON.stringify(txData, null, 2));
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${error.message}`);
      }
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ RPC
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ RPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    try {
      const { Web3 } = require('web3');
      const web3 = new Web3(config.RPC_URL);
      
      const blockNumber = await web3.eth.getBlockNumber();
      console.log(`   ‚úÖ RPC –ø–æ–¥–∫–ª—é—á–µ–Ω, –±–ª–æ–∫: ${blockNumber}`);
      
      const gasPrice = await web3.eth.getGasPrice();
      const gasPriceGwei = Number(gasPrice) / 1000000000;
      console.log(`   –ì–∞–∑ –ø—Ä–∞–π—Å: ${gasPriceGwei} gwei`);
      
      if (config.WORKING_ADDRESS) {
        const balance = await web3.eth.getBalance(config.WORKING_ADDRESS);
        const balanceDel = Number(balance) / 1000000000000000000;
        console.log(`   –ë–∞–ª–∞–Ω—Å RPC: ${balanceDel} DEL`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ RPC: ${error.message}`);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    console.log(`   API Base URL: ${config.API_BASE_URL}`);
    console.log(`   RPC URL: ${config.RPC_URL}`);
    console.log(`   Chain ID: ${config.CHAIN_ID}`);
    console.log(`   Gas Price: ${config.GAS_PRICE} gwei`);
    console.log(`   Working Address: ${config.WORKING_ADDRESS ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
    console.log(`   Private Key: ${config.WORKING_PRIVKEY_ENC ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
    console.log(`   Key Passphrase: ${config.KEY_PASSPHRASE ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  async testTransactionSending() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    
    if (!config.isConfigured()) {
      console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      return;
    }

    try {
      const { Web3 } = require('web3');
      const web3 = new Web3(config.RPC_URL);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
      const privateKey = config.getPrivateKey();
      const fromAddress = config.WORKING_ADDRESS;
      const toAddress = '0x1234567890123456789012345678901234567890'; // –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
      
      const nonce = await web3.eth.getTransactionCount(fromAddress);
      const gasPrice = await config.getCurrentGasPrice();
      
      const transaction = {
        from: web3.utils.toChecksumAddress(fromAddress),
        to: web3.utils.toChecksumAddress(toAddress),
        value: web3.utils.toWei('0.001', 'ether'),
        gas: config.GAS_LIMIT,
        gasPrice: web3.utils.toWei(gasPrice.toString(), 'gwei'),
        nonce: nonce,
        chainId: config.CHAIN_ID
      };

      console.log('   üìã –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:');
      console.log(`      From: ${transaction.from}`);
      console.log(`      To: ${transaction.to}`);
      console.log(`      Value: 0.001 DEL`);
      console.log(`      Gas: ${transaction.gas}`);
      console.log(`      Gas Price: ${gasPrice} gwei`);
      console.log(`      Nonce: ${nonce}`);
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
      const signedTx = await web3.eth.accounts.signTransaction(transaction, privateKey);
      console.log('   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   üìù Raw Transaction: ${signedTx.rawTransaction.substring(0, 66)}...`);
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  const tester = new DecimalApiTester();
  
  try {
    await tester.testApiEndpoints();
    await tester.testTransactionSending();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests();
}

module.exports = DecimalApiTester; 