const { checkDatabase } = require('./checkDatabase');
const { checkApi } = require('./checkApi');
const { MongoClient } = require('mongodb');
require('dotenv').config();

// Database configuration
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%25sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  return `mongodb+srv://${username}:${password}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function checkSystem() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã TAPDEL');
  console.log('=' .repeat(50));
  
  const results = {
    database: false,
    api: false,
    collections: [],
    indexes: [],
    settings: false
  };
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('-'.repeat(30));
    
    try {
      await checkDatabase();
      results.database = true;
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK');
    } catch (error) {
      console.log('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û–®–ò–ë–ö–ê');
      console.log('   –î–µ—Ç–∞–ª–∏:', error.message);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–õ–õ–ï–ö–¶–ò–ô –ò –ò–ù–î–ï–ö–°–û–í');
    console.log('-'.repeat(30));
    
    let client = null;
    try {
      client = new MongoClient(MONGODB_URI);
      await client.connect();
      const db = client.db(MONGODB_DB);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
      const collections = await db.listCollections().toArray();
      results.collections = collections.map(c => c.name);
      console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã:', results.collections.join(', '));
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
      for (const collection of collections) {
        const indexes = await db.collection(collection.name).listIndexes().toArray();
        results.indexes.push({
          collection: collection.name,
          count: indexes.length,
          indexes: indexes.map(i => i.name)
        });
        console.log(`   ${collection.name}: ${indexes.length} –∏–Ω–¥–µ–∫—Å–æ–≤`);
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error.message);
    } finally {
      if (client) {
        await client.close();
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö');
    console.log('-'.repeat(30));
    
    try {
      client = new MongoClient(MONGODB_URI);
      await client.connect();
      const db = client.db(MONGODB_DB);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      const adminSettings = await db.collection('adminSettings').findOne({ _id: 'gameSettings' });
      if (adminSettings) {
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: OK');
        console.log(`   –¢–æ–∫–µ–Ω: ${adminSettings.token?.symbol || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        console.log(`   –ë–∞–∑–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: ${adminSettings.gameMechanics?.baseReward || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
      } else {
        console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –ù–ï –ù–ê–ô–î–ï–ù–´');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
      const tokenConfig = await db.collection('system_config').findOne({ key: 'tokens' });
      if (tokenConfig) {
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤: OK');
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ${tokenConfig.value?.length || 0}`);
        const activeToken = tokenConfig.value?.find(t => t.isActive);
        if (activeToken) {
          console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω: ${activeToken.symbol} (${activeToken.name})`);
        }
      } else {
        console.log('‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤: –ù–ï –ù–ê–ô–î–ï–ù–ê');
      }
      
      results.settings = !!(adminSettings && tokenConfig);
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
    } finally {
      if (client) {
        await client.close();
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
    console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê API');
    console.log('-'.repeat(30));
    
    const apiUrl = process.env.API_URL || 'http://localhost:3001';
    console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ –∞–¥—Ä–µ—Å—É: ${apiUrl}`);
    
    try {
      const apiResults = await checkApi(apiUrl);
      const successCount = apiResults.filter(r => r.success).length;
      const totalCount = apiResults.length;
      
      if (successCount === totalCount) {
        console.log('‚úÖ API: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò');
        results.api = true;
      } else {
        console.log(`‚ö†Ô∏è API: ${successCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
        results.api = false;
      }
    } catch (error) {
      console.log('‚ùå API: –°–ï–†–í–ï–† –ù–ï –î–û–°–¢–£–ü–ï–ù');
      console.log('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
      console.log('   –î–µ—Ç–∞–ª–∏:', error.message);
    }
    
    // 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('=' .repeat(50));
    
    console.log(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${results.database ? '‚úÖ OK' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log(`API: ${results.api ? '‚úÖ OK' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${results.settings ? '‚úÖ OK' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log(`–ö–æ–ª–ª–µ–∫—Ü–∏–π: ${results.collections.length}`);
    console.log(`–ò–Ω–¥–µ–∫—Å–æ–≤: ${results.indexes.reduce((sum, i) => sum + i.count, 0)}`);
    
    if (results.database && results.settings) {
      console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
      console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API: npm run check:api');
      console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:3001/admin');
    } else {
      console.log('\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      if (!results.database) {
        console.log('- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
        console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      }
      if (!results.settings) {
        console.log('- –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
      if (!results.api) {
        console.log('- –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É API');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  checkSystem()
    .then(() => {
      console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { checkSystem };
