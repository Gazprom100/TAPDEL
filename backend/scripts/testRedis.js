const redis = require('redis');
const config = require('../config/decimal');

async function testRedisConnection() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  console.log(`üìã REDIS_URL: ${config.REDIS_URL}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Redis
    const redisConfig = config.getRedisConfig();
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis:', JSON.stringify(redisConfig, null, 2));
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Redis
    const client = redis.createClient(redisConfig);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    client.on('connect', () => {
      console.log('‚úÖ Redis: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });
    
    client.on('ready', () => {
      console.log('‚úÖ Redis: –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    });
    
    client.on('error', (err) => {
      console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', err);
    });
    
    client.on('end', () => {
      console.log('üîå Redis: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    });
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å timeout
    console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis...');
    const connectPromise = client.connect();
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Redis connection timeout')), 15000)
    );
    
    await Promise.race([connectPromise, timeoutPromise]);
    console.log('‚úÖ Redis: –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º ping
    console.log('üèì –¢–µ—Å—Ç–∏—Ä—É–µ–º ping...');
    const pong = await client.ping();
    console.log(`‚úÖ Redis ping: ${pong}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ
    console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ...');
    const testKey = 'test_redis_connection';
    const testValue = `test_${Date.now()}`;
    
    await client.set(testKey, testValue);
    console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: ${testKey} = ${testValue}`);
    
    const readValue = await client.get(testKey);
    console.log(`‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${testKey} = ${readValue}`);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
    await client.del(testKey);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: ${testKey}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è DecimalChain –∫–ª—é—á–∏
    console.log('üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º DecimalChain –∫–ª—é—á–∏...');
    const nonceKey = 'DECIMAL_NONCE_test_address';
    await client.set(nonceKey, '123');
    const nonceValue = await client.get(nonceKey);
    console.log(`‚úÖ Nonce —Ç–µ—Å—Ç: ${nonceKey} = ${nonceValue}`);
    
    const blockKey = 'DECIMAL_LAST_BLOCK';
    await client.set(blockKey, '1000');
    const blockValue = await client.get(blockKey);
    console.log(`‚úÖ Block —Ç–µ—Å—Ç: ${blockKey} = ${blockValue}`);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
    await client.del(nonceKey, blockKey);
    console.log('‚úÖ –û—á–∏—â–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await client.quit();
    console.log('‚úÖ Redis —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis:', error);
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      code: error.code,
      stack: error.stack
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
    console.log(`   REDIS_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${!!config.REDIS_URL}`);
    console.log(`   Upstash: ${config.isUpstash()}`);
    console.log(`   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞: ${config.isConfigured()}`);
    
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testRedisConnection()
    .then(success => {
      if (success) {
        console.log('\nüéâ Redis —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\nüí• Redis —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testRedisConnection }; 