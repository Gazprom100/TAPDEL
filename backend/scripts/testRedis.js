const redis = require('redis');
const config = require('../config/decimal');

async function testRedis() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log(`   URL: ${config.REDIS_URL}`);
  console.log(`   Upstash: ${config.isUpstash()}`);
  
  try {
    const redisConfig = config.getRedisConfig();
    console.log('üîó –°–æ–∑–¥–∞–µ–º Redis –∫–ª–∏–µ–Ω—Ç...');
    console.log('   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', JSON.stringify(redisConfig, null, 2));
    
    const client = redis.createClient(redisConfig);
    
    client.on('error', (err) => {
      console.error('‚ùå Redis –æ—à–∏–±–∫–∞:', err);
    });
    
    client.on('connect', () => {
      console.log('üîó Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });
    
    client.on('ready', () => {
      console.log('‚úÖ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    });
    
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
    await client.connect();
    
    console.log('üì° –í—ã–ø–æ–ª–Ω—è–µ–º PING...');
    const pong = await client.ping();
    console.log(`‚úÖ PING –æ—Ç–≤–µ—Ç: ${pong}`);
    
    console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º SET/GET...');
    await client.set('test:key', 'test:value');
    const value = await client.get('test:key');
    console.log(`‚úÖ SET/GET —Ä–∞–±–æ—Ç–∞–µ—Ç: ${value}`);
    
    console.log('üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await client.del('test:key');
    
    console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è...');
    await client.disconnect();
    
    console.log('üéâ –¢–µ—Å—Ç Redis —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis:', error);
    console.error('üìã –î–µ—Ç–∞–ª–∏:', {
      message: error.message,
      code: error.code,
      stack: error.stack
    });
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRedis(); 