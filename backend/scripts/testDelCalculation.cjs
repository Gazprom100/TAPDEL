const { Web3 } = require('web3');

// DecimalChain –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const RPC_URL = process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/';
const WORKING_ADDRESS = process.env.DECIMAL_WORKING_ADDRESS || '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43';

async function testDelCalculation() {
  try {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ß–ï–¢–ê –°–£–ú–ú DEL');
    console.log('==================================\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ DecimalChain
    const web3 = new Web3(RPC_URL);
    console.log(`üåê RPC URL: ${RPC_URL}`);
    console.log(`üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${WORKING_ADDRESS}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const blockNumber = await web3.eth.getBlockNumber();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏: –±–ª–æ–∫ #${blockNumber}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—É–º–º—ã
    const testAmounts = [0.001, 1, 10, 100, 1000];
    
    console.log('\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ß–ï–¢–û–í:');
    console.log('='.repeat(50));
    
    for (const amount of testAmounts) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wei
      const amountWei = web3.utils.toWei(amount.toString(), 'ether');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ DEL
      const amountBack = web3.utils.fromWei(amountWei, 'ether');
      
      console.log(`üí∞ ${amount} DEL:`);
      console.log(`   Wei: ${amountWei}`);
      console.log(`   –û–±—Ä–∞—Ç–Ω–æ: ${amountBack} DEL`);
      console.log(`   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${parseFloat(amountBack) === amount ? '‚úÖ' : '‚ùå'}`);
      console.log('-'.repeat(30));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    console.log('\nüí∞ –ë–ê–õ–ê–ù–° –†–ê–ë–û–ß–ï–ì–û –ö–û–®–ï–õ–¨–ö–ê:');
    const balanceWei = await web3.eth.getBalance(WORKING_ADDRESS);
    const balanceDel = web3.utils.fromWei(balanceWei, 'ether');
    console.log(`   Wei: ${balanceWei}`);
    console.log(`   DEL: ${balanceDel}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const latestBlock = await web3.eth.getBlock(blockNumber, true);
    
    if (latestBlock.transactions) {
      const incomingTxs = latestBlock.transactions.filter(tx => 
        tx.to && tx.to.toLowerCase() === WORKING_ADDRESS.toLowerCase()
      );
      
      if (incomingTxs.length > 0) {
        console.log(`   –ù–∞–π–¥–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫–µ ${blockNumber}: ${incomingTxs.length}`);
        
        for (const tx of incomingTxs.slice(0, 3)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
          const valueDel = web3.utils.fromWei(tx.value, 'ether');
          console.log(`   TX: ${tx.hash.substring(0, 10)}...`);
          console.log(`   –û—Ç: ${tx.from}`);
          console.log(`   –°—É–º–º–∞: ${valueDel} DEL (${tx.value} wei)`);
          console.log('   -'.repeat(20));
        }
      } else {
        console.log(`   –í—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫–µ ${blockNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–ª–æ–∫–æ–≤
    console.log('\nüîç –ü–û–ò–°–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –ü–û–°–õ–ï–î–ù–ò–• –ë–õ–û–ö–ê–•:');
    for (let i = 0; i < 5; i++) {
      const blockNum = blockNumber - i;
      const block = await web3.eth.getBlock(blockNum, true);
      
      if (block.transactions) {
        const incomingTxs = block.transactions.filter(tx => 
          tx.to && tx.to.toLowerCase() === WORKING_ADDRESS.toLowerCase()
        );
        
        if (incomingTxs.length > 0) {
          console.log(`   –ë–ª–æ–∫ ${blockNum}: ${incomingTxs.length} –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          
          for (const tx of incomingTxs) {
            const valueDel = web3.utils.fromWei(tx.value, 'ether');
            console.log(`     ${valueDel} DEL –æ—Ç ${tx.from.substring(0, 10)}...`);
          }
        }
      }
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.error(error.message);
  }
}

testDelCalculation().catch(console.error); 