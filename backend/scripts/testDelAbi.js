require('dotenv').config();
const { Web3 } = require('web3');

async function testDelAbi() {
  try {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ABI –î–õ–Ø –¢–û–ö–ï–ù–ê DEL');
    console.log('====================================\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ DecimalChain
    const web3 = new Web3(process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/');
    const workingAddress = process.env.DECIMAL_WORKING_ADDRESS || '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43';
    
    console.log(`üåê RPC URL: ${process.env.DECIMAL_RPC_URL}`);
    console.log(`üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${workingAddress}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const blockNumber = await web3.eth.getBlockNumber();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏: –±–ª–æ–∫ #${blockNumber}`);
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ DEL —á–µ—Ä–µ–∑ web3.eth.getBalance (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
    console.log('\n1Ô∏è‚É£ –¢–ï–°–¢: web3.eth.getBalance –¥–ª—è DEL');
    console.log('-'.repeat(50));
    
    try {
      const balanceWei = await web3.eth.getBalance(workingAddress);
      const balanceDel = parseFloat(web3.utils.fromWei(balanceWei, 'ether'));
      console.log(`‚úÖ DEL –±–∞–ª–∞–Ω—Å: ${balanceDel} DEL`);
      console.log(`   Wei: ${balanceWei}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ERC-20 ABI –¥–ª—è –Ω—É–ª–µ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
    console.log('\n2Ô∏è‚É£ –¢–ï–°–¢: ERC-20 ABI –¥–ª—è –Ω—É–ª–µ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (–¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –æ—à–∏–±–∫—É)');
    console.log('-'.repeat(50));
    
    try {
      const zeroAddress = '0x0000000000000000000000000000000000000000';
      const tokenContract = new web3.eth.Contract([
        {
          "constant": true,
          "inputs": [{"name": "_owner", "type": "address"}],
          "name": "balanceOf",
          "outputs": [{"name": "balance", "type": "uint256"}],
          "type": "function"
        }
      ], zeroAddress);
      
      const balanceWei = await tokenContract.methods.balanceOf(workingAddress).call();
      const balanceDel = parseFloat(web3.utils.fromWei(balanceWei, 'ether'));
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª–∏: ${balanceDel} DEL`);
    } catch (error) {
      console.log(`‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    console.log('\n3Ô∏è‚É£ –¢–ï–°–¢: –î—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã (–¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å)');
    console.log('-'.repeat(50));
    
    const tokens = [
      { symbol: 'BOOST', address: '0x15cefa2ffb0759b519c15e23025a718978be9322' },
      { symbol: 'MAKAROVSKY', address: '0x4847183b5dc733e145ffeff663a49fa4ef9173ca' },
      { symbol: 'SBT', address: '0xec2991de234a010fc5b58842d594fe9ae08d7304' }
    ];
    
    for (const token of tokens) {
      try {
        const tokenContract = new web3.eth.Contract([
          {
            "constant": true,
            "inputs": [{"name": "_owner", "type": "address"}],
            "name": "balanceOf",
            "outputs": [{"name": "balance", "type": "uint256"}],
            "type": "function"
          }
        ], token.address);
        
        const balanceWei = await tokenContract.methods.balanceOf(workingAddress).call();
        const balance = parseFloat(web3.utils.fromWei(balanceWei, 'ether'));
        console.log(`‚úÖ ${token.symbol}: ${balance} ${token.symbol}`);
      } catch (error) {
        console.log(`‚ùå ${token.symbol}: ${error.message}`);
      }
    }
    
    console.log('\nÔøΩÔøΩ –ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–î–ú–ò–ù–ü–ê–ù–ï–õ–ò:');
    console.log('=====================================');
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const delBalanceWei = await web3.eth.getBalance(workingAddress);
    const delBalance = parseFloat(web3.utils.fromWei(delBalanceWei, 'ether'));
    
    console.log(`‚úÖ DEL: ${delBalance} DEL (–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω)`);
    console.log(`‚úÖ BOOST: 999997900 BOOST (ERC-20 —Ç–æ–∫–µ–Ω)`);
    console.log(`‚úÖ MAKAROVSKY: 0 MAKAROVSKY (ERC-20 —Ç–æ–∫–µ–Ω)`);
    console.log(`‚úÖ BTT: 0 BTT (ERC-20 —Ç–æ–∫–µ–Ω)`);
    console.log(`‚úÖ SBT: 0 SBT (ERC-20 —Ç–æ–∫–µ–Ω)`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testDelAbi();
