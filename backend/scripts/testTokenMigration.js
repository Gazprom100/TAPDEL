const { connectToDatabase } = require('../config/database');
const tokenService = require('../services/tokenService');
const tokenBalanceService = require('../services/tokenBalanceService');

async function testTokenMigration() {
  try {
    console.log('üß™ –¢–ï–°–¢ –ú–ò–ì–†–ê–¶–ò–ò –¢–û–ö–ï–ù–û–í');
    console.log('==========================');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await connectToDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
    const activeToken = await tokenService.getActiveToken();
    console.log(`ü™ô –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω: ${activeToken.symbol}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await database.collection('users').find({}).limit(5).toArray();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
    for (const user of users) {
      const currentBalance = user.gameState?.tokens || 0;
      console.log(`   ${user.userId}: ${currentBalance} ${activeToken.symbol}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
    const allTokens = await tokenService.getAllTokens();
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:');
    allTokens.forEach(token => {
      console.log(`   ${token.symbol}: ${token.isActive ? '–ê–ö–¢–ò–í–ï–ù' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–∫–µ–Ω—ã)
    const inactiveTokens = allTokens.filter(t => !t.isActive);
    if (inactiveTokens.length > 0) {
      const testToken = inactiveTokens[0];
      console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ ${testToken.symbol}...`);
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const success = await tokenService.activateToken(testToken.symbol);
      
      if (success) {
        console.log(`‚úÖ –¢–æ–∫–µ–Ω ${testToken.symbol} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        const newActiveToken = await tokenService.getActiveToken();
        console.log(`ü™ô –ù–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω: ${newActiveToken.symbol}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        for (const user of users) {
          const updatedUser = await database.collection('users').findOne({ userId: user.userId });
          const newBalance = updatedUser.gameState?.tokens || 0;
          console.log(`   ${user.userId}: ${newBalance} ${newActiveToken.symbol}`);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
        console.log(`\nüîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω ${activeToken.symbol}...`);
        await tokenService.activateToken(activeToken.symbol);
        console.log(`‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ ${testToken.symbol}`);
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testTokenMigration(); 