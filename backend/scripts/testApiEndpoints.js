const fetch = require('node-fetch');

async function testApiEndpoints() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–û–í');
  console.log('=====================================');
  
  const baseUrl = 'https://tapdel.onrender.com/api/decimal';
  const testUserId = 'telegram-297810833';
  
  try {
    // 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞...');
    const depositResponse = await fetch(`${baseUrl}/deposits`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: testUserId,
        baseAmount: 1000
      })
    });
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${depositResponse.status}`);
    
    if (depositResponse.ok) {
      const deposit = await depositResponse.json();
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:');
      console.log(`   ID: ${deposit.depositId}`);
      console.log(`   –°—É–º–º–∞: ${deposit.amountRequested} DEL`);
      console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${deposit.uniqueAmount} DEL`);
      console.log(`   –ê–¥—Ä–µ—Å: ${deposit.address}`);
      console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${deposit.expires}`);
    } else {
      const error = await depositResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    }
    
    // 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞...');
    const withdrawalResponse = await fetch(`${baseUrl}/withdrawals`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: testUserId,
        toAddress: '0xd6187dD54DF3002D5C82043b81EdE74187A5A647',
        amount: 100
      })
    });
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${withdrawalResponse.status}`);
    
    if (withdrawalResponse.ok) {
      const withdrawal = await withdrawalResponse.json();
      console.log('‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:');
      console.log(`   ID: ${withdrawal.withdrawalId}`);
      console.log(`   –°—É–º–º–∞: ${withdrawal.amount} DEL`);
      console.log(`   –ê–¥—Ä–µ—Å: ${withdrawal.toAddress}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
    } else {
      const error = await withdrawalResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    }
    
    // 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const depositsResponse = await fetch(`${baseUrl}/deposits?userId=${testUserId}`);
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${depositsResponse.status}`);
    
    if (depositsResponse.ok) {
      const deposits = await depositsResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
      deposits.forEach((deposit, index) => {
        console.log(`   ${index + 1}. ${deposit.amountRequested} DEL - ${deposit.status}`);
      });
    } else {
      const error = await depositsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    }
    
    // 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const withdrawalsResponse = await fetch(`${baseUrl}/withdrawals?userId=${testUserId}`);
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${withdrawalsResponse.status}`);
    
    if (withdrawalsResponse.ok) {
      const withdrawals = await withdrawalsResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawals.length}`);
      withdrawals.forEach((withdrawal, index) => {
        console.log(`   ${index + 1}. ${withdrawal.amount} DEL - ${withdrawal.status}`);
      });
    } else {
      const error = await withdrawalsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤:', error);
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testApiEndpoints(); 