const { connectToDatabase } = require('../config/database');
const tokenService = require('../services/tokenService');
const tokenBalanceService = require('../services/tokenBalanceService');

async function testCompleteTokenSystem() {
  try {
    console.log('üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –°–ú–ï–ù–´ –¢–û–ö–ï–ù–û–í');
    console.log('=====================================');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await connectToDatabase();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\n1Ô∏è‚É£ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´');
    const currentToken = await tokenService.getActiveToken();
    console.log(`ü™ô –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω: ${currentToken.symbol}`);
    
    const allTokens = await tokenService.getAllTokens();
    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${allTokens.length}`);
    allTokens.forEach(token => {
      console.log(`   ${token.symbol}: ${token.isActive ? '–ê–ö–¢–ò–í–ï–ù' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –±–∞–ª–∞–Ω—Å—ã
    console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    const users = await database.collection('users').find({}).limit(3).toArray();
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    for (const user of users) {
      const balance = user.gameState?.tokens || 0;
      console.log(`   ${user.userId}: ${balance} ${currentToken.symbol}`);
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    console.log('\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API');
    const { default: fetch } = await import('node-fetch');
    
    try {
      const response = await fetch('http://localhost:3001/api/active-token');
      const data = await response.json();
      
      if (data.success && data.token) {
        console.log(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data.token.symbol}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${data.token.name}`);
        console.log(`   –ê–¥—Ä–µ—Å: ${data.token.address}`);
      } else {
        console.log(`‚ùå API –æ—à–∏–±–∫–∞: ${JSON.stringify(data)}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
      return;
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
    console.log('\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ú–ï–ù–´ –¢–û–ö–ï–ù–ê');
    const inactiveTokens = allTokens.filter(t => !t.isActive);
    
    if (inactiveTokens.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥—Ä—É–≥–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã');
      return;
    }
    
    const testToken = inactiveTokens[0];
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–æ–∫–µ–Ω: ${testToken.symbol}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ —Å–º–µ–Ω—ã
    const balancesBefore = {};
    for (const user of users) {
      balancesBefore[user.userId] = user.gameState?.tokens || 0;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–º–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
    const changeSuccess = await tokenService.activateToken(testToken.symbol);
    
    if (!changeSuccess) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞');
      return;
    }
    
    console.log(`‚úÖ –¢–æ–∫–µ–Ω ${testToken.symbol} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–º–µ–Ω—ã
    console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ú–ï–ù–´');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    const newApiResponse = await fetch('http://localhost:3001/api/active-token');
    const newApiData = await newApiResponse.json();
    
    if (newApiData.success && newApiData.token.symbol === testToken.symbol) {
      console.log(`‚úÖ API –æ–±–Ω–æ–≤–ª–µ–Ω: ${newApiData.token.symbol}`);
    } else {
      console.log(`‚ùå API –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è: ${JSON.stringify(newApiData)}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    console.log('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã:');
    for (const user of users) {
      const updatedUser = await database.collection('users').findOne({ userId: user.userId });
      const newBalance = updatedUser.gameState?.tokens || 0;
      const oldBalance = balancesBefore[user.userId];
      
      console.log(`   ${user.userId}:`);
      console.log(`     –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å (${currentToken.symbol}): ${oldBalance}`);
      console.log(`     –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (${testToken.symbol}): ${newBalance}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω
      const savedBalance = await tokenBalanceService.getUserTokenBalance(user.userId, currentToken.symbol);
      if (savedBalance && savedBalance.balance === oldBalance) {
        console.log(`     ‚úÖ –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ`);
      } else {
        console.log(`     ‚ùå –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
      }
    }
    
    // 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
    console.log('\n6Ô∏è‚É£ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–°–•–û–î–ù–û–ì–û –¢–û–ö–ï–ù–ê');
    console.log(`üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω: ${currentToken.symbol}`);
    
    await tokenService.activateToken(currentToken.symbol);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    const restoredApiResponse = await fetch('http://localhost:3001/api/active-token');
    const restoredApiData = await restoredApiResponse.json();
    
    if (restoredApiData.success && restoredApiData.token.symbol === currentToken.symbol) {
      console.log(`‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${restoredApiData.token.symbol}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${JSON.stringify(restoredApiData)}`);
    }
    
    // 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n7Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('==================');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –†–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–æ–∫–µ–Ω–æ–≤: –†–∞–±–æ—Ç–∞–µ—Ç');  
    console.log('‚úÖ API –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: –†–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: –†–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏: –†–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: –†–∞–±–æ—Ç–∞–µ—Ç');
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('\nüìã –°–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞:');
    console.log('   ‚Ä¢ –ü—Ä–∏ —Å–º–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è');
    console.log('   ‚Ä¢ –°—Ç–∞—Ä—ã–µ –±–∞–ª–∞–Ω—Å—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   ‚Ä¢ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω');
    console.log('   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ–¥–µ—Ç—Å—è');
    console.log('   ‚Ä¢ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testCompleteTokenSystem(); 