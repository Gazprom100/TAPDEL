const databaseConfig = require('../config/database');
const decimalService = require('../services/decimalService');
const config = require('../config/decimal');

async function forceProcessWithdrawal() {
  try {
    console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–´–í–û–î–ê');
    console.log('=====================================');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await databaseConfig.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // ID –≤—ã–≤–æ–¥–∞ –∏–∑ —Ç–µ—Å—Ç–∞
    const withdrawalId = '6880d897ae0da04f638fdc1c';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const withdrawal = await database.collection('withdrawals').findOne({
      _id: new (require('mongodb').ObjectId)(withdrawalId)
    });
    
    if (!withdrawal) {
      console.log('‚ùå –í—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–≤–æ–¥–µ:');
    console.log(`   ID: ${withdrawal._id}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.userId}`);
    console.log(`   –°—É–º–º–∞: ${withdrawal.amount} DEL`);
    console.log(`   –ê–¥—Ä–µ—Å: ${withdrawal.toAddress}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
    console.log(`   TX Hash: ${withdrawal.txHash || '–ù–µ—Ç'}`);
    
    if (withdrawal.status === 'sent') {
      console.log('‚úÖ –í—ã–≤–æ–¥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      console.log(`üîó TX Hash: ${withdrawal.txHash}`);
      return;
    }
    
    if (withdrawal.status === 'failed') {
      console.log('‚ùå –í—ã–≤–æ–¥ —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ failed');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞...');
    const workingBalance = await decimalService.getWorkingBalance();
    console.log(`   –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${workingBalance} DEL`);
    
    if (workingBalance < withdrawal.amount) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ—à–µ–ª—å–∫–µ!');
      console.log(`   –ù—É–∂–Ω–æ: ${withdrawal.amount} DEL`);
      console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${workingBalance} DEL`);
      return;
    }
    
    console.log('‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
    console.log('\nüîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞...');
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalService –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!decimalService.web3) {
        await decimalService.initialize();
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const txHash = await decimalService.signAndSend(withdrawal.toAddress, withdrawal.amount);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await database.collection('withdrawals').updateOne(
        { _id: withdrawal._id },
        {
          $set: {
            txHash: txHash,
            status: 'sent',
            processedAt: new Date()
          },
          $unset: { processingStartedAt: 1 }
        }
      );
      
      console.log('‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
      console.log(`üìÑ TX Hash: ${txHash}`);
      console.log(`üí∏ –°—É–º–º–∞: ${withdrawal.amount} DEL`);
      console.log(`üìç –ê–¥—Ä–µ—Å: ${withdrawal.toAddress}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞:', error);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      await database.collection('withdrawals').updateOne(
        { _id: withdrawal._id },
        {
          $set: {
            status: 'failed',
            error: error.message,
            processedAt: new Date()
          },
          $unset: { processingStartedAt: 1 }
        }
      );
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await database.collection('users').updateOne(
        { userId: withdrawal.userId },
        { $inc: { "gameState.tokens": withdrawal.amount } }
      );
      
      console.log(`üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawal.userId}: +${withdrawal.amount} DEL`);
    }
    
    console.log('\n‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
  }
}

forceProcessWithdrawal(); 