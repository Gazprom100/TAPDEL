const { MongoClient } = require('mongodb');
const { Web3 } = require('web3');
require('dotenv').config({ path: './.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0',
  DECIMAL_RPC_URL: process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/',
  WORKING_ADDRESS: process.env.DECIMAL_WORKING_ADDRESS
};

class ForceTransactionProcessor {
  constructor() {
    this.db = null;
    this.web3 = null;
    this.results = {
      timestamp: new Date(),
      processed: [],
      errors: []
    };
  }

  async initialize() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
      const client = new MongoClient(config.MONGODB_URI);
      await client.connect();
      this.db = client.db('tapdel');
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain
      this.web3 = new Web3(config.DECIMAL_RPC_URL);
      const blockNumber = await this.web3.eth.getBlockNumber();
      console.log(`‚úÖ DecimalChain –ø–æ–¥–∫–ª—é—á–µ–Ω, –±–ª–æ–∫: ${blockNumber}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async processUnmatchedDeposits() {
    console.log('\nüí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
      const unmatchedDeposits = await this.db.collection('deposits').find({
        matched: false,
        expiresAt: { $gt: new Date() }
      }).toArray();

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${unmatchedDeposits.length} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);

      for (const deposit of unmatchedDeposits) {
        try {
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç ${deposit._id}: ${deposit.uniqueAmount} DEL`);
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          const currentBlock = await this.web3.eth.getBlockNumber();
          const startBlock = Math.max(0, Number(currentBlock) - 1000); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –±–ª–æ–∫–æ–≤
          
          let found = false;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
          for (let blockNum = Number(currentBlock); blockNum >= startBlock; blockNum--) {
            try {
              const block = await this.web3.eth.getBlock(blockNum, true);
              
              if (!block.transactions) continue;

              for (const tx of block.transactions) {
                if (tx.to && tx.to.toLowerCase() === config.WORKING_ADDRESS.toLowerCase()) {
                  const value = parseFloat(this.web3.utils.fromWei(tx.value, 'ether'));
                  
                  // –û–∫—Ä—É–≥–ª—è–µ–º value –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                  const roundedValue = Math.round(value * 10000) / 10000;
                  const depositValue = Math.round(deposit.uniqueAmount * 10000) / 10000;
                  const EPSILON = 0.00005;
                  
                  if (Math.abs(roundedValue - depositValue) <= EPSILON) {
                    console.log(`üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ ${deposit._id}: ${tx.hash}`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
                    await this.db.collection('deposits').updateOne(
                      { _id: deposit._id },
                      {
                        $set: {
                          txHash: tx.hash,
                          matched: true,
                          confirmations: 1,
                          matchedAt: new Date()
                        }
                      }
                    );

                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const user = await this.db.collection('users').findOne({ userId: deposit.userId });
                    if (user) {
                      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                      const currentTokens = user.gameState?.tokens || 0;
                      const newTokens = currentTokens + deposit.amountRequested;
                      
                      await this.db.collection('users').updateOne(
                        { userId: deposit.userId },
                        {
                          $set: {
                            "gameState.tokens": newTokens,
                            "gameState.lastSaved": new Date(),
                            updatedAt: new Date()
                          }
                        }
                      );

                      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${deposit.userId} ${currentTokens} ‚Üí ${newTokens} DEL`);
                      
                      this.results.processed.push({
                        type: 'deposit_matched',
                        depositId: deposit._id.toString(),
                        userId: deposit.userId,
                        amount: deposit.amountRequested,
                        txHash: tx.hash
                      });
                    }
                    
                    found = true;
                    break;
                  }
                }
              }
              
              if (found) break;
              
            } catch (error) {
              console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∞ ${blockNum}:`, error.message);
              continue;
            }
          }
          
          if (!found) {
            console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ ${deposit._id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ ${deposit._id}:`, error);
          this.results.errors.push({
            type: 'deposit_processing',
            depositId: deposit._id.toString(),
            error: error.message
          });
        }
      }

      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      this.results.errors.push({
        type: 'deposits_processing',
        error: error.message
      });
    }
  }

  async processQueuedWithdrawals() {
    console.log('\nüí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏...');
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–≤–æ–¥—ã –≤ –æ—á–µ—Ä–µ–¥–∏
      const queuedWithdrawals = await this.db.collection('withdrawals').find({
        status: 'queued'
      }).toArray();

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${queuedWithdrawals.length} –≤—ã–≤–æ–¥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`);

      for (const withdrawal of queuedWithdrawals) {
        try {
          console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ ${withdrawal._id}: ${withdrawal.amount} DEL`);
          
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            { $set: { status: 'processing', processingStartedAt: new Date() } }
          );

          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          // –ù–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
          const amount = parseFloat(withdrawal.amount);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await this.db.collection('users').updateOne(
            { userId: withdrawal.userId },
            { $inc: { "gameState.tokens": amount } }
          );

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            {
              $set: {
                status: 'failed',
                error: 'Manual processing required - Redis unavailable',
                processedAt: new Date()
              },
              $unset: { processingStartedAt: 1 }
            }
          );

          console.log(`üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawal.userId}: +${amount} DEL`);
          
          this.results.processed.push({
            type: 'withdrawal_refunded',
            withdrawalId: withdrawal._id.toString(),
            userId: withdrawal.userId,
            amount: amount
          });
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ ${withdrawal._id}:`, error);
          this.results.errors.push({
            type: 'withdrawal_processing',
            withdrawalId: withdrawal._id.toString(),
            error: error.message
          });
        }
      }

      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
      this.results.errors.push({
        type: 'withdrawals_processing',
        error: error.message
      });
    }
  }

  async updateConfirmations() {
    console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π...');
    
    try {
      const currentBlock = await this.web3.eth.getBlockNumber();
      const currentBlockNum = Number(currentBlock);

      // –ù–∞—Ö–æ–¥–∏–º –¥–µ–ø–æ–∑–∏—Ç—ã –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const pendingDeposits = await this.db.collection('deposits').find({
        matched: true,
        confirmations: { $lt: 6 }
      }).toArray();

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${pendingDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`);

      for (const deposit of pendingDeposits) {
        try {
          if (deposit.txHash) {
            const receipt = await this.web3.eth.getTransactionReceipt(deposit.txHash);
            if (receipt) {
              const confirmations = currentBlockNum - Number(receipt.blockNumber) + 1;
              
              await this.db.collection('deposits').updateOne(
                { _id: deposit._id },
                { $set: { confirmations: Math.max(0, confirmations) } }
              );

              console.log(`üìã –î–µ–ø–æ–∑–∏—Ç ${deposit._id}: ${confirmations} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π`);
            }
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è ${deposit._id}:`, error.message);
        }
      }

      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π:', error);
      this.results.errors.push({
        type: 'confirmations_update',
        error: error.message
      });
    }
  }

  async generateSummary() {
    console.log('\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏...');
    
    const summary = {
      totalProcessed: this.results.processed.length,
      totalErrors: this.results.errors.length,
      processedTypes: {},
      errorTypes: {}
    };

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    for (const item of this.results.processed) {
      summary.processedTypes[item.type] = (summary.processedTypes[item.type] || 0) + 1;
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
    for (const error of this.results.errors) {
      summary.errorTypes[error.type] = (summary.errorTypes[error.type] || 0) + 1;
    }

    this.results.summary = summary;
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async runForceProcessing() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...\n');
    
    try {
      await this.initialize();
      
      await this.processUnmatchedDeposits();
      await this.processQueuedWithdrawals();
      await this.updateConfirmations();
      
      await this.generateSummary();
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
      console.log(JSON.stringify(this.results, null, 2));
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const processingCollection = this.db.collection('force_processing');
      await processingCollection.insertOne({
        ...this.results,
        createdAt: new Date()
      });
      
      console.log('\n‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    } finally {
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
const processor = new ForceTransactionProcessor();
processor.runForceProcessing(); 