const { MongoClient } = require('mongodb');
const tokenService = require('../services/tokenService');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MongoDB
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function connectToDatabase() {
  const client = new MongoClient(MONGODB_URI);
  await client.connect();
  return client.db(MONGODB_DB);
}

async function debugRankingAndTransactions() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏...\n');
  
  try {
    const database = await connectToDatabase();
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:');
    const activeToken = await tokenService.getActiveToken();
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω: ${activeToken.symbol} (${activeToken.address})`);
    console.log(`   Decimals: ${activeToken.decimals}`);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${activeToken.name}\n`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('2Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const userCount = await database.collection('users').countDocuments();
    const usersWithTokens = await database.collection('users').countDocuments({
      'gameState.tokens': { $gt: 0 }
    });
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏: ${usersWithTokens}\n`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:');
    const leaderboardCount = await database.collection('leaderboard').countDocuments();
    const topUsers = await database.collection('leaderboard')
      .find({})
      .sort({ tokens: -1 })
      .limit(10)
      .toArray();
    
    console.log(`   –ó–∞–ø–∏—Å–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${leaderboardCount}`);
    console.log('   –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    topUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.username || user.userId} - ${user.tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
    });
    console.log('');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
    const depositsCount = await database.collection('deposits').countDocuments();
    const withdrawalsCount = await database.collection('withdrawals').countDocuments();
    const pendingDeposits = await database.collection('deposits').countDocuments({ matched: false });
    const pendingWithdrawals = await database.collection('withdrawals').countDocuments({ status: 'queued' });
    
    console.log(`   –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${depositsCount}`);
    console.log(`   –û–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${pendingDeposits}`);
    console.log(`   –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawalsCount}`);
    console.log(`   –û–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤: ${pendingWithdrawals}\n`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:');
    
    // –¢–µ—Å—Ç MongoDB
    try {
      await database.admin().ping();
      console.log('   ‚úÖ MongoDB: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
    } catch (error) {
      console.log('   ‚ùå MongoDB: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç Redis (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try {
      const redis = require('../services/upstashRedisService');
      const pong = await redis.ping();
      console.log(`   ‚úÖ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (${pong})`);
    } catch (error) {
      console.log('   ‚ö†Ô∏è Redis: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)');
    }
    
    console.log('');
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:');
    try {
      const indexes = await database.collection('leaderboard').indexes();
      console.log('   –ò–Ω–¥–µ–∫—Å—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:');
      indexes.forEach(index => {
        console.log(`   - ${index.name}: ${JSON.stringify(index.key)}`);
      });
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤');
    }
    
    console.log('');
    
    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    console.log('7Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:');
    console.log('   (–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π)');
    
    // 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n8Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    
    if (pendingDeposits > 0) {
      console.log('   ‚ö†Ô∏è –ï—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤');
    }
    
    if (pendingWithdrawals > 0) {
      console.log('   ‚ö†Ô∏è –ï—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ withdrawal worker');
    }
    
    if (leaderboardCount === 0) {
      console.log('   ‚ö†Ô∏è –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–∞–Ω–≥–æ–≤');
    }
    
    if (usersWithTokens === 0) {
      console.log('   ‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É');
    }
    
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
debugRankingAndTransactions(); 