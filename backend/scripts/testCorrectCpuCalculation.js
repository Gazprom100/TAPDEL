const os = require('os');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function testCorrectCpuCalculation() {
  try {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –†–ê–°–ß–ï–¢–ê CPU');
    console.log('========================================\n');
    
    console.log(`üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}`);
    console.log(`üíª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU: ${os.cpus().length}`);
    console.log(`üîÑ Load Average: ${os.loadavg().join(', ')}\n`);
    
    // –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
    const oldCpuUsage = os.loadavg()[0] * 100;
    console.log(`‚ùå –°–¢–ê–†–´–ô –ú–ï–¢–û–î (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π):`);
    console.log(`   os.loadavg()[0] * 100 = ${os.loadavg()[0]} * 100 = ${oldCpuUsage.toFixed(2)}%`);
    console.log(`   ‚ö†Ô∏è –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –≤—Å–µ —è–¥—Ä–∞, –∞ –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!`);
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
    console.log(`\n‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π):`);
    
    let cpuUsage = 0;
    try {
      if (process.platform === 'darwin') {
        console.log(`   üçé macOS - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É 'top'`);
        const { stdout } = await execAsync('top -l 1 | grep "CPU usage" | awk \'{print $3}\' | sed \'s/%//\'');
        cpuUsage = parseFloat(stdout.trim());
        console.log(`   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: ${stdout.trim()}`);
        console.log(`   ‚úÖ CPU Usage: ${cpuUsage}%`);
      } else if (process.platform === 'linux') {
        console.log(`   üêß Linux - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É 'top'`);
        const { stdout } = await execAsync('top -bn1 | grep "Cpu(s)" | awk \'{print $2}\' | sed \'s/%us,//\'');
        cpuUsage = parseFloat(stdout.trim());
        console.log(`   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: ${stdout.trim()}`);
        console.log(`   ‚úÖ CPU Usage: ${cpuUsage}%`);
      } else {
        console.log(`   üîß –î—Ä—É–≥–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
        const loadAvg = os.loadavg()[0];
        const cpuCount = os.cpus().length;
        cpuUsage = (loadAvg / cpuCount) * 100;
        console.log(`   üìã Load Average / CPU Count * 100 = ${loadAvg} / ${cpuCount} * 100`);
        console.log(`   ‚úÖ CPU Usage: ${cpuUsage.toFixed(2)}%`);
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ CPU: ${error.message}`);
      console.log(`   üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥`);
      const loadAvg = os.loadavg()[0];
      const cpuCount = os.cpus().length;
      cpuUsage = (loadAvg / cpuCount) * 100;
      console.log(`   üìã Load Average / CPU Count * 100 = ${loadAvg} / ${cpuCount} * 100`);
      console.log(`   ‚úÖ CPU Usage: ${cpuUsage.toFixed(2)}%`);
    }
    
    console.log(`\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–í:`);
    console.log(`   ‚ùå –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥: ${oldCpuUsage.toFixed(2)}%`);
    console.log(`   ‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: ${cpuUsage.toFixed(2)}%`);
    console.log(`   üìà –†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(oldCpuUsage - cpuUsage).toFixed(2)}%`);
    
    console.log(`\nüîç –û–ë–™–Ø–°–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:`);
    console.log(`   ‚Ä¢ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥: os.loadavg()[0] * 100`);
    console.log(`   ‚Ä¢ Load Average –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É`);
    console.log(`   ‚Ä¢ –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 100 –¥–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º`);
    console.log(`   ‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: 4 —è–¥—Ä–∞, –Ω–∞–≥—Ä—É–∑–∫–∞ 2.0 = 200% (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)`);
    console.log(`   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: 2.0 / 4 * 100 = 50% (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)`);
    
    console.log(`\nüìã –î–ê–ù–ù–´–ï –î–õ–Ø –ê–î–ú–ò–ù–ü–ê–ù–ï–õ–ò:`);
    console.log(JSON.stringify({
      cpu: Math.min(cpuUsage, 100),
      memory: ((os.totalmem() - os.freemem()) / os.totalmem() * 100).toFixed(2),
      platform: process.platform,
      cpuCount: os.cpus().length,
      loadAverage: os.loadavg(),
      oldMethod: oldCpuUsage.toFixed(2),
      newMethod: cpuUsage.toFixed(2)
    }, null, 2));
    
    console.log(`\n‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!`);
    console.log(`   –¢–µ–ø–µ—Ä—å CPU –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∞ –Ω–µ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –≤—Å–µ —è–¥—Ä–∞.`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testCorrectCpuCalculation(); 