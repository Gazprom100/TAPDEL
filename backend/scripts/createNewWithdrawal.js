const fetch = require('node-fetch');

async function createNewWithdrawal() {
  console.log('üÜï –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –í–´–í–û–î–ê 2222 DEL');
  console.log('====================================');
  
  const userId = 'telegram-297810833';
  const toAddress = '0xd6187dD54DF3002D5C82043b81EdE74187A5A647';
  const amount = 2222;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const balanceResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${userId}/balance`);
    
    if (balanceResponse.ok) {
      const balance = await balanceResponse.json();
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        userId: balance.userId,
        gameBalance: balance.gameBalance,
        workingWalletBalance: balance.workingWalletBalance
      });
      
      if (balance.gameBalance < amount) {
        console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${balance.gameBalance} < ${amount}`);
        return false;
      }
      
      console.log(`‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${balance.gameBalance} >= ${amount}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã–≤–æ–¥
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ 2222 DEL');
    const withdrawalResponse = await fetch('https://tapdel.onrender.com/api/decimal/withdrawals', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: userId,
        toAddress: toAddress,
        amount: amount
      })
    });
    
    if (withdrawalResponse.ok) {
      const withdrawal = await withdrawalResponse.json();
      console.log('‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', {
        withdrawalId: withdrawal.withdrawalId,
        status: withdrawal.status,
        amount: withdrawal.amount,
        toAddress: withdrawal.toAddress
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
      console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞');
      const newBalanceResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${userId}/balance`);
      
      if (newBalanceResponse.ok) {
        const newBalance = await newBalanceResponse.json();
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:', {
          userId: newBalance.userId,
          gameBalance: newBalance.gameBalance,
          workingWalletBalance: newBalance.workingWalletBalance
        });
        
        const balanceReduction = balance.gameBalance - newBalance.gameBalance;
        console.log(`üí∞ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: ${balanceReduction} DEL`);
      }
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      console.log('\n4Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (10 —Å–µ–∫—É–Ω–¥)...');
      await new Promise(resolve => setTimeout(resolve, 10000));
      
      const statusResponse = await fetch(`https://tapdel.onrender.com/api/decimal/withdrawals/${withdrawal.withdrawalId}`);
      
      if (statusResponse.ok) {
        const status = await statusResponse.json();
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞:', {
          withdrawalId: status.withdrawalId,
          status: status.status,
          txHash: status.txHash,
          processedAt: status.processedAt
        });
        
        if (status.status === 'sent' && status.txHash) {
          console.log('üéâ –í–´–í–û–î –û–¢–ü–†–ê–í–õ–ï–ù –í –ë–õ–û–ö–ß–ï–ô–ù!');
          console.log(`üîó TX Hash: ${status.txHash}`);
          console.log(`üìä –°—É–º–º–∞: ${status.amount} DEL`);
          console.log(`üìç –ê–¥—Ä–µ—Å: ${status.toAddress}`);
        } else if (status.status === 'processing') {
          console.log('‚è≥ –í—ã–≤–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...');
          console.log('üí° –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω');
        } else {
          console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status.status}`);
        }
      }
      
      return true;
      
    } else {
      const error = await withdrawalResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createNewWithdrawal()
    .then(success => {
      if (success) {
        console.log('\nüéâ –ù–û–í–´–ô –í–´–í–û–î –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!');
        console.log('‚úÖ 2222 DEL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É');
        process.exit(0);
      } else {
        console.log('\nüí• –°–û–ó–î–ê–ù–ò–ï –í–´–í–û–î–ê –ü–†–û–í–ê–õ–ò–õ–û–°–¨!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { createNewWithdrawal }; 