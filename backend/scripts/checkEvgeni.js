const { MongoClient } = require('mongodb');

function generateCleanMongoURI() {
  const uri = process.env.MONGODB_URI;
  if (!uri) {
    throw new Error('MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  return uri;
}

const MONGODB_URI = generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function checkEvgeni() {
  let client;
  
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø EVGENI_KRASNOV\n');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(MONGODB_DB);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.collection('users').findOne({
      'profile.telegramUsername': 'Evgeni_Krasnov'
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Evgeni_Krasnov –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!');
    console.log(`userId: ${user.userId}`);
    console.log(`telegramUsername: ${user.profile?.telegramUsername}`);
    console.log(`username: ${user.profile?.username}`);
    console.log('');
    
    console.log('üí∞ –ë–ê–õ–ê–ù–°–´:');
    console.log(`tokens: ${user.gameState?.tokens || 0}`);
    console.log(`gameBalance: ${user.gameBalance || 0}`);
    console.log(`highScore: ${user.gameState?.highScore || 0}`);
    console.log('');
    
    console.log('üí≥ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const transactions = user.transactions || [];
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${transactions.length}`);
    if (transactions.length > 0) {
      transactions.forEach((tx, i) => {
        console.log(`  ${i+1}. ${tx.type}: ${tx.amount} DEL (${new Date(tx.timestamp).toLocaleString()})`);
      });
    }
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    console.log('üèÜ –õ–ò–î–ï–†–ë–û–†–î:');
    const leaderboardEntry = await db.collection('leaderboard').findOne({ userId: user.userId });
    if (leaderboardEntry) {
      console.log(`rank: ${leaderboardEntry.rank}`);
      console.log(`tokens (rating): ${leaderboardEntry.tokens}`);
      console.log(`username: ${leaderboardEntry.username}`);
      console.log(`updatedAt: ${leaderboardEntry.updatedAt}`);
    } else {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ');
    }
    console.log('');
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
    console.log('üî¨ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
    const tokens = user.gameState?.tokens || 0;
    const highScore = user.gameState?.highScore || 0;
    const leaderboardScore = leaderboardEntry?.tokens || 0;
    
    console.log(`tokens (–∏–≥—Ä–æ–≤—ã–µ): ${tokens}`);
    console.log(`highScore (—Ä–µ–π—Ç–∏–Ω–≥): ${highScore}`);
    console.log(`leaderboard.tokens: ${leaderboardScore}`);
    
    if (Math.abs(highScore - leaderboardScore) > 0.001) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: highScore –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥—É');
      console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(highScore - leaderboardScore)}`);
    } else {
      console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–ª—Å—è
    console.log('');
    console.log('‚è∞ –í–†–ï–ú–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø:');
    console.log(`gameState.lastSaved: ${user.gameState?.lastSaved}`);
    if (leaderboardEntry) {
      console.log(`leaderboard.updatedAt: ${leaderboardEntry.updatedAt}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

checkEvgeni(); 