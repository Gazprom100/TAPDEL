const { MongoClient } = require('mongodb');

async function createTestUser() {
  console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('================================');
  
  const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/tapdel';
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    const client = new MongoClient(MONGODB_URI);
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    const database = client.db();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUserId = 'telegram-123456789';
    const testUser = {
      userId: testUserId,
      profile: {
        userId: testUserId,
        username: 'Test User',
        maxEnergy: 100,
        energyRecoveryRate: 1,
        maxGear: 'M',
        level: 1,
        experience: 0,
        createdAt: new Date(),
        lastLogin: new Date(),
        telegramId: '123456789',
        telegramUsername: 'testuser',
        telegramFirstName: 'Test',
        telegramLastName: 'User',
        chatId: 123456789
      },
      gameState: {
        tokens: 100, // –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        highScore: 0,
        engineLevel: 'Mk I',
        gearboxLevel: 'L1',
        batteryLevel: 'B1',
        hyperdriveLevel: 'H1',
        powerGridLevel: 'P1',
        lastSaved: new Date()
      },
      gameBalance: 100,
      transactions: [],
      updatedAt: new Date(),
      botInteraction: {
        firstInteraction: new Date(),
        lastSeen: new Date(),
        chatId: 123456789
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await database.collection('users').updateOne(
      { userId: testUserId },
      { $set: testUser },
      { upsert: true }
    );
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${testUserId} ${userResult.upsertedCount ? '—Å–æ–∑–¥–∞–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω'}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    const leaderboardEntry = {
      userId: testUserId,
      username: 'Test User',
      telegramId: '123456789',
      telegramUsername: 'testuser',
      telegramFirstName: 'Test',
      telegramLastName: 'User',
      tokens: 100,
      rank: 1,
      updatedAt: new Date()
    };
    
    const leaderboardResult = await database.collection('leaderboard').updateOne(
      { userId: testUserId },
      { $set: leaderboardEntry },
      { upsert: true }
    );
    
    console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ ${testUserId} ${leaderboardResult.upsertedCount ? '—Å–æ–∑–¥–∞–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    const savedUser = await database.collection('users').findOne({ userId: testUserId });
    const savedLeaderboard = await database.collection('leaderboard').findOne({ userId: testUserId });
    
    console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    console.log(`User ID: ${savedUser?.userId}`);
    console.log(`Username: ${savedUser?.profile?.username}`);
    console.log(`Tokens: ${savedUser?.gameState?.tokens}`);
    console.log(`Telegram ID: ${savedUser?.profile?.telegramId}`);
    console.log(`Leaderboard Rank: ${savedLeaderboard?.rank}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
    const allUsers = await database.collection('leaderboard')
      .find()
      .sort({ tokens: -1 })
      .toArray();
    
    await Promise.all(allUsers.map((user, index) => 
      database.collection('leaderboard').updateOne(
        { _id: user._id },
        { $set: { rank: index + 1 } }
      )
    ));
    
    console.log('‚úÖ –†–∞–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    
    await client.close();
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    
    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –î–ê–ù–ù–´–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log(`User ID: ${testUserId}`);
    console.log(`Tokens: 100 DEL`);
    console.log(`Telegram ID: 123456789`);
    
    return testUserId;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createTestUser()
    .then(userId => {
      if (userId) {
        console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!');
        console.log(`ID: ${userId}`);
        process.exit(0);
      } else {
        console.log('\nüí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { createTestUser }; 