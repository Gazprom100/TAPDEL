const os = require('os');
const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function testSystemMetrics() {
  try {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –°–ò–°–¢–ï–ú–ù–´–• –ú–ï–¢–†–ò–ö');
    console.log('==========================================\n');
    
    // CPU
    const cpuUsage = os.loadavg()[0] * 100;
    console.log(`üíª CPU (1-–º–∏–Ω—É—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞): ${cpuUsage.toFixed(2)}%`);
    
    // Memory
    const totalMem = os.totalmem();
    const freeMem = os.freemem();
    const memoryUsage = ((totalMem - freeMem) / totalMem) * 100;
    console.log(`üß† –ü–∞–º—è—Ç—å: ${memoryUsage.toFixed(2)}% (${(totalMem / 1024 / 1024 / 1024).toFixed(2)} GB –≤—Å–µ–≥–æ)`);
    
    // Disk
    console.log('\nüíæ –î–ò–°–ö:');
    try {
      const { stdout } = await execAsync('df -h / | tail -1');
      console.log(`   ${stdout.trim()}`);
      
      const { stdout: diskUsage } = await execAsync('df -h / | tail -1 | awk \'{print $5}\' | sed \'s/%//\'');
      console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${diskUsage.trim()}%`);
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏—Å–∫–µ: ${error.message}`);
    }
    
    // Network
    console.log('\nüåê –°–ï–¢–¨:');
    try {
      const { stdout } = await execAsync('cat /proc/net/dev | grep -E "(eth0|en0|lo)" | head -3');
      console.log(`   –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:\n${stdout.trim()}`);
      
      const { stdout: networkStats } = await execAsync('cat /proc/net/dev | grep eth0 | awk \'{print $2 " " $10}\'');
      if (networkStats.trim()) {
        const [rx, tx] = networkStats.trim().split(' ').map(Number);
        console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${(rx / 1024 / 1024).toFixed(2)} MB`);
        console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${(tx / 1024 / 1024).toFixed(2)} MB`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ç–∏: ${error.message}`);
    }
    
    // Active Connections
    console.log('\nüîó –ê–ö–¢–ò–í–ù–´–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø:');
    try {
      const { stdout } = await execAsync('netstat -an | grep ESTABLISHED | wc -l');
      console.log(`   ESTABLISHED: ${stdout.trim()}`);
      
      const { stdout: totalConnections } = await execAsync('netstat -an | wc -l');
      console.log(`   –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${totalConnections.trim()}`);
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö: ${error.message}`);
    }
    
    // Uptime
    const uptime = os.uptime();
    const days = Math.floor(uptime / 86400);
    const hours = Math.floor((uptime % 86400) / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    console.log(`\n‚è∞ Uptime: ${days}–¥ ${hours}—á ${minutes}–º`);
    
    // System Info
    console.log('\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:');
    console.log(`   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${os.platform()}`);
    console.log(`   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${os.arch()}`);
    console.log(`   –í–µ—Ä—Å–∏—è: ${os.release()}`);
    console.log(`   –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: ${os.cpus().length}`);
    
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–î–ú–ò–ù–ü–ê–ù–ï–õ–ò:');
    console.log('=====================================');
    
    let diskUsage = 50;
    try {
      const { stdout } = await execAsync('df -h / | tail -1 | awk \'{print $5}\' | sed \'s/%//\'');
      diskUsage = parseFloat(stdout.trim());
    } catch (error) {
      console.log('   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–∏—Å–∫–∞: 50%');
    }
    
    let networkIn = 0;
    let networkOut = 0;
    try {
      const { stdout } = await execAsync('cat /proc/net/dev | grep eth0 | awk \'{print $2 " " $10}\'');
      const [rx, tx] = stdout.trim().split(' ').map(Number);
      networkIn = Math.round(rx / 1024 / 1024);
      networkOut = Math.round(tx / 1024 / 1024);
    } catch (error) {
      console.log('   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–µ—Ç–∏: 0 MB');
    }
    
    let activeConnections = 0;
    try {
      const { stdout } = await execAsync('netstat -an | grep ESTABLISHED | wc -l');
      activeConnections = parseInt(stdout.trim());
    } catch (error) {
      console.log('   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: 0');
    }
    
    console.log(`‚úÖ CPU: ${Math.min(cpuUsage, 100).toFixed(2)}%`);
    console.log(`‚úÖ –ü–∞–º—è—Ç—å: ${Math.min(memoryUsage, 100).toFixed(2)}%`);
    console.log(`‚úÖ –î–∏—Å–∫: ${Math.min(diskUsage, 100).toFixed(2)}%`);
    console.log(`‚úÖ –°–µ—Ç—å (–≤—Ö–æ–¥—è—â–∏–π): ${networkIn} MB`);
    console.log(`‚úÖ –°–µ—Ç—å (–∏—Å—Ö–æ–¥—è—â–∏–π): ${networkOut} MB`);
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${activeConnections}`);
    console.log(`‚úÖ Uptime: ${uptime} —Å–µ–∫—É–Ω–¥`);
    
    console.log('\nüîó JSON –¥–ª—è API:');
    console.log(JSON.stringify({
      cpu: Math.min(cpuUsage, 100),
      memory: Math.min(memoryUsage, 100),
      disk: Math.min(diskUsage, 100),
      network: {
        in: networkIn,
        out: networkOut
      },
      uptime,
      activeConnections
    }, null, 2));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testSystemMetrics();
