const decimalService = require('../services/decimalService');

async function testWalletBalanceWithDel() {
  try {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WALLET-BALANCE –° –ü–†–ê–í–ò–õ–¨–ù–´–ú ABI –î–õ–Ø DEL');
    console.log('========================================================\n');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalService
    if (!decimalService.isInitialized) {
      await decimalService.initialize();
    }
    
    const workingAddress = process.env.DECIMAL_WORKING_ADDRESS || '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43';
    console.log(`üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${workingAddress}\n`);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const tokens = [
      {
        symbol: 'DEL',
        name: 'Decimal Token',
        address: '0x0000000000000000000000000000000000000000',
        decimals: 18
      },
      {
        symbol: 'BOOST',
        name: 'BOOST Token',
        address: '0x15cefa2ffb0759b519c15e23025a718978be9322',
        decimals: 18
      },
      {
        symbol: 'MAKAROVSKY',
        name: 'MAKAROVSKY Token',
        address: '0x4847183b5dc733e145ffeff663a49fa4ef9173ca',
        decimals: 18
      },
      {
        symbol: 'SBT',
        name: 'SBT Token',
        address: '0xec2991de234a010fc5b58842d594fe9ae08d7304',
        decimals: 18
      }
    ];
    
    const walletBalances = [];
    
    for (const token of tokens) {
      try {
        console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è ${token.symbol}...`);
        
        let balance;
        
        // –î–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ DEL –∏—Å–ø–æ–ª—å–∑—É–µ–º web3.eth.getBalance
        if (token.symbol === 'DEL') {
          console.log(`   üìã DEL - –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º web3.eth.getBalance`);
          const balanceWei = await decimalService.web3.eth.getBalance(workingAddress);
          balance = parseFloat(decimalService.web3.utils.fromWei(balanceWei, 'ether'));
          console.log(`   ‚úÖ DEL –±–∞–ª–∞–Ω—Å: ${balance} DEL`);
        } else {
          console.log(`   üìã ${token.symbol} - ERC-20 —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º balanceOf`);
          const tokenContract = new decimalService.web3.eth.Contract([
            {
              "constant": true,
              "inputs": [{"name": "_owner", "type": "address"}],
              "name": "balanceOf",
              "outputs": [{"name": "balance", "type": "uint256"}],
              "type": "function"
            }
          ], token.address);
          
          const balanceWei = await tokenContract.methods.balanceOf(workingAddress).call();
          balance = parseFloat(decimalService.web3.utils.fromWei(balanceWei, 'ether'));
          console.log(`   ‚úÖ ${token.symbol} –±–∞–ª–∞–Ω—Å: ${balance} ${token.symbol}`);
        }
        
        const balanceData = {
          symbol: token.symbol,
          name: token.name,
          address: token.address,
          balance: balance,
          decimals: token.decimals,
          lastUpdated: new Date().toISOString(),
          status: 'active'
        };
        
        walletBalances.push(balanceData);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${token.symbol}:`, error.message);
        
        walletBalances.push({
          symbol: token.symbol,
          name: token.name,
          address: token.address,
          balance: 0,
          decimals: token.decimals,
          lastUpdated: new Date().toISOString(),
          status: 'error',
          error: error.message
        });
      }
      
      console.log('');
    }
    
    console.log('üìã –ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ê–î–ú–ò–ù–ü–ê–ù–ï–õ–ò:');
    console.log('=====================================');
    console.log(JSON.stringify({
      success: true,
      balances: walletBalances,
      lastUpdated: new Date().toISOString(),
      source: 'blockchain'
    }, null, 2));
    
    console.log('\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('üîß –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –≤ admin.js');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

testWalletBalanceWithDel();
