const { MongoClient } = require('mongodb');
const { Web3 } = require('web3');
require('dotenv').config({ path: './.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0',
  DECIMAL_RPC_URL: process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/',
  WORKING_ADDRESS: process.env.DECIMAL_WORKING_ADDRESS,
  PRIVATE_KEY: process.env.DECIMAL_PRIVATE_KEY,
  GAS_LIMIT: 21000,
  GAS_PRICE: 5, // 5 gwei
  CHAIN_ID: 75
};

class WithdrawalProcessor {
  constructor() {
    this.db = null;
    this.web3 = null;
    this.results = {
      timestamp: new Date(),
      processed: [],
      errors: []
    };
  }

  async initialize() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–æ–≤...');
    
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
      const client = new MongoClient(config.MONGODB_URI);
      await client.connect();
      this.db = client.db('tapdel');
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain
      this.web3 = new Web3(config.DECIMAL_RPC_URL);
      const blockNumber = await this.web3.eth.getBlockNumber();
      console.log(`‚úÖ DecimalChain –ø–æ–¥–∫–ª—é—á–µ–Ω, –±–ª–æ–∫: ${blockNumber}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      const balance = await this.web3.eth.getBalance(config.WORKING_ADDRESS);
      const balanceEth = parseFloat(this.web3.utils.fromWei(balance, 'ether'));
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${balanceEth} DEL`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async getNonce(address) {
    try {
      const transactionCount = await this.web3.eth.getTransactionCount(
        this.web3.utils.toChecksumAddress(address)
      );
      return Number(transactionCount);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è nonce:', error);
      throw error;
    }
  }

  async signAndSend(toAddress, amount) {
    try {
      console.log(`üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${amount} DEL ‚Üí ${toAddress}`);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∫–ª—é—á–∞ –∏–∑ config
      const privateKey = config.getPrivateKey();
      const fromAddress = config.WORKING_ADDRESS;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–æ
      const amountNum = parseFloat(amount);
      if (isNaN(amountNum) || amountNum <= 0) {
        throw new Error(`Invalid amount: ${amount}`);
      }
      
      console.log(`üìä –°—É–º–º–∞: ${amountNum} DEL`);
      
      // –ü–æ–ª—É—á–∞–µ–º nonce
      const nonce = await this.getNonce(fromAddress);
      console.log(`üìù Nonce: ${nonce}`);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π gas price
      const currentGasPrice = await config.getCurrentGasPrice();
      console.log(`‚õΩ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞–∑ –ø—Ä–∞–π—Å: ${currentGasPrice} gwei`);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = {
        from: this.web3.utils.toChecksumAddress(fromAddress),
        to: this.web3.utils.toChecksumAddress(toAddress),
        value: this.web3.utils.toWei(amountNum.toString(), 'ether'),
        gas: config.GAS_LIMIT,
        gasPrice: this.web3.utils.toWei(currentGasPrice.toString(), 'gwei'),
        nonce: nonce,
        chainId: config.CHAIN_ID
      };

      console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:`, {
        from: transaction.from,
        to: transaction.to,
        value: amountNum + ' DEL',
        gas: transaction.gas,
        gasPrice: currentGasPrice + ' gwei'
      });

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const signedTx = await this.web3.eth.accounts.signTransaction(transaction, privateKey);
      console.log(`‚úçÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const receipt = await this.web3.eth.sendSignedTransaction(signedTx.rawTransaction);
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${receipt.transactionHash}`);
      return receipt.transactionHash;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  }

  async processQueuedWithdrawals() {
    console.log('\nüí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏...');
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—ã–≤–æ–¥—ã –≤ –æ—á–µ—Ä–µ–¥–∏
      const queuedWithdrawals = await this.db.collection('withdrawals').find({
        status: 'queued'
      }).toArray();

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${queuedWithdrawals.length} –≤—ã–≤–æ–¥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`);

      for (const withdrawal of queuedWithdrawals) {
        try {
          console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ ${withdrawal._id}: ${withdrawal.amount} DEL ‚Üí ${withdrawal.toAddress}`);
          
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            { $set: { status: 'processing', processingStartedAt: new Date() } }
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const txHash = await this.signAndSend(withdrawal.toAddress, withdrawal.amount);
          
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            {
              $set: {
                txHash: txHash,
                status: 'sent',
                processedAt: new Date()
              },
              $unset: { processingStartedAt: 1 }
            }
          );

          console.log(`‚úÖ –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${withdrawal.amount} DEL ‚Üí ${withdrawal.toAddress}`);
          console.log(`üìÑ TX Hash: ${txHash}`);
          
          this.results.processed.push({
            type: 'withdrawal_sent',
            withdrawalId: withdrawal._id.toString(),
            userId: withdrawal.userId,
            amount: withdrawal.amount,
            toAddress: withdrawal.toAddress,
            txHash: txHash
          });
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ ${withdrawal._id}:`, error.message);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await this.db.collection('users').updateOne(
            { userId: withdrawal.userId },
            { $inc: { "gameState.tokens": parseFloat(withdrawal.amount) } }
          );

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            {
              $set: {
                status: 'failed',
                error: error.message,
                processedAt: new Date()
              },
              $unset: { processingStartedAt: 1 }
            }
          );

          console.log(`üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawal.userId}: +${withdrawal.amount} DEL`);
          
          this.results.errors.push({
            type: 'withdrawal_failed',
            withdrawalId: withdrawal._id.toString(),
            userId: withdrawal.userId,
            amount: withdrawal.amount,
            error: error.message
          });
        }
      }

      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
      this.results.errors.push({
        type: 'withdrawals_processing',
        error: error.message
      });
    }
  }

  async processStuckWithdrawals() {
    console.log('\n‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤...');
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã –≤ —Å—Ç–∞—Ç—É—Å–µ processing
      const stuckWithdrawals = await this.db.collection('withdrawals').find({
        status: 'processing',
        processingStartedAt: { $lt: new Date(Date.now() - 5 * 60 * 1000) } // 5 –º–∏–Ω—É—Ç
      }).toArray();

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${stuckWithdrawals.length} –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤`);

      for (const withdrawal of stuckWithdrawals) {
        try {
          console.log(`‚ö†Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–π –≤—ã–≤–æ–¥ ${withdrawal._id}: ${withdrawal.amount} DEL`);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await this.db.collection('users').updateOne(
            { userId: withdrawal.userId },
            { $inc: { "gameState.tokens": parseFloat(withdrawal.amount) } }
          );

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
          await this.db.collection('withdrawals').updateOne(
            { _id: withdrawal._id },
            {
              $set: {
                status: 'failed',
                error: 'Timeout - processing took too long',
                processedAt: new Date()
              },
              $unset: { processingStartedAt: 1 }
            }
          );

          console.log(`üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawal.userId}: +${withdrawal.amount} DEL`);
          
          this.results.processed.push({
            type: 'withdrawal_refunded',
            withdrawalId: withdrawal._id.toString(),
            userId: withdrawal.userId,
            amount: withdrawal.amount,
            reason: 'timeout'
          });
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Å—Ç—Ä—è–≤—à–µ–≥–æ –≤—ã–≤–æ–¥–∞ ${withdrawal._id}:`, error);
          this.results.errors.push({
            type: 'stuck_withdrawal_processing',
            withdrawalId: withdrawal._id.toString(),
            error: error.message
          });
        }
      }

      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤:', error);
      this.results.errors.push({
        type: 'stuck_withdrawals_processing',
        error: error.message
      });
    }
  }

  async generateSummary() {
    console.log('\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏...');
    
    const summary = {
      totalProcessed: this.results.processed.length,
      totalErrors: this.results.errors.length,
      processedTypes: {},
      errorTypes: {}
    };

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    for (const item of this.results.processed) {
      summary.processedTypes[item.type] = (summary.processedTypes[item.type] || 0) + 1;
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
    for (const error of this.results.errors) {
      summary.errorTypes[error.type] = (summary.errorTypes[error.type] || 0) + 1;
    }

    this.results.summary = summary;
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
  }

  async runProcessing() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–æ–≤...\n');
    
    try {
      await this.initialize();
      
      await this.processStuckWithdrawals();
      await this.processQueuedWithdrawals();
      
      await this.generateSummary();
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
      console.log(JSON.stringify(this.results, null, 2));
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const processingCollection = this.db.collection('withdrawal_processing');
      await processingCollection.insertOne({
        ...this.results,
        createdAt: new Date()
      });
      
      console.log('\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
    } finally {
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–æ–≤
const processor = new WithdrawalProcessor();
processor.runProcessing(); 