const decimalService = require('../services/decimalService');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
process.env.UPSTASH_REDIS_REST_URL = "https://inviting-camel-20897.upstash.io";
process.env.UPSTASH_REDIS_REST_TOKEN = "AVGhAAIjcDFmODU5MjExNTVlNjg0NjQ0ODkwZDg0ODM2Y2FlZjYyNnAxMA";

async function testDecimalWithUpstash() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DecimalService —Å Upstash Redis');
  console.log('============================================');
  
  console.log('\nüìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:');
  console.log(`UPSTASH_REDIS_REST_URL: ${process.env.UPSTASH_REDIS_REST_URL}`);
  console.log(`UPSTASH_REDIS_REST_TOKEN: ${process.env.UPSTASH_REDIS_REST_TOKEN ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä DecimalService
    
    console.log('\nüîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DecimalService...');
    await decimalService.initialize();
    
    console.log('\nüìä –°–¢–ê–¢–£–° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:');
    console.log(`hasRedis: ${decimalService.hasRedis}`);
    console.log(`isInitialized: ${decimalService.isInitialized}`);
    console.log(`redis: ${decimalService.redis ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}`);
    
    if (decimalService.hasRedis && decimalService.redis) {
      console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –æ–ø–µ—Ä–∞—Ü–∏–π...');
      
      // –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ nonce
      const testAddress = '0x1234567890123456789012345678901234567890';
      const nonceKey = `DECIMAL_NONCE_${testAddress.toLowerCase()}`;
      
      console.log(`\nüìù –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å nonce –¥–ª—è ${testAddress}`);
      await decimalService.redis.set(nonceKey, '123');
      console.log('‚úÖ Nonce –∑–∞–ø–∏—Å–∞–Ω');
      
      console.log('\nüìñ –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ nonce');
      const nonce = await decimalService.redis.get(nonceKey);
      console.log(`‚úÖ Nonce –ø—Ä–æ—á–∏—Ç–∞–Ω: ${nonce}`);
      
      // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ nonce —á–µ—Ä–µ–∑ DecimalService
      console.log('\nüîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ nonce —á–µ—Ä–µ–∑ DecimalService');
      const serviceNonce = await decimalService.getNonce(testAddress);
      console.log(`‚úÖ Nonce —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: ${serviceNonce}`);
      
      // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç –±–ª–æ–∫–∞
      console.log('\nüì¶ –¢–µ—Å—Ç 4: –¢–µ—Å—Ç –±–ª–æ–∫–∞');
      await decimalService.redis.set('DECIMAL_LAST_BLOCK', '1000');
      const block = await decimalService.redis.get('DECIMAL_LAST_BLOCK');
      console.log(`‚úÖ –ë–ª–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω: ${block}`);
      
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      await decimalService.redis.del(nonceKey);
      await decimalService.redis.del('DECIMAL_LAST_BLOCK');
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      
    } else {
      console.log('\n‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
      
      // –¢–µ—Å—Ç –±–µ–∑ Redis
      const testAddress = '0x1234567890123456789012345678901234567890';
      console.log(`\nüîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è nonce –±–µ–∑ Redis –¥–ª—è ${testAddress}`);
      
      try {
        const nonce = await decimalService.getNonce(testAddress);
        console.log(`‚úÖ Nonce –ø–æ–ª—É—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞: ${nonce}`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è nonce:', error.message);
      }
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç DecimalService —Å Upstash –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚úÖ DecimalService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ Nonce –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DecimalService:', error);
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      code: error.code,
      stack: error.stack
    });
    
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDecimalWithUpstash()
    .then(success => {
      if (success) {
        console.log('\nüéâ DecimalService —Å Upstash —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\nüí• DecimalService —Å Upstash —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testDecimalWithUpstash }; 