const { MongoClient } = require('mongodb');
const { Web3 } = require('web3');
require('dotenv').config({ path: './.env' });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0',
  DECIMAL_RPC_URL: process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/',
  WORKING_ADDRESS: process.env.DECIMAL_WORKING_ADDRESS,
  PRIVATE_KEY: process.env.DECIMAL_PRIVATE_KEY,
  GAS_LIMIT: 21000,
  GAS_PRICE: 5, // 5 gwei
  CHAIN_ID: 75
};

class SpecificWithdrawalProcessor {
  constructor() {
    this.db = null;
    this.web3 = null;
  }

  async initialize() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞...');
    
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
      const client = new MongoClient(config.MONGODB_URI);
      await client.connect();
      this.db = client.db('tapdel');
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain
      this.web3 = new Web3(config.DECIMAL_RPC_URL);
      const blockNumber = await this.web3.eth.getBlockNumber();
      console.log(`‚úÖ DecimalChain –ø–æ–¥–∫–ª—é—á–µ–Ω, –±–ª–æ–∫: ${blockNumber}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      const balance = await this.web3.eth.getBalance(config.WORKING_ADDRESS);
      const balanceEth = parseFloat(this.web3.utils.fromWei(balance, 'ether'));
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${balanceEth} DEL`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async getNonce(address) {
    try {
      const transactionCount = await this.web3.eth.getTransactionCount(
        this.web3.utils.toChecksumAddress(address)
      );
      return Number(transactionCount);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è nonce:', error);
      throw error;
    }
  }

  async signAndSend(toAddress, amount) {
    try {
      console.log(`üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${amount} DEL ‚Üí ${toAddress}`);
      
      const fromAddress = config.WORKING_ADDRESS;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–æ
      const amountNum = parseFloat(amount);
      if (isNaN(amountNum) || amountNum <= 0) {
        throw new Error(`Invalid amount: ${amount}`);
      }
      
      console.log(`üìä –°—É–º–º–∞: ${amountNum} DEL`);
      
      // –ü–æ–ª—É—á–∞–µ–º nonce
      const nonce = await this.getNonce(fromAddress);
      console.log(`üìù Nonce: ${nonce}`);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = {
        from: this.web3.utils.toChecksumAddress(fromAddress),
        to: this.web3.utils.toChecksumAddress(toAddress),
        value: this.web3.utils.toWei(amountNum.toString(), 'ether'),
        gas: config.GAS_LIMIT,
        gasPrice: this.web3.utils.toWei(config.GAS_PRICE.toString(), 'gwei'),
        nonce: nonce,
        chainId: config.CHAIN_ID
      };

      console.log(`üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:`, {
        from: transaction.from,
        to: transaction.to,
        value: amountNum + ' DEL',
        valueWei: transaction.value,
        gas: transaction.gas,
        gasPrice: config.GAS_PRICE + ' gwei'
      });

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const signedTx = await this.web3.eth.accounts.signTransaction(transaction, config.PRIVATE_KEY);
      console.log(`‚úçÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const receipt = await this.web3.eth.sendSignedTransaction(signedTx.rawTransaction);
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${receipt.transactionHash}`);
      return receipt.transactionHash;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  }

  async processWithdrawal(withdrawalId) {
    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞: ${withdrawalId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const withdrawal = await this.db.collection('withdrawals').findOne({
        _id: new (require('mongodb').ObjectId)(withdrawalId)
      });

      if (!withdrawal) {
        console.log(`‚ùå –í—ã–≤–æ–¥ ${withdrawalId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      console.log(`üìã –î–µ—Ç–∞–ª–∏ –≤—ã–≤–æ–¥–∞:`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.userId}`);
      console.log(`   –°—É–º–º–∞: ${withdrawal.amount} DEL`);
      console.log(`   –ê–¥—Ä–µ—Å: ${withdrawal.toAddress}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${withdrawal.requestedAt}`);

      if (withdrawal.status === 'sent') {
        console.log(`‚úÖ –í—ã–≤–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, TX: ${withdrawal.txHash}`);
        return;
      }

      if (withdrawal.status === 'failed') {
        console.log(`‚ùå –í—ã–≤–æ–¥ —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ failed: ${withdrawal.error}`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.db.collection('users').findOne({ userId: withdrawal.userId });
      if (!user) {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${withdrawal.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      const userBalance = user.gameState?.tokens || 0;
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userBalance} DEL`);

      if (userBalance < withdrawal.amount) {
        console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: ${userBalance} < ${withdrawal.amount}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–≤–æ–¥ –≤ –æ—á–µ—Ä–µ–¥—å
        await this.db.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          {
            $set: {
              status: 'queued',
              error: 'Insufficient balance'
            },
            $unset: { processingStartedAt: 1 }
          }
        );
        
        console.log(`üîÑ –í—ã–≤–æ–¥ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å`);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);
      const txHash = await this.signAndSend(withdrawal.toAddress, withdrawal.amount);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
      await this.db.collection('withdrawals').updateOne(
        { _id: withdrawal._id },
        {
          $set: {
            txHash: txHash,
            status: 'sent',
            processedAt: new Date()
          },
          $unset: { processingStartedAt: 1 }
        }
      );

      console.log(`‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!`);
      console.log(`üìÑ TX Hash: ${txHash}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ ${withdrawalId}:`, error.message);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
      await this.db.collection('withdrawals').updateOne(
        { _id: new (require('mongodb').ObjectId)(withdrawalId) },
        {
          $set: {
            status: 'failed',
            error: error.message,
            processedAt: new Date()
          },
          $unset: { processingStartedAt: 1 }
        }
      );
      
      console.log(`‚ùå –í—ã–≤–æ–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ failed`);
    }
  }

  async runProcessing(withdrawalId) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞...\n');
    
    try {
      await this.initialize();
      await this.processWithdrawal(withdrawalId);
      console.log('\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    } finally {
      process.exit(0);
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–≤–æ–¥–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const withdrawalId = process.argv[2];

if (!withdrawalId) {
  console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤—ã–≤–æ–¥–∞: node scripts/processSpecificWithdrawal.js <withdrawalId>');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
const processor = new SpecificWithdrawalProcessor();
processor.runProcessing(withdrawalId); 