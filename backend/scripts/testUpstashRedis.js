const fetch = require('node-fetch');

// –î–∞–Ω–Ω—ã–µ Upstash
const UPSTASH_REST_URL = "https://inviting-camel-20897.upstash.io";
const UPSTASH_TOKEN = "AVGhAAIjcDFmODU5MjExNTVlNjg0NjQ0ODkwZDg0ODM2Y2FlZjYyNnAxMA";

async function testUpstashRedis() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Upstash Redis —á–µ—Ä–µ–∑ REST API');
  console.log('===========================================');
  
  console.log('\nüìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:');
  console.log(`REST URL: ${UPSTASH_REST_URL}`);
  console.log(`Token: ${UPSTASH_TOKEN.substring(0, 10)}...`);
  
  try {
    // –¢–µ—Å—Ç 1: Ping
    console.log('\nüèì –¢–µ—Å—Ç 1: Ping');
    const pingResponse = await fetch(`${UPSTASH_REST_URL}/ping`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${UPSTASH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (pingResponse.ok) {
      const pingResult = await pingResponse.text();
      console.log(`‚úÖ Ping —É—Å–ø–µ—à–µ–Ω: ${pingResult}`);
    } else {
      console.log(`‚ùå Ping –Ω–µ—É–¥–∞—á–µ–Ω: ${pingResponse.status} ${pingResponse.statusText}`);
    }
    
    // –¢–µ—Å—Ç 2: –ó–∞–ø–∏—Å—å
    console.log('\nüìù –¢–µ—Å—Ç 2: –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö');
    const testKey = 'tapdel_test_key';
    const testValue = `test_${Date.now()}`;
    
    const setResponse = await fetch(`${UPSTASH_REST_URL}/set/${testKey}`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${UPSTASH_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        value: testValue
      })
    });
    
    if (setResponse.ok) {
      const setResult = await setResponse.json();
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞: ${testKey} = ${testValue}`);
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(setResult)}`);
    } else {
      console.log(`‚ùå –ó–∞–ø–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–∞: ${setResponse.status} ${setResponse.statusText}`);
    }
    
    // –¢–µ—Å—Ç 3: –ß—Ç–µ–Ω–∏–µ
    console.log('\nüìñ –¢–µ—Å—Ç 3: –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
    const getResponse = await fetch(`${UPSTASH_REST_URL}/get/${testKey}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${UPSTASH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (getResponse.ok) {
      const getResult = await getResponse.json();
      console.log(`‚úÖ –ß—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: ${testKey} = ${getResult.result}`);
    } else {
      console.log(`‚ùå –ß—Ç–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ: ${getResponse.status} ${getResponse.statusText}`);
    }
    
    // –¢–µ—Å—Ç 4: DecimalChain –∫–ª—é—á–∏
    console.log('\nüîë –¢–µ—Å—Ç 4: DecimalChain –∫–ª—é—á–∏');
    
    // –¢–µ—Å—Ç nonce
    const nonceKey = 'DECIMAL_NONCE_test_address';
    const nonceValue = '123';
    
    const nonceSetResponse = await fetch(`${UPSTASH_REST_URL}/set/${nonceKey}`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${UPSTASH_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        value: nonceValue
      })
    });
    
    if (nonceSetResponse.ok) {
      console.log(`‚úÖ Nonce –∑–∞–ø–∏—Å–∞–Ω: ${nonceKey} = ${nonceValue}`);
    }
    
    // –¢–µ—Å—Ç –±–ª–æ–∫–∞
    const blockKey = 'DECIMAL_LAST_BLOCK';
    const blockValue = '1000';
    
    const blockSetResponse = await fetch(`${UPSTASH_REST_URL}/set/${blockKey}`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${UPSTASH_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        value: blockValue
      })
    });
    
    if (blockSetResponse.ok) {
      console.log(`‚úÖ Block –∑–∞–ø–∏—Å–∞–Ω: ${blockKey} = ${blockValue}`);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π');
    await fetch(`${UPSTASH_REST_URL}/del/${testKey}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${UPSTASH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    await fetch(`${UPSTASH_REST_URL}/del/${nonceKey}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${UPSTASH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    await fetch(`${UPSTASH_REST_URL}/del/${blockKey}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${UPSTASH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ –æ—á–∏—â–µ–Ω—ã');
    
    console.log('\nüéâ Upstash Redis —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚úÖ Upstash Redis —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ REST API');
    console.log('‚úÖ –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è TAPDEL');
    console.log('‚úÖ DecimalChain —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Upstash Redis:', error);
    console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      code: error.code,
      stack: error.stack
    });
    
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testUpstashRedis()
    .then(success => {
      if (success) {
        console.log('\nüéâ Upstash Redis —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\nüí• Upstash Redis —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testUpstashRedis }; 