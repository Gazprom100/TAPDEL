const databaseConfig = require('../config/database');
const decimalService = require('../services/decimalService');
const config = require('../config/decimal');

async function comprehensiveSystemAudit() {
  try {
    console.log('üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–£–î–ò–¢ –°–ò–°–¢–ï–ú–´ –í–í–û–î–ê/–í–´–í–û–î–ê');
    console.log('===============================================');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const database = await databaseConfig.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalService
    if (!decimalService.web3) {
      await decimalService.initialize();
    }
    console.log('‚úÖ DecimalService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // === 1. –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
    console.log('\nüìã 1. –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò');
    console.log('============================');
    
    console.log(`RPC URL: ${config.RPC_URL}`);
    console.log(`API Base URL: ${config.API_BASE_URL}`);
    console.log(`Working Address: ${config.WORKING_ADDRESS}`);
    console.log(`Chain ID: ${config.CHAIN_ID}`);
    console.log(`Gas Limit: ${config.GAS_LIMIT}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    try {
      const privateKey = config.getPrivateKey();
      console.log(`Private Key: ${privateKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
    } catch (error) {
      console.log(`Private Key: ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // === 2. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô ===
    console.log('\nüîó 2. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô');
    console.log('============================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º RPC
    try {
      const blockNumber = await decimalService.web3.eth.getBlockNumber();
      console.log(`‚úÖ RPC –ø–æ–¥–∫–ª—é—á–µ–Ω, –±–ª–æ–∫: ${blockNumber}`);
    } catch (error) {
      console.log(`‚ùå RPC –æ—à–∏–±–∫–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    try {
      const testResponse = await fetch(`${config.API_BASE_URL}/addresses/`, { timeout: 5000 });
      console.log(`‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: ${testResponse.status}`);
    } catch (error) {
      console.log(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    console.log(`Redis: ${decimalService.hasRedis ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
    
    // === 3. –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–û–í ===
    console.log('\nüí∞ 3. –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–û–í');
    console.log('=======================');
    
    try {
      const workingBalance = await decimalService.getWorkingBalance();
      console.log(`–†–∞–±–æ—á–∏–π –∫–æ—à–µ–ª–µ–∫: ${workingBalance} DEL`);
      
      if (workingBalance < 1000) {
        console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞!`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
    }
    
    // === 4. –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–û–í ===
    console.log('\nüì• 4. –ê–ù–ê–õ–ò–ó –î–ï–ü–û–ó–ò–¢–û–í');
    console.log('========================');
    
    const deposits = await database.collection('deposits').find({}).toArray();
    const activeDeposits = deposits.filter(d => !d.matched && d.expiresAt > new Date());
    const matchedDeposits = deposits.filter(d => d.matched);
    const expiredDeposits = deposits.filter(d => d.expiresAt <= new Date());
    
    console.log(`–í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
    console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeDeposits.length}`);
    console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: ${matchedDeposits.length}`);
    console.log(`–ò—Å—Ç–µ–∫—à–∏—Ö: ${expiredDeposits.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    if (activeDeposits.length > 0) {
      console.log('\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã:');
      for (const deposit of activeDeposits.slice(0, 5)) {
        console.log(`   ${deposit.uniqueAmount} DEL - ${deposit.userId} - ${deposit.createdAt}`);
      }
    }
    
    // === 5. –ê–ù–ê–õ–ò–ó –í–´–í–û–î–û–í ===
    console.log('\nüì§ 5. –ê–ù–ê–õ–ò–ó –í–´–í–û–î–û–í');
    console.log('======================');
    
    const withdrawals = await database.collection('withdrawals').find({}).toArray();
    const queuedWithdrawals = withdrawals.filter(w => w.status === 'queued');
    const processingWithdrawals = withdrawals.filter(w => w.status === 'processing');
    const sentWithdrawals = withdrawals.filter(w => w.status === 'sent');
    const failedWithdrawals = withdrawals.filter(w => w.status === 'failed');
    const completedWithdrawals = withdrawals.filter(w => w.status === 'completed');
    
    console.log(`–í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawals.length}`);
    console.log(`–í –æ—á–µ—Ä–µ–¥–∏: ${queuedWithdrawals.length}`);
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: ${processingWithdrawals.length}`);
    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${sentWithdrawals.length}`);
    console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω—ã: ${failedWithdrawals.length}`);
    console.log(`–ó–∞–≤–µ—Ä—à–µ–Ω—ã: ${completedWithdrawals.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    const problematicWithdrawals = [...processingWithdrawals, ...failedWithdrawals];
    if (problematicWithdrawals.length > 0) {
      console.log('\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤—ã–≤–æ–¥—ã:');
      for (const withdrawal of problematicWithdrawals.slice(0, 5)) {
        console.log(`   ${withdrawal.amount} DEL - ${withdrawal.status} - ${withdrawal.error || '–ù–µ—Ç –æ—à–∏–±–∫–∏'}`);
        if (withdrawal.processingStartedAt) {
          const processingTime = Date.now() - new Date(withdrawal.processingStartedAt).getTime();
          console.log(`     –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${Math.round(processingTime / 1000)} —Å–µ–∫`);
        }
      }
    }
    
    // === 6. –ê–ù–ê–õ–ò–ó –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===
    console.log('\nüëÅÔ∏è 6. –ê–ù–ê–õ–ò–ó –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê');
    console.log('===========================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫
    let lastBlock;
    if (decimalService.hasRedis && decimalService.redis) {
      try {
        lastBlock = await decimalService.redis.get('DECIMAL_LAST_BLOCK');
      } catch (error) {
        console.log(`Redis –æ—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    if (!lastBlock) {
      lastBlock = decimalService.localLastBlock;
    }
    
    console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫: ${lastBlock || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
    try {
      const currentBlock = await decimalService.web3.eth.getBlockNumber();
      console.log(`–¢–µ–∫—É—â–∏–π –±–ª–æ–∫: ${currentBlock}`);
      
      if (lastBlock) {
        const blocksBehind = Number(currentBlock) - Number(lastBlock);
        console.log(`–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: ${blocksBehind} –±–ª–æ–∫–æ–≤`);
        
        if (blocksBehind > 100) {
          console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ–ª—å—à–æ–µ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ!`);
        }
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞: ${error.message}`);
    }
    
    // === 7. –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
    console.log('\nüë• 7. –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('============================');
    
    const users = await database.collection('users').find({}).toArray();
    const usersWithTokens = users.filter(u => (u.gameState?.tokens || 0) > 0);
    
    console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`–° —Ç–æ–∫–µ–Ω–∞–º–∏: ${usersWithTokens.length}`);
    
    if (usersWithTokens.length > 0) {
      const totalTokens = usersWithTokens.reduce((sum, u) => sum + (u.gameState?.tokens || 0), 0);
      console.log(`–û–±—â–∞—è —Å—É–º–º–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${totalTokens} DEL`);
      
      const topUsers = usersWithTokens
        .sort((a, b) => (b.gameState?.tokens || 0) - (a.gameState?.tokens || 0))
        .slice(0, 5);
      
      console.log('\nüèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:');
      for (const user of topUsers) {
        console.log(`   ${user.username || user.telegramUsername || user.userId}: ${user.gameState?.tokens || 0} DEL`);
      }
    }
    
    // === 8. –í–´–Ø–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú ===
    console.log('\nüö® 8. –í–´–Ø–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú');
    console.log('==========================');
    
    const problems = [];
    
    // –ü—Ä–æ–±–ª–µ–º–∞ 1: –ó–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã
    const stuckWithdrawals = processingWithdrawals.filter(w => {
      if (!w.processingStartedAt) return false;
      const processingTime = Date.now() - new Date(w.processingStartedAt).getTime();
      return processingTime > 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    });
    
    if (stuckWithdrawals.length > 0) {
      problems.push(`–ó–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã: ${stuckWithdrawals.length}`);
      console.log(`‚ùå –ó–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã: ${stuckWithdrawals.length}`);
    }
    
    // –ü—Ä–æ–±–ª–µ–º–∞ 2: –ù–µ—É–¥–∞—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    if (failedWithdrawals.length > 0) {
      problems.push(`–ù–µ—É–¥–∞—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã: ${failedWithdrawals.length}`);
      console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã: ${failedWithdrawals.length}`);
    }
    
    // –ü—Ä–æ–±–ª–µ–º–∞ 3: –ò—Å—Ç–µ–∫—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    if (expiredDeposits.length > 0) {
      problems.push(`–ò—Å—Ç–µ–∫—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã: ${expiredDeposits.length}`);
      console.log(`‚ùå –ò—Å—Ç–µ–∫—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã: ${expiredDeposits.length}`);
    }
    
    // –ü—Ä–æ–±–ª–µ–º–∞ 4: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    try {
      const workingBalance = await decimalService.getWorkingBalance();
      if (workingBalance < 1000) {
        problems.push(`–ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${workingBalance} DEL`);
        console.log(`‚ùå –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${workingBalance} DEL`);
      }
    } catch (error) {
      problems.push(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
    }
    
    // –ü—Ä–æ–±–ª–µ–º–∞ 5: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (!lastBlock) {
      problems.push('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
      console.log(`‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`);
    }
    
    if (problems.length === 0) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    } else {
      console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${problems.length}`);
    }
    
    // === 9. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
    console.log('\nüí° 9. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('===================');
    
    if (problems.length > 0) {
      console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      
      if (stuckWithdrawals.length > 0) {
        console.log('   1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã');
      }
      
      if (failedWithdrawals.length > 0) {
        console.log('   2. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã');
      }
      
      if (expiredDeposits.length > 0) {
        console.log('   3. –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã');
      }
      
      if (!lastBlock) {
        console.log('   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤');
      }
    } else {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
    
    console.log('\n‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞:', error);
  }
}

comprehensiveSystemAudit(); 