const fetch = require('node-fetch');

const API_BASE_URL = 'https://tapdel.onrender.com/api';

async function testUserOperations() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('=====================================');
  
  const testUserId = 'test_user_' + Date.now();
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏');
    const healthResponse = await fetch(`${API_BASE_URL}/test`);
    if (healthResponse.ok) {
      const health = await healthResponse.json();
      console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:', health.message);
    } else {
      console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ DecimalChain info
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç DecimalChain info');
    const infoResponse = await fetch(`${API_BASE_URL}/decimal/info`);
    if (infoResponse.ok) {
      const info = await infoResponse.json();
      console.log('‚úÖ DecimalChain info:', {
        workingAddress: info.workingAddress,
        workingBalance: info.workingBalance,
        chainId: info.chainId
      });
    } else {
      console.log('‚ùå DecimalChain info –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞');
    const depositResponse = await fetch(`${API_BASE_URL}/decimal/deposits`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: testUserId,
        baseAmount: 1.0
      })
    });
    
    if (depositResponse.ok) {
      const deposit = await depositResponse.json();
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:', {
        depositId: deposit.depositId,
        uniqueAmount: deposit.uniqueAmount,
        address: deposit.address,
        expires: deposit.expires
      });
    } else {
      const error = await depositResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    }
    
    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞');
    const withdrawalResponse = await fetch(`${API_BASE_URL}/decimal/withdrawals`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: testUserId,
        toAddress: '0x1234567890123456789012345678901234567890',
        amount: 0.5
      })
    });
    
    if (withdrawalResponse.ok) {
      const withdrawal = await withdrawalResponse.json();
      console.log('‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω:', {
        withdrawalId: withdrawal.withdrawalId,
        status: withdrawal.status,
        amount: withdrawal.amount,
        toAddress: withdrawal.toAddress
      });
    } else {
      const error = await withdrawalResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞');
    const balanceResponse = await fetch(`${API_BASE_URL}/decimal/users/${testUserId}/balance`);
    if (balanceResponse.ok) {
      const balance = await balanceResponse.json();
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', balance);
    } else {
      const error = await balanceResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    }
    
    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const depositsResponse = await fetch(`${API_BASE_URL}/decimal/users/${testUserId}/deposits`);
    if (depositsResponse.ok) {
      const deposits = await depositsResponse.json();
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', deposits.length);
    } else {
      const error = await depositsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    }
    
    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const withdrawalsResponse = await fetch(`${API_BASE_URL}/decimal/users/${testUserId}/withdrawals`);
    if (withdrawalsResponse.ok) {
      const withdrawals = await withdrawalsResponse.json();
      console.log('‚úÖ –í—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', withdrawals.length);
    } else {
      const error = await withdrawalsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤:', error);
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚úÖ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ DecimalChain —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã —Å–æ–∑–¥–∞—é—Ç—Å—è');
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testUserOperations()
    .then(success => {
      if (success) {
        console.log('\nüéâ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\nüí• –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testUserOperations }; 