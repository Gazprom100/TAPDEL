const { MongoClient } = require('mongodb');

function generateCleanMongoURI() {
  const uri = process.env.MONGODB_URI;
  if (!uri) {
    throw new Error('MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  return uri;
}

const MONGODB_URI = generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function debugBalance() {
  let client;
  
  try {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n');
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(MONGODB_DB);
    
    // 1. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è AIRDROPSVSDONUTS
    console.log('üë§ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è AIRDROPSVSDONUTS...');
    const user = await db.collection('users').findOne({
      $or: [
        { 'profile.telegramUsername': 'AIRDROPSVSDONUTS' },
        { 'profile.username': { $regex: /AIRDROPSVSDONUTS/i } }
      ]
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å AIRDROPSVSDONUTS –Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      // –ü–æ–∫–∞–∂–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
      const allUsers = await db.collection('users').find({}).toArray();
      console.log('\nüìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:');
      allUsers.forEach((u, i) => {
        console.log(`   ${i+1}. ${u.userId}: ${u.profile?.telegramUsername || u.profile?.username || '–±–µ–∑ –∏–º–µ–Ω–∏'}`);
      });
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!\n');
    
    // 2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìä –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    console.log('=' * 50);
    console.log(`   userId: ${user.userId}`);
    console.log(`   Telegram username: ${user.profile?.telegramUsername}`);
    console.log(`   Display name: ${user.profile?.username}`);
    console.log(`   Telegram ID: ${user.profile?.telegramId}`);
    console.log('');
    
    console.log('üí∞ –ë–ê–õ–ê–ù–°–´:');
    console.log(`   gameState.tokens (–∏–≥—Ä–æ–≤—ã–µ): ${user.gameState?.tokens || 0}`);
    console.log(`   gameState.highScore (—Ä–µ–π—Ç–∏–Ω–≥): ${user.gameState?.highScore || 0}`);
    console.log(`   gameBalance (DEL): ${user.gameBalance || 0}`);
    console.log('');
    
    console.log('üéÆ –ò–ì–†–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
    console.log(`   engineLevel: ${user.gameState?.engineLevel}`);
    console.log(`   gearboxLevel: ${user.gameState?.gearboxLevel}`);
    console.log(`   batteryLevel: ${user.gameState?.batteryLevel}`);
    console.log(`   hyperdriveLevel: ${user.gameState?.hyperdriveLevel}`);
    console.log(`   powerGridLevel: ${user.gameState?.powerGridLevel}`);
    console.log(`   lastSaved: ${user.gameState?.lastSaved}`);
    console.log('');
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('üí≥ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    const transactions = user.transactions || [];
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${transactions.length}`);
    if (transactions.length > 0) {
      console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
      transactions.slice(0, 5).forEach((tx, i) => {
        console.log(`     ${i+1}. ${tx.type}: ${tx.amount} DEL (${new Date(tx.timestamp).toLocaleString()})`);
      });
    }
    console.log('');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
    console.log('üì• –î–ï–ü–û–ó–ò–¢–´:');
    const deposits = await db.collection('deposits').find({ userId: user.userId }).toArray();
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${deposits.length}`);
    if (deposits.length > 0) {
      deposits.forEach((deposit, i) => {
        console.log(`     ${i+1}. ${deposit.amountRequested} DEL ‚Üí ${deposit.uniqueAmount} DEL`);
        console.log(`        Status: ${deposit.matched ? 'MATCHED' : 'WAITING'}`);
        console.log(`        TX: ${deposit.txHash || 'None'}`);
        console.log(`        Created: ${deposit.createdAt.toLocaleString()}`);
        console.log(`        Expires: ${deposit.expiresAt.toLocaleString()}`);
        console.log('');
      });
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥—ã
    console.log('üì§ –í–´–í–û–î–´:');
    const withdrawals = await db.collection('withdrawals').find({ userId: user.userId }).toArray();
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${withdrawals.length}`);
    if (withdrawals.length > 0) {
      withdrawals.forEach((withdrawal, i) => {
        console.log(`     ${i+1}. ${withdrawal.amount} DEL ‚Üí ${withdrawal.toAddress}`);
        console.log(`        Status: ${withdrawal.status}`);
        console.log(`        TX: ${withdrawal.txHash || 'None'}`);
        console.log(`        Requested: ${withdrawal.requestedAt.toLocaleString()}`);
        console.log(`        Processed: ${withdrawal.processedAt ? new Date(withdrawal.processedAt).toLocaleString() : 'Not yet'}`);
        console.log('');
      });
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    console.log('üèÜ –õ–ò–î–ï–†–ë–û–†–î:');
    const leaderboardEntry = await db.collection('leaderboard').findOne({ userId: user.userId });
    if (leaderboardEntry) {
      console.log(`   Rank: ${leaderboardEntry.rank}`);
      console.log(`   Tokens (rating): ${leaderboardEntry.tokens}`);
      console.log(`   Username: ${leaderboardEntry.username}`);
      console.log(`   Updated: ${leaderboardEntry.updatedAt.toLocaleString()}`);
    } else {
      console.log('   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ');
    }
    console.log('');
    
    // 7. –î–ò–ê–ì–ù–û–ó
    console.log('üî¨ –î–ò–ê–ì–ù–û–ó:');
    console.log('=' * 50);
    
    const gameTokens = user.gameState?.tokens || 0;
    const delBalance = user.gameBalance || 0;
    const highScore = user.gameState?.highScore || 0;
    
    console.log('üìã –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`   1. gameState.tokens (${gameTokens}) - —ç—Ç–æ –∏–≥—Ä–æ–≤—ã–µ –æ—á–∫–∏`);
    console.log(`   2. gameBalance (${delBalance}) - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π DEL –±–∞–ª–∞–Ω—Å`);
    console.log(`   3. highScore (${highScore}) - —ç—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ (–≤—Å–µ–≥–æ –Ω–∞—Ç–∞–ø–∞–Ω–æ)`);
    console.log('');
    
    if (gameTokens > 0 && delBalance === 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê:');
      console.log('   –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∏–≥—Ä–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã, –Ω–æ –Ω–µ—Ç DEL –±–∞–ª–∞–Ω—Å–∞');
      console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ refreshBalance() –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç gameBalance (0)');
      console.log('   –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç tokens (–∏–≥—Ä–æ–≤—ã–µ –æ—á–∫–∏)');
      console.log('');
      console.log('üîß –†–ï–®–ï–ù–ò–ï:');
      console.log('   –ù—É–∂–Ω–æ –ª–∏–±–æ:');
      console.log('   a) –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ tokens –≤ gameBalance (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –≤ DEL)');
      console.log('   b) –£–±—Ä–∞—Ç—å –ø–æ–∫–∞–∑ tokens –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ gameBalance');
      console.log('   c) –ü–æ–ø–æ–ª–Ω–∏—Ç—å gameBalance —á–µ—Ä–µ–∑ –¥–µ–ø–æ–∑–∏—Ç DEL');
    } else if (gameTokens === delBalance && delBalance > 0) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

debugBalance(); 