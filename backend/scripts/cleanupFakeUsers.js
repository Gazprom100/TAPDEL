require("dotenv").config(); const { MongoClient } = require("mongodb"); async function cleanupFakeUsers() { const client = new MongoClient(process.env.MONGODB_URI); try { await client.connect(); const db = client.db("tapdel"); console.log("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."); const result = await db.collection("users").deleteMany({ $or: [ { userId: { $regex: /^telegram-0+$/ } }, { userId: { $regex: /^telegram-1+$/ } }, { userId: { $regex: /^telegram-123+$/ } }, { userId: { $regex: /^fake-/i } }, { userId: { $regex: /^test/i } }, { userId: { $regex: /^demo/i } } ] }); console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`); const totalUsers = await db.collection("users").countDocuments(); console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`); } catch (error) { console.error("‚ùå –û—à–∏–±–∫–∞:", error); } finally { await client.close(); } } cleanupFakeUsers();
