const { spawn } = require('child_process');
const path = require('path');

class AutoFixAndRestart {
  constructor() {
    this.results = {
      timestamp: new Date(),
      steps: [],
      success: false
    };
  }

  async runScript(scriptName, description) {
    console.log(`\nüîÑ –ó–∞–ø—É—Å–∫: ${description}`);
    console.log('=' * 50);
    
    return new Promise((resolve, reject) => {
      const scriptPath = path.join(__dirname, scriptName);
      const child = spawn('node', [scriptPath], {
        stdio: 'inherit',
        cwd: __dirname
      });

      child.on('close', (code) => {
        if (code === 0) {
          console.log(`‚úÖ ${description} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          this.results.steps.push({
            step: description,
            status: 'success',
            exitCode: code
          });
          resolve(true);
        } else {
          console.log(`‚ùå ${description} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
          this.results.steps.push({
            step: description,
            status: 'error',
            exitCode: code
          });
          reject(new Error(`${description} failed with code ${code}`));
        }
      });

      child.on('error', (error) => {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${description}:`, error.message);
        this.results.steps.push({
          step: description,
          status: 'error',
          error: error.message
        });
        reject(error);
      });
    });
  }

  async runFullAutomation() {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ TAPDEL');
    console.log('=' * 60);
    console.log('–≠—Ç–∞–ø—ã:');
    console.log('1. üîç –î–æ—Å–∫–æ–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã');
    console.log('2. üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º');
    console.log('3. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
    console.log('4. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º');
    console.log('=' * 60);

    try {
      // –®–∞–≥ 1: –ê—É–¥–∏—Ç
      await this.runScript('comprehensiveAudit.js', '–î–æ—Å–∫–æ–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã');
      
      // –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await this.runScript('fixAllBalances.js', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º');
      
      // –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      await this.runScript('testSystem.js', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
      
      // –®–∞–≥ 4: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      console.log('\nüîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
      console.log('üìù –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
      console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
      console.log('=' * 50);
      
      await this.runScript('restartServer.js', '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
      
      this.results.success = true;
      console.log('\nüéâ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
      
    } catch (error) {
      console.error('\n‚ùå –û–®–ò–ë–ö–ê –í –ü–†–û–¶–ï–°–°–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:', error.message);
      this.results.success = false;
      
      console.log('\nüìä –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
      this.results.steps.forEach((step, index) => {
        const status = step.status === 'success' ? '‚úÖ' : '‚ùå';
        console.log(`${index + 1}. ${status} ${step.step}`);
      });
      
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º');
      console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ Redis');
      console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
const automation = new AutoFixAndRestart();
automation.runFullAutomation(); 