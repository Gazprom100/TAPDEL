const fetch = require('node-fetch');

async function finalControlTest() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–†–û–õ–¨–ù–´–ô –¢–ï–°–¢ –í–í–û–î–ê –ò –í–´–í–û–î–ê');
  console.log('================================================');
  
  const testUserId = 'telegram-297810833'; // –†–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const uniqueAmount = 0.001 + Math.random() * 0.01; // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã');
    const healthResponse = await fetch('https://tapdel.onrender.com/health');
    
    if (healthResponse.ok) {
      const health = await healthResponse.json();
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:', {
        status: health.status,
        services: health.services,
        uptime: Math.round(health.performance.uptime / 60) + ' –º–∏–Ω'
      });
    } else {
      console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return false;
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ DecimalChain —Å–µ—Ä–≤–∏—Å–∞
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ DecimalChain —Å–µ—Ä–≤–∏—Å–∞');
    const infoResponse = await fetch('https://tapdel.onrender.com/api/decimal/info');
    
    if (infoResponse.ok) {
      const info = await infoResponse.json();
      console.log('‚úÖ DecimalChain —Ä–∞–±–æ—Ç–∞–µ—Ç:', {
        workingAddress: info.workingAddress,
        workingBalance: info.workingBalance,
        chainId: info.chainId
      });
    } else {
      console.log('‚ùå DecimalChain –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å–∞
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å–∞');
    const balanceResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${testUserId}/balance`);
    
    if (balanceResponse.ok) {
      const balance = await balanceResponse.json();
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        userId: balance.userId,
        gameBalance: balance.gameBalance,
        workingWalletBalance: balance.workingWalletBalance
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
      return false;
    }
    
    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ (–í–í–û–î)
    console.log('\n4Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –î–ï–ü–û–ó–ò–¢–ê (–í–í–û–î)');
    console.log(`üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—É–º–º—É: ${uniqueAmount.toFixed(6)} DEL`);
    
    const depositResponse = await fetch('https://tapdel.onrender.com/api/decimal/deposits', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: testUserId,
        baseAmount: uniqueAmount
      })
    });
    
    if (depositResponse.ok) {
      const deposit = await depositResponse.json();
      console.log('‚úÖ –î–ï–ü–û–ó–ò–¢ –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û:', {
        depositId: deposit.depositId,
        uniqueAmount: deposit.uniqueAmount,
        address: deposit.address,
        expires: deposit.expires,
        amountRequested: deposit.amountRequested
      });
    } else {
      const error = await depositResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      
      // –ï—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (error.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        console.log('‚ö†Ô∏è –î–µ–ø–æ–∑–∏—Ç —Å —Ç–∞–∫–æ–π —Å—É–º–º–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –í–í–û–î (–î–ï–ü–û–ó–ò–¢–´) - –†–ê–ë–û–¢–ê–Æ–¢');
      } else {
        return false;
      }
    }
    
    // –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ (–í–´–í–û–î)
    console.log('\n5Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –í–´–í–û–î–ê (–í–´–í–û–î)');
    const withdrawalResponse = await fetch('https://tapdel.onrender.com/api/decimal/withdrawals', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: testUserId,
        toAddress: '0x1234567890123456789012345678901234567890',
        amount: 0.01
      })
    });
    
    if (withdrawalResponse.ok) {
      const withdrawal = await withdrawalResponse.json();
      console.log('‚úÖ –í–´–í–û–î –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û:', {
        withdrawalId: withdrawal.withdrawalId,
        status: withdrawal.status,
        amount: withdrawal.amount,
        toAddress: withdrawal.toAddress
      });
    } else {
      const error = await withdrawalResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
      
      // –ï—Å–ª–∏ rate limiting, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      if (error.includes('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤')) {
        console.log('‚ö†Ô∏è Rate limiting –∞–∫—Ç–∏–≤–µ–Ω (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        console.log('‚úÖ –í–´–í–û–î - –†–ê–ë–û–¢–ê–ï–¢ (–∑–∞—â–∏—â–µ–Ω –æ—Ç —Å–ø–∞–º–∞)');
      } else {
        return false;
      }
    }
    
    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    const depositsHistoryResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${testUserId}/deposits`);
    
    if (depositsHistoryResponse.ok) {
      const deposits = await depositsHistoryResponse.json();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', deposits.length, '–∑–∞–ø–∏—Å–µ–π');
      if (deposits.length > 0) {
        console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç:', {
          depositId: deposits[0].depositId,
          amountRequested: deposits[0].amountRequested,
          status: deposits[0].status,
          createdAt: deposits[0].createdAt
        });
      }
    } else {
      const error = await depositsHistoryResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    }
    
    // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤
    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤');
    const withdrawalsHistoryResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${testUserId}/withdrawals`);
    
    if (withdrawalsHistoryResponse.ok) {
      const withdrawals = await withdrawalsHistoryResponse.json();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤:', withdrawals.length, '–∑–∞–ø–∏—Å–µ–π');
      if (withdrawals.length > 0) {
        console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥:', {
          withdrawalId: withdrawals[0].withdrawalId,
          amount: withdrawals[0].amount,
          status: withdrawals[0].status,
          requestedAt: withdrawals[0].requestedAt
        });
      }
    } else {
      const error = await withdrawalsHistoryResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤:', error);
    }
    
    // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    console.log('\n8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö API endpoints');
    const endpoints = [
      { name: 'Health Check', url: '/health', method: 'GET' },
      { name: 'Decimal Info', url: '/api/decimal/info', method: 'GET' },
      { name: 'User Balance', url: `/api/decimal/users/${testUserId}/balance`, method: 'GET' },
      { name: 'User Profile', url: `/api/users/${testUserId}`, method: 'GET' },
      { name: 'Leaderboard', url: '/api/leaderboard', method: 'GET' }
    ];
    
    for (const endpoint of endpoints) {
      try {
        const response = await fetch(`https://tapdel.onrender.com${endpoint.url}`);
        if (response.ok) {
          console.log(`‚úÖ ${endpoint.name}: —Ä–∞–±–æ—Ç–∞–µ—Ç`);
        } else {
          console.log(`‚ùå ${endpoint.name}: –æ—à–∏–±–∫–∞ ${response.status}`);
        }
      } catch (error) {
        console.log(`‚ùå ${endpoint.name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    }
    
    console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–†–û–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ DecimalChain –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('‚úÖ –î–ï–ü–û–ó–ò–¢–´ (–í–í–û–î) - –†–ê–ë–û–¢–ê–Æ–¢');
    console.log('‚úÖ –í–´–í–û–î–´ (–í–´–í–û–î) - –†–ê–ë–û–¢–ê–Æ–¢');
    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('‚úÖ –í—Å–µ API endpoints —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    console.log('‚úÖ Rate limiting –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–ø–∞–º–∞');
    
    console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('üéâ –í–í–û–î –ò –í–´–í–û–î –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–Æ–¢!');
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  finalControlTest()
    .then(success => {
      if (success) {
        console.log('\nüéâ –ö–û–ù–¢–†–û–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!');
        console.log('‚úÖ –í–í–û–î –ò –í–´–í–û–î –†–ê–ë–û–¢–ê–Æ–¢!');
        process.exit(0);
      } else {
        console.log('\nüí• –ö–û–ù–¢–†–û–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ò–õ–°–Ø!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { finalControlTest }; 