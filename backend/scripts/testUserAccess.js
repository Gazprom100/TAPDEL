const fetch = require('node-fetch');

async function testUserAccess() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  console.log('=====================================');
  
  const realUserId = 'telegram-297810833'; // –†–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const profileResponse = await fetch(`https://tapdel.onrender.com/api/users/${realUserId}`);
    
    if (profileResponse.ok) {
      const profile = await profileResponse.json();
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω:', {
        userId: profile.userId,
        username: profile.profile?.username,
        tokens: profile.gameState?.tokens,
        telegramId: profile.profile?.telegramId
      });
    } else {
      const error = await profileResponse.text();
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', error);
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const balanceResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${realUserId}/balance`);
    
    if (balanceResponse.ok) {
      const balance = await balanceResponse.json();
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        userId: balance.userId,
        gameBalance: balance.gameBalance,
        workingWalletBalance: balance.workingWalletBalance
      });
    } else {
      const error = await balanceResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const depositsResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${realUserId}/deposits`);
    
    if (depositsResponse.ok) {
      const deposits = await depositsResponse.json();
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', deposits.length, '–∑–∞–ø–∏—Å–µ–π');
      if (deposits.length > 0) {
        console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç:', {
          depositId: deposits[0].depositId,
          amountRequested: deposits[0].amountRequested,
          status: deposits[0].status,
          createdAt: deposits[0].createdAt
        });
      }
    } else {
      const error = await depositsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const withdrawalsResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${realUserId}/withdrawals`);
    
    if (withdrawalsResponse.ok) {
      const withdrawals = await withdrawalsResponse.json();
      console.log('‚úÖ –í—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', withdrawals.length, '–∑–∞–ø–∏—Å–µ–π');
      if (withdrawals.length > 0) {
        console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–≤–æ–¥:', {
          withdrawalId: withdrawals[0].withdrawalId,
          amount: withdrawals[0].amount,
          status: withdrawals[0].status,
          requestedAt: withdrawals[0].requestedAt
        });
      }
    } else {
      const error = await withdrawalsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤:', error);
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞');
    const newDepositResponse = await fetch('https://tapdel.onrender.com/api/decimal/deposits', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: realUserId,
        baseAmount: 0.1
      })
    });
    
    if (newDepositResponse.ok) {
      const newDeposit = await newDepositResponse.json();
      console.log('‚úÖ –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:', {
        depositId: newDeposit.depositId,
        uniqueAmount: newDeposit.uniqueAmount,
        address: newDeposit.address,
        expires: newDeposit.expires
      });
    } else {
      const error = await newDepositResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    }
    
    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ (–µ—Å–ª–∏ rate limiter –ø–æ–∑–≤–æ–ª—è–µ—Ç)
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞');
    const newWithdrawalResponse = await fetch('https://tapdel.onrender.com/api/decimal/withdrawals', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: realUserId,
        toAddress: '0x1234567890123456789012345678901234567890',
        amount: 0.1
      })
    });
    
    if (newWithdrawalResponse.ok) {
      const newWithdrawal = await newWithdrawalResponse.json();
      console.log('‚úÖ –ù–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω:', {
        withdrawalId: newWithdrawal.withdrawalId,
        status: newWithdrawal.status,
        amount: newWithdrawal.amount,
        toAddress: newWithdrawal.toAddress
      });
    } else {
      const error = await newWithdrawalResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚úÖ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã —Å–æ–∑–¥–∞—é—Ç—Å—è');
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã');
    console.log('‚ö†Ô∏è Rate limiting –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testUserAccess()
    .then(success => {
      if (success) {
        console.log('\nüéâ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.log('\nüí• –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testUserAccess }; 