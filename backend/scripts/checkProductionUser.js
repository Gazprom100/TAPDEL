const fetch = require('node-fetch');

async function checkProductionUser() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ production');
  console.log('=====================================');
  
  const testUserId = 'telegram-123456789';
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const balanceResponse = await fetch(`https://tapdel.onrender.com/api/decimal/users/${testUserId}/balance`);
    
    if (balanceResponse.ok) {
      const balance = await balanceResponse.json();
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω:', balance);
    } else {
      const error = await balanceResponse.text();
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', error);
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    const userResponse = await fetch(`https://tapdel.onrender.com/api/users/${testUserId}`);
    
    if (userResponse.ok) {
      const user = await userResponse.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API:', {
        userId: user.userId,
        tokens: user.gameState?.tokens,
        telegramId: user.profile?.telegramId
      });
    } else {
      const error = await userResponse.text();
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API:', error);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');
    const leaderboardResponse = await fetch('https://tapdel.onrender.com/api/leaderboard');
    
    if (leaderboardResponse.ok) {
      const leaderboard = await leaderboardResponse.json();
      console.log('‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω:', leaderboard.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      
      const testUserInLeaderboard = leaderboard.find(u => u.userId === testUserId);
      if (testUserInLeaderboard) {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:', {
          username: testUserInLeaderboard.username,
          tokens: testUserInLeaderboard.tokens,
          rank: testUserInLeaderboard.rank
        });
      } else {
        console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ');
      }
    } else {
      const error = await leaderboardResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
    }
    
    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞');
    const depositResponse = await fetch('https://tapdel.onrender.com/api/decimal/deposits', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: testUserId,
        baseAmount: 1.0
      })
    });
    
    if (depositResponse.ok) {
      const deposit = await depositResponse.json();
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:', {
        depositId: deposit.depositId,
        uniqueAmount: deposit.uniqueAmount,
        address: deposit.address
      });
    } else {
      const error = await depositResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    }
    
    // –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞');
    const withdrawalResponse = await fetch('https://tapdel.onrender.com/api/decimal/withdrawals', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId: testUserId,
        toAddress: '0x1234567890123456789012345678901234567890',
        amount: 0.5
      })
    });
    
    if (withdrawalResponse.ok) {
      const withdrawal = await withdrawalResponse.json();
      console.log('‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω:', {
        withdrawalId: withdrawal.withdrawalId,
        status: withdrawal.status,
        amount: withdrawal.amount
      });
    } else {
      const error = await withdrawalResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    }
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  checkProductionUser()
    .then(success => {
      if (success) {
        console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ production –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        process.exit(0);
      } else {
        console.log('\nüí• –ü—Ä–æ–≤–µ—Ä–∫–∞ production –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { checkProductionUser }; 