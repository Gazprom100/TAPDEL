const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config({ path: './.env' });

const telegramRoutes = require('./routes/telegram');
const apiRoutes = require('./routes/api');
const decimalRoutes = require('./routes/decimal');
const botService = require('./services/botService');
const decimalService = require('./services/decimalService');

// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
const databaseConfig = require('./config/database');
const cacheService = require('./services/cacheService');

// –í–†–ï–ú–ï–ù–ù–û: –£—Å–ª–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ rate limiter (–¥–ª—è deployment)
let rateLimiterMiddleware = null;
try {
  rateLimiterMiddleware = require('./middleware/rateLimiter');
} catch (error) {
  console.warn('‚ö†Ô∏è Rate limiter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏):', error.message);
}

const app = express();
const PORT = process.env.PORT || 3001; // –ò–∑–º–µ–Ω–∏–ª–∏ –ø–æ—Ä—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –õ–û–ì–ì–ï–† ===
app.use((req, res, next) => {
  console.log('==> GLOBAL:', req.method, req.path);
  next();
});

// Middleware
app.use(cors());
app.use(express.json());

// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Rate limiting middleware (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
// –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
// if (rateLimiterMiddleware) {
//   app.use(rateLimiterMiddleware.getLoggingMiddleware());
//   app.use(rateLimiterMiddleware.getDynamicLimiter());
// } else {
//   console.log('‚ö†Ô∏è Rate limiting –æ—Ç–∫–ª—é—á–µ–Ω (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)');
// }
console.log('‚ö†Ô∏è Rate limiting –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');

// === API ROUTES (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ, –ø–æ—Ç–æ–º –æ–±—â–∏–µ) ===
console.log('üîó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é API —Ä–æ—É—Ç—ã...');



// 1. –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–æ—É—Ç—ã (–±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ)
app.use('/api/telegram', (req, res, next) => { 
  console.log('‚û°Ô∏è /api/telegram', req.method, req.path); 
  next(); 
}, telegramRoutes);

app.use('/api/decimal', (req, res, next) => { 
  console.log('‚û°Ô∏è /api/decimal', req.method, req.path); 
  next(); 
}, decimalRoutes);

// 2. –û–±—â–∏–π API —Ä–æ—É—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å—Ä–µ–¥–∏ API)
app.use('/api', (req, res, next) => { 
  console.log('‚û°Ô∏è /api', req.method, req.path); 
  next(); 
}, apiRoutes);

// === 404 –¥–ª—è API (–ø–æ—Å–ª–µ –≤—Å–µ—Ö API-—Ä–æ—É—Ç–æ–≤!) ===
app.use('/api/*', (req, res) => {
  console.log('‚ùå 404 API middleware:', req.method, req.path);
  res.status(404).json({
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.path,
    timestamp: new Date().toISOString()
  });
});

// === STATIC FILES (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-API) ===
app.use((req, res, next) => {
  if (req.path.startsWith('/api/')) return next();
  express.static(path.join(__dirname, '../dist'))(req, res, next);
});

// === SPA FALLBACK (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-API) ===
app.get('*', (req, res, next) => {
  if (req.path.startsWith('/api/')) return next();
  res.sendFile(path.join(__dirname, '../dist/index.html'));
});

// Start server
const startServer = () => {
  return new Promise(async (resolve, reject) => {
    try {
      // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await databaseConfig.connect();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      await cacheService.initialize();
      
      // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º rate limiting (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      if (rateLimiterMiddleware) {
        await rateLimiterMiddleware.initialize();
      }
      
      // Initialize bot before starting server (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
      await botService.initialize();

      // Initialize DecimalChain service
      let decimalInitialized = false;
      try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalChain —Å–µ—Ä–≤–∏—Å...');
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        console.log(`   REDIS_URL: ${process.env.REDIS_URL ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
        console.log(`   DECIMAL_WORKING_ADDRESS: ${process.env.DECIMAL_WORKING_ADDRESS ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
        console.log(`   DECIMAL_WORKING_PRIVKEY_ENC: ${process.env.DECIMAL_WORKING_PRIVKEY_ENC ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
        console.log(`   DECIMAL_KEY_PASSPHRASE: ${process.env.DECIMAL_KEY_PASSPHRASE ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const initPromise = decimalService.initialize();
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout: DecimalChain –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 30 —Å–µ–∫—É–Ω–¥')), 30000)
        );
        
        await Promise.race([initPromise, timeoutPromise]);
        decimalInitialized = true;
        console.log('‚úÖ DecimalChain —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
      } catch (error) {
        console.error('‚ö†Ô∏è DecimalChain —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        console.error('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:', error);
        console.log('‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ DecimalChain —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞');
        console.log('üîß –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ DecimalChain –∏—Å–ø—Ä–∞–≤—å—Ç–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º fallback middleware –¥–ª—è DecimalChain
        const decimalUnavailableMiddleware = (req, res) => {
          res.status(503).json({ 
            error: 'DecimalChain —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            details: '–ü—Ä–æ–±–ª–µ–º–∞ —Å Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ REDIS_URL',
            status: 'service_unavailable',
            configured: false
          });
        };
        
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º DecimalChain —Ä–æ—É—Ç—ã –Ω–∞ fallback
        app.use('/api/decimal', decimalUnavailableMiddleware);
      }


      const server = app.listen(PORT, async () => {
        console.log('==> Server Configuration:');
        console.log(`Express Port: ${PORT}`);
        console.log(`Environment: ${process.env.NODE_ENV}`);
        console.log(`App URL: ${process.env.APP_URL}`);
        console.log(`Bot Status: ${botService.bot ? 'Active' : 'Disabled'}`);
        console.log(`DecimalChain Status: ${decimalInitialized ? 'Active' : 'Disabled'}`);
        
        // –ü–û–î–ö–õ–Æ–ß–ê–ï–ú –ë–ê–ó–£ –î–ê–ù–ù–´–• –ö TELEGRAM –ë–û–¢–£
        if (botService.bot) {
          try {
            const { MongoClient } = require('mongodb');
            const generateCleanMongoURI = () => {
              const username = 'TAPDEL';
              const password = 'fpz%sE62KPzmHfM';
              const cluster = 'cluster0.ejo8obw.mongodb.net';
              const database = 'tapdel';
              
              const encodedPassword = encodeURIComponent(password);
              return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
            };

            const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
            const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';
            
            const client = new MongoClient(MONGODB_URI);
            await client.connect();
            const database = client.db(MONGODB_DB);
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î –∫ –±–æ—Ç—É
            botService.setDatabase(database);
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ Telegram –±–æ—Ç—É');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ DecimalChain –µ—Å–ª–∏ –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (decimalInitialized) {
              await decimalService.startWatching(database);
              console.log('üîç DecimalChain –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ë–î –∫ –±–æ—Ç—É:', error);
          }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ DecimalChain –µ—Å–ª–∏ –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (decimalInitialized) {
          try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
            const { MongoClient } = require('mongodb');
            const generateCleanMongoURI = () => {
              const username = 'TAPDEL';
              const password = 'fpz%sE62KPzmHfM';
              const cluster = 'cluster0.ejo8obw.mongodb.net';
              const database = 'tapdel';
              
              const encodedPassword = encodeURIComponent(password);
              return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
            };

            const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
            const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';
            
            const client = new MongoClient(MONGODB_URI);
            await client.connect();
            const database = client.db(MONGODB_DB);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫—á–µ–π–Ω–∞
            await decimalService.startWatching(database);
            console.log('üîç DecimalChain –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ DecimalChain –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
          }
        }
        
        console.log('==> Server is ready to handle requests');
        resolve(server);
      }).on('error', (error) => {
        if (error.code === 'EADDRINUSE') {
          console.error(`Port ${PORT} is already in use`);
        } else {
          console.error('Server error:', error);
        }
        reject(error);
      });
    } catch (error) {
      console.error('Failed to initialize services:', error);
      reject(error);
    }
  });
};

// Graceful shutdown
const gracefulShutdown = async (server) => {
  console.log('\nStarting graceful shutdown...');
  
  await botService.shutdown();
  await decimalService.disconnect();
  
  if (server) {
    server.close(() => {
      console.log('HTTP server closed');
      process.exit(0);
    });
    
    setTimeout(() => {
      console.error('Could not close connections in time, forcefully shutting down');
      process.exit(1);
    }, 5000);
  } else {
    process.exit(0);
  }
};

// Start server
let server = null;

startServer()
  .then((s) => {
    server = s;
  })
  .catch((error) => {
    console.error('Failed to start server:', error);
    process.exit(1);
  });

// Signal handlers
process.on('SIGTERM', () => gracefulShutdown(server));
process.on('SIGINT', () => gracefulShutdown(server));

// Error handlers
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  gracefulShutdown(server);
}); 