const express = require('express');
const { MongoClient } = require('mongodb');
const decimalService = require('../services/decimalService');
const config = require('../config/decimal');
const tokenService = require('../services/tokenService');
const router = express.Router();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

let client = null;
let db = null;

const connectToDatabase = async () => {
  if (!client) {
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    db = client.db(MONGODB_DB);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    await Promise.all([
      db.collection('deposits').createIndex({ userId: 1 }),
      db.collection('deposits').createIndex({ uniqueAmount: 1 }, { unique: true }),
      db.collection('deposits').createIndex({ matched: 1 }),
      db.collection('deposits').createIndex({ expiresAt: 1 }, { expireAfterSeconds: 0 }),
      db.collection('withdrawals').createIndex({ userId: 1 }),
      db.collection('withdrawals').createIndex({ status: 1 })
    ]);
  }
  return db;
};

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
router.get('/test', (req, res) => {
  res.json({
    message: 'DecimalChain API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    config: {
      workingAddress: config.WORKING_ADDRESS,
      chainId: config.CHAIN_ID,
      confirmations: config.CONFIRMATIONS
    }
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Decimal —Å–µ—Ä–≤–∏—Å–∞
router.get('/status', (req, res) => {
  try {
    res.json({
      success: true,
      status: 'active',
      message: 'Decimal —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã
router.get('/deposits', async (req, res) => {
  try {
    const database = await connectToDatabase();
    const deposits = await database.collection('deposits').find({}).sort({ createdAt: -1 }).limit(100).toArray();
    
    res.json({
      success: true,
      deposits: deposits.map(deposit => ({
        id: deposit._id.toString(),
        userId: deposit.userId,
        amount: deposit.amountRequested,
        status: deposit.matched ? 'completed' : 'pending',
        createdAt: deposit.createdAt?.toISOString(),
        txHash: deposit.txHash
      }))
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—ã–≤–æ–¥—ã
router.get('/withdrawals', async (req, res) => {
  try {
    const database = await connectToDatabase();
    const withdrawals = await database.collection('withdrawals').find({}).sort({ requestedAt: -1 }).limit(100).toArray();
    
    res.json({
      success: true,
      withdrawals: withdrawals.map(withdrawal => ({
        id: withdrawal._id.toString(),
        userId: withdrawal.userId,
        amount: withdrawal.amount,
        status: withdrawal.status,
        createdAt: withdrawal.requestedAt?.toISOString(),
        processedAt: withdrawal.processedAt?.toISOString(),
        txHash: withdrawal.txHash
      }))
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// === –î–ï–ü–û–ó–ò–¢–´ ===

// –°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç
router.post('/deposits', async (req, res) => {
  try {
    const { userId, baseAmount } = req.body;
    
    if (!userId || !baseAmount) {
      return res.status(400).json({ 
        error: 'userId –∏ baseAmount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    if (baseAmount < 0.001) {
      const activeToken = await tokenService.getActiveToken();
      return res.status(400).json({ 
        error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: 0.001 ${activeToken.symbol}` 
      });
    }

    const database = await connectToDatabase();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—É–º–º—É
    const uniqueAmount = config.generateUniqueAmount(baseAmount, userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å —Ç–∞–∫–æ–π —Å—É–º–º–æ–π
    const existingDeposit = await database.collection('deposits').findOne({
      uniqueAmount: uniqueAmount,
      expiresAt: { $gt: new Date() }
    });

    if (existingDeposit) {
      return res.status(409).json({ 
        error: '–î–µ–ø–æ–∑–∏—Ç —Å —Ç–∞–∫–æ–π —Å—É–º–º–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
    const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç
    
    const deposit = {
      userId: userId,
      amountRequested: baseAmount,
      uniqueAmount: uniqueAmount,
      txHash: null,
      matched: false,
      confirmations: 0,
      createdAt: new Date(),
      expiresAt: expiresAt
    };

    const result = await database.collection('deposits').insertOne(deposit);
    
    const activeToken = await tokenService.getActiveToken();
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω –¥–µ–ø–æ–∑–∏—Ç: ${userId} ‚Üí ${uniqueAmount} ${activeToken.symbol}`);

    res.json({
      depositId: result.insertedId.toString(),
      uniqueAmount: uniqueAmount,
      address: config.WORKING_ADDRESS,
      expires: expiresAt.toISOString(),
      amountRequested: baseAmount
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞
router.get('/deposits/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const database = await connectToDatabase();
    
    const deposit = await database.collection('deposits').findOne({
      _id: new (require('mongodb').ObjectId)(id)
    });

    if (!deposit) {
      return res.status(404).json({ error: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      depositId: deposit._id.toString(),
      userId: deposit.userId,
      amountRequested: deposit.amountRequested,
      uniqueAmount: deposit.uniqueAmount,
      matched: deposit.matched,
      confirmations: deposit.confirmations,
      txHash: deposit.txHash,
      status: deposit.status === 'expired' ? 'expired' :
        (deposit.matched ? 
          (deposit.confirmations >= config.CONFIRMATIONS ? 'confirmed' : 'pending') : 
          'waiting'),
      createdAt: deposit.createdAt,
      expiresAt: deposit.expiresAt
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/users/:userId/deposits', async (req, res) => {
  try {
    const { userId } = req.params;
    const database = await connectToDatabase();
    
    const deposits = await database.collection('deposits')
      .find({ userId: userId })
      .sort({ createdAt: -1 })
      .limit(50)
      .toArray();

    const result = deposits.map(deposit => ({
      depositId: deposit._id.toString(),
      amountRequested: deposit.amountRequested,
      uniqueAmount: deposit.uniqueAmount,
      matched: deposit.matched,
      confirmations: deposit.confirmations,
      txHash: deposit.txHash,
      status: deposit.status === 'expired' ? 'expired' :
        (deposit.matched ? 
          (deposit.confirmations >= config.CONFIRMATIONS ? 'confirmed' : 'pending') : 
          'waiting'),
      createdAt: deposit.createdAt,
      expiresAt: deposit.expiresAt
    }));

    res.json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// === –í–´–í–û–î–´ ===

// –°–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥
router.post('/withdrawals', async (req, res) => {
  try {
    const { userId, toAddress, amount } = req.body;
    
    if (!userId || !toAddress || !amount) {
      return res.status(400).json({ 
        error: 'userId, toAddress –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    if (amount < 0.001) {
      const activeToken = await tokenService.getActiveToken();
      return res.status(400).json({ 
        error: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 0.001 ${activeToken.symbol}` 
      });
    }

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å xdc –∏–ª–∏ 0x, 42 —Å–∏–º–≤–æ–ª–∞)
    if (!toAddress.match(/^(xdc|0x)[0-9a-fA-F]{40}$/)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞' 
      });
    }

    const database = await connectToDatabase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await database.collection('users').findOne({ userId: userId });
    
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const gameBalance = user.gameState?.tokens || 0;
    
    if (gameBalance < amount) {
      const activeToken = await tokenService.getActiveToken();
      return res.status(400).json({ 
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${gameBalance} ${activeToken.symbol}` 
      });
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await database.collection('users').updateOne(
      { userId: userId },
      { $set: { "gameState.tokens": gameBalance - amount, updatedAt: new Date() } }
    );

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    const withdrawal = {
      userId: userId,
      toAddress: toAddress,
      amount: amount,
      txHash: null,
      status: 'queued',
      requestedAt: new Date(),
      processedAt: null
    };

    const result = await database.collection('withdrawals').insertOne(withdrawal);
    
    const activeToken = await tokenService.getActiveToken();
    console.log(`üí∏ –°–æ–∑–¥–∞–Ω –≤—ã–≤–æ–¥: ${userId} ‚Üí ${amount} ${activeToken.symbol} –Ω–∞ ${toAddress}`);

    res.json({
      withdrawalId: result.insertedId.toString(),
      status: 'queued',
      amount: amount,
      toAddress: toAddress
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
router.get('/withdrawals/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const database = await connectToDatabase();
    
    const withdrawal = await database.collection('withdrawals').findOne({
      _id: new (require('mongodb').ObjectId)(id)
    });

    if (!withdrawal) {
      return res.status(404).json({ error: '–í—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      withdrawalId: withdrawal._id.toString(),
      userId: withdrawal.userId,
      toAddress: withdrawal.toAddress,
      amount: withdrawal.amount,
      status: withdrawal.status,
      txHash: withdrawal.txHash,
      requestedAt: withdrawal.requestedAt,
      processedAt: withdrawal.processedAt
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/users/:userId/withdrawals', async (req, res) => {
  try {
    const { userId } = req.params;
    const database = await connectToDatabase();
    
    const withdrawals = await database.collection('withdrawals')
      .find({ userId: userId })
      .sort({ requestedAt: -1 })
      .limit(50)
      .toArray();

    const result = withdrawals.map(withdrawal => ({
      withdrawalId: withdrawal._id.toString(),
      toAddress: withdrawal.toAddress,
      amount: withdrawal.amount,
      status: withdrawal.status,
      txHash: withdrawal.txHash,
      requestedAt: withdrawal.requestedAt,
      processedAt: withdrawal.processedAt
    }));

    res.json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// === –ë–ê–õ–ê–ù–° ===

// –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω)
router.get('/users/:userId/balance', async (req, res) => {
  try {
    const { userId } = req.params;
    const database = await connectToDatabase();
    
    const user = await database.collection('users').findOne({ userId: userId });
    
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const gameBalance = user.gameState?.tokens || 0;
    const activeToken = await tokenService.getActiveToken();

    res.json({
      userId: userId,
      gameBalance: gameBalance,
      tokenSymbol: activeToken.symbol,
      tokenName: activeToken.name,
      workingWalletBalance: await decimalService.getWorkingBalance()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// === –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–µ–º –∫–æ—à–µ–ª—å–∫–µ
router.get('/info', async (req, res) => {
  try {
    res.json({
      workingAddress: config.WORKING_ADDRESS,
      chainId: config.CHAIN_ID,
      rpcUrl: config.RPC_URL,
      confirmationsRequired: config.CONFIRMATIONS,
      workingBalance: await decimalService.getWorkingBalance()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router; 