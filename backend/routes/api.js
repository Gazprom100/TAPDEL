const express = require('express');
const { MongoClient } = require('mongodb');
require('dotenv').config();
const router = express.Router();

// –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º cache service
const cacheService = require('../services/cacheService');
const tokenService = require('../services/tokenService');

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const formatUserName = (username, telegramFirstName, telegramLastName, telegramUsername, userId) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ null, –Ω–µ undefined –∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞ 'null'
  const isValidValue = (value) => 
    value !== null && value !== undefined && value !== 'null' && 
    typeof value === 'string' && value.trim() !== '';

  if (isValidValue(username)) return username;
  
  if (isValidValue(telegramFirstName) && isValidValue(telegramLastName)) {
    return `${telegramFirstName} ${telegramLastName}`;
  }
  
  if (isValidValue(telegramFirstName)) return telegramFirstName;
  if (isValidValue(telegramUsername)) return telegramUsername;
  
  return `–ò–≥—Ä–æ–∫ ${userId?.slice(-4) || '0000'}`;
};

const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

// Health check —Ä–æ—É—Ç
router.get('/health', async (req, res) => {
  try {
    const database = await connectToDatabase();
    const userCount = await database.collection('users').countDocuments();
    const leaderboardCount = await database.collection('leaderboard').countDocuments();
    
    res.json({
      status: 'OK',
      mongodb: 'connected',
      userCount,
      leaderboardCount,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      status: 'ERROR',
      mongodb: 'disconnected',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç
router.get('/test', (req, res) => {
  res.json({
    message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    endpoint: '/api/test'
  });
});

let client = null;
let db = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const connectToDatabase = async () => {
  if (!client) {
    try {
      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
      console.log('üìç URI –º–∞—Å–∫–∞:', MONGODB_URI.replace(/\/\/.*@/, '//***:***@'));
      
      client = new MongoClient(MONGODB_URI);
      await client.connect();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await client.db().admin().ping();
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
      
      db = client.db(MONGODB_DB);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      await Promise.all([
        db.collection('users').createIndex({ userId: 1 }, { unique: true }),
        db.collection('users').createIndex({ telegramId: 1 }, { sparse: true }),
        db.collection('leaderboard').createIndex({ tokens: -1 }),
        db.collection('leaderboard').createIndex({ userId: 1 }, { unique: true }),
        db.collection('leaderboard').createIndex({ telegramId: 1 }, { sparse: true })
      ]);
      
      console.log('üìä –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
      throw error;
    }
  }
  return db;
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/users/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const database = await connectToDatabase();
    
    if (!database) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return res.status(503).json({ message: 'Database unavailable' });
    }
    
    const user = await database.collection('users').findOne({ userId });
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    res.json(user);
  } catch (error) {
    console.error('Error getting user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/users/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const userData = req.body;
    const database = await connectToDatabase();
    
    if (!database) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return res.status(503).json({ message: 'Database unavailable' });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gameBalance –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (userData.gameBalance === undefined) {
      const existingUser = await database.collection('users').findOne({ userId });
      if (!existingUser || existingUser.gameBalance === undefined) {
        userData.gameBalance = 0;
      }
    }
    
    await database.collection('users').updateOne(
      { userId },
      { 
        $set: { 
          ...userData,
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    
    res.json({ message: 'User updated successfully' });
  } catch (error) {
    console.error('Error updating user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ (–¥–ª—è DecimalService)
router.post('/users/:userId/deposit', async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
  if (process.env.INTERNAL_SECRET && req.headers['x-internal-secret'] !== process.env.INTERNAL_SECRET) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  try {
    const { userId } = req.params;
    const { amount } = req.body;
    const database = await connectToDatabase();
    
    if (!amount || amount <= 0) {
      return res.status(400).json({ error: 'Invalid amount' });
    }
    
            const activeToken = await tokenService.getActiveToken();
    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ: ${userId} +${amount} ${activeToken.symbol}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await database.collection('users').findOne({ userId });
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ tokens –≤ gameState (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)
    const updatedGameState = {
      ...user.gameState,
      tokens: (user.gameState?.tokens || 0) + amount,
      lastSaved: new Date()
    };
    
    await database.collection('users').updateOne(
      { userId },
      {
        $set: {
          gameState: updatedGameState,
          updatedAt: new Date()
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    await updateUserInLeaderboard(database, user, updatedGameState.tokens);
    
    console.log(`‚úÖ –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${userId} tokens=${updatedGameState.tokens}`);
    
    res.json({ 
      success: true,
      newTokens: updatedGameState.tokens
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤)
router.post('/users/:userId/initialize', async (req, res) => {
  try {
    const { userId } = req.params;
    const { profile, gameState, telegramData } = req.body;
    const database = await connectToDatabase();
    
    console.log(`üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await database.collection('users').findOne({ userId });
    if (existingUser) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = {
      userId: userId,
      profile: profile || {
        userId: userId,
        username: `–ò–≥—Ä–æ–∫ ${userId.slice(-4)}`,
        maxEnergy: 100,
        energyRecoveryRate: 1,
        maxGear: 'M',
        level: 1,
        experience: 0,
        createdAt: new Date(),
        lastLogin: new Date(),
        ...telegramData
      },
      gameState: gameState || {
        tokens: 0,
        highScore: 0,
        engineLevel: 'Mk I',
        gearboxLevel: 'L1',
        batteryLevel: 'B1',
        hyperdriveLevel: 'H1',
        powerGridLevel: 'P1',
        lastSaved: new Date()
      },
      gameBalance: 0,
      transactions: [],
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await database.collection('users').updateOne(
      { userId },
      { $set: newUser },
      { upsert: true }
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    const leaderboardEntry = {
      userId: userId,
      username: formatUserName(
        newUser.profile.username,
        newUser.profile.telegramFirstName,
        newUser.profile.telegramLastName,
        newUser.profile.telegramUsername,
        userId
      ),
      telegramId: newUser.profile.telegramId,
      telegramUsername: newUser.profile.telegramUsername,
      telegramFirstName: newUser.profile.telegramFirstName,
      telegramLastName: newUser.profile.telegramLastName,
      tokens: 0,
      rank: 1,
      updatedAt: new Date()
    };
    
    await database.collection('leaderboard').updateOne(
      { userId },
      { $set: leaderboardEntry },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
    await updateAllRanks(database);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
    
    res.json({ 
      message: 'User initialized successfully',
      user: newUser,
      isNewUser: !existingUser
    });
    
  } catch (error) {
    console.error('Error initializing user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
router.put('/users/:userId/gamestate', async (req, res) => {
  try {
    const { userId } = req.params;
    const gameState = req.body;
    console.log(`üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ gameState –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ç–æ–∫–µ–Ω—ã: ${gameState.tokens}`);
    
    const database = await connectToDatabase();
    
    if (!database) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return res.status(503).json({ message: 'Database unavailable' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    const updateResult = await database.collection('users').updateOne(
      { userId },
      {
        $set: {
          'gameState': {
            ...gameState,
            lastSaved: new Date()
          },
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    const user = await database.collection('users').findOne({ userId });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –í–°–ï–ì–î–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ gameState
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º highScore –∏–∑ gameState –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ user –¥–∞–Ω–Ω—ã—Ö
    if (user) {
      const ratingScore = gameState.highScore !== undefined ? gameState.highScore : user.gameState?.highScore || 0;
      console.log(`üèÜ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è ${userId} —Å ${ratingScore} —Ä–µ–π—Ç–∏–Ω–≥–æ–º (—Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã: ${gameState.tokens || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})`);
      await updateUserInLeaderboard(database, user, ratingScore);
    }
    
    res.json({ message: 'Game state updated successfully' });
  } catch (error) {
    console.error('‚ùå Error updating game state:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
router.post('/users/:userId/transactions', async (req, res) => {
  try {
    const { userId } = req.params;
    const transaction = {
      ...req.body,
      id: Date.now().toString(),
      timestamp: Date.now()
    };
    const database = await connectToDatabase();
    
    await database.collection('users').updateOne(
      { userId },
      {
        $push: { transactions: transaction },
        $set: { updatedAt: new Date() }
      }
    );
    
    res.json({ message: 'Transaction added successfully' });
  } catch (error) {
    console.error('Error adding transaction:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/users/:userId/rank', async (req, res) => {
  try {
    const { userId } = req.params;
    const database = await connectToDatabase();
    
    const user = await database.collection('leaderboard').findOne({ userId });
    
    if (!user) {
      return res.status(404).json({ message: 'User not found in leaderboard' });
    }
    
    res.json({ rank: user.rank });
  } catch (error) {
    console.error('Error getting user rank:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏) + –ö–ï–®–ò–†–û–í–ê–ù–ò–ï
router.get('/leaderboard', async (req, res) => {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
    const limit = parseInt(req.query.limit) || 100;
    const page = parseInt(req.query.page) || 1;
    
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
    let leaderboard;
    try {
      if (cacheService.isConnected) {
        leaderboard = await cacheService.getLeaderboard(page, limit);
        if (leaderboard && leaderboard.length > 0) {
          console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–µ—à–∞ (${leaderboard.length} –∑–∞–ø–∏—Å–µ–π)`);
          return res.json(leaderboard);
        }
      }
    } catch (cacheError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–µ—à–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î:', cacheError.message);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    const database = await connectToDatabase();
    
    if (!database) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return res.status(503).json({ message: 'Database unavailable' });
    }
    
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...');
    const skip = (page - 1) * limit;
    leaderboard = await database.collection('leaderboard')
      .find()
      .sort({ tokens: -1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º –≤–º–µ—Å—Ç–æ score
      .skip(skip)
      .limit(limit)
      .toArray();
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${leaderboard.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ`);
    
    if (leaderboard.length === 0) {
      console.log('‚ö†Ô∏è –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    } else {
      console.log('üèÜ –¢–æ–ø-3:', leaderboard.slice(0, 3).map(u => `${u.telegramFirstName || u.username}: ${u.tokens}`));
    }
    
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –Ω–∞ 10 –º–∏–Ω—É—Ç
    try {
      if (cacheService.isConnected && leaderboard.length > 0) {
        await cacheService.set(`leaderboard:page:${page}:limit:${limit}`, leaderboard, 600); // 10 –º–∏–Ω—É—Ç
      }
    } catch (cacheError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–µ—à:', cacheError.message);
    }
    
    res.json(leaderboard);
  } catch (error) {
    console.error('‚ùå Error getting leaderboard:', error);
    res.status(500).json({ 
      message: 'Internal server error',
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏)
router.post('/leaderboard', async (req, res) => {
  try {
    const entry = req.body;
    console.log(`üèÜ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è ${entry.userId}:`, {
      username: entry.username,
      telegramFirstName: entry.telegramFirstName,
      telegramUsername: entry.telegramUsername,
      tokens: entry.tokens
    });
    
    const database = await connectToDatabase();
    
    if (!database) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return res.status(503).json({ message: 'Database unavailable' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏)
    const result = await database.collection('leaderboard').updateOne(
      { userId: entry.userId },
      {
        $set: {
          userId: entry.userId,
          username: formatUserName(
            entry.username,
            entry.telegramFirstName,
            entry.telegramLastName,
            entry.telegramUsername,
            entry.userId
          ),
          telegramId: entry.telegramId,
          telegramUsername: entry.telegramUsername,
          telegramFirstName: entry.telegramFirstName,
          telegramLastName: entry.telegramLastName,
          tokens: entry.tokens || entry.score || 0, // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );

    console.log(`‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${entry.userId} ${result.upsertedCount ? '–¥–æ–±–∞–≤–ª–µ–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω'} –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
    await updateAllRanks(database);
    
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    try {
      if (cacheService.isConnected) {
        await cacheService.invalidateLeaderboard();
      }
    } catch (cacheError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', cacheError.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedUser = await database.collection('leaderboard').findOne({ userId: entry.userId });
    console.log(`üéØ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:`, {
      userId: updatedUser.userId,
      username: updatedUser.username,
      tokens: updatedUser.tokens,
      rank: updatedUser.rank
    });
    
    res.json({ message: 'Leaderboard updated successfully' });
  } catch (error) {
    console.error('‚ùå API: Error updating leaderboard:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –°–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
router.post('/admin/reset-leaderboard', async (req, res) => {
  try {
    const { adminKey } = req.body;
    
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ –∫–ª—é—á—É
    if (adminKey !== 'tapdel-reset-2025') {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const database = await connectToDatabase();
    
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞...');
    
    // 1. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ leaderboard
    const leaderboardResult = await database.collection('leaderboard').deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${leaderboardResult.deletedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ leaderboard`);
    
    // 2. –°–±—Ä–æ—Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResult = await database.collection('users').updateMany(
      {},
      {
        $set: {
          'gameState.tokens': 0,
          'gameState.highScore': 0,
          'gameBalance': 0,
          updatedAt: new Date()
        }
      }
    );
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${usersResult.modifiedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // 3. –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactionsResult = await database.collection('users').updateMany(
      {},
      {
        $set: {
          transactions: []
        }
      }
    );
    console.log(`‚úÖ –û—á–∏—â–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É ${transactionsResult.modifiedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // 4. –û—á–∏—Å—Ç–∫–∞ DecimalChain –¥–∞–Ω–Ω—ã—Ö
    const depositsResult = await database.collection('deposits').deleteMany({});
    const withdrawalsResult = await database.collection('withdrawals').deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${depositsResult.deletedCount} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ ${withdrawalsResult.deletedCount} –≤—ã–≤–æ–¥–æ–≤`);
    
    res.json({
      message: '–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω',
      results: {
        leaderboardDeleted: leaderboardResult.deletedCount,
        usersReset: usersResult.modifiedCount,
        transactionsCleared: transactionsResult.modifiedCount,
        depositsDeleted: depositsResult.deletedCount,
        withdrawalsDeleted: withdrawalsResult.deletedCount
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    res.status(500).json({ 
      message: '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞',
      error: error.message 
    });
  }
});

// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:userId/migrate', async (req, res) => {
  try {
    const { userId } = req.params;
    const { oldUserId } = req.body;
    
    if (!oldUserId || oldUserId === userId) {
      return res.status(400).json({ message: 'Invalid migration request' });
    }
    
    const database = await connectToDatabase();
    
    console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${oldUserId} -> ${userId}`);
    
    // –ù–∞–π—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const oldUser = await database.collection('users').findOne({ userId: oldUserId });
    const newUser = await database.collection('users').findOne({ userId });
    
    if (!oldUser) {
      return res.status(404).json({ message: 'Old user not found' });
    }
    
    // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–µ –º–∏–≥—Ä–∏—Ä—É–µ–º
    if (newUser && newUser.gameState && newUser.gameState.tokens > 0) {
      console.log(`‚ö†Ô∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å, –º–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      return res.json({ 
        message: 'Migration skipped - new user already has progress',
        migrated: false 
      });
    }
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const migratedUser = {
      ...oldUser,
      userId, // –û–±–Ω–æ–≤–ª—è–µ–º ID
      updatedAt: new Date(),
      migratedFrom: oldUserId,
      migrationDate: new Date()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await database.collection('users').updateOne(
      { userId },
      { $set: migratedUser },
      { upsert: true }
    );
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    const oldLeaderboardEntry = await database.collection('leaderboard').findOne({ userId: oldUserId });
    if (oldLeaderboardEntry) {
      const migratedLeaderboardEntry = {
        ...oldLeaderboardEntry,
        userId,
        updatedAt: new Date()
      };
      
      await database.collection('leaderboard').updateOne(
        { userId },
        { $set: migratedLeaderboardEntry },
        { upsert: true }
      );
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
      await database.collection('leaderboard').deleteOne({ userId: oldUserId });
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await database.collection('users').deleteOne({ userId: oldUserId });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    await updateAllRanks(database);
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${oldUserId} -> ${userId}`);
    
    res.json({ 
      message: 'User data migrated successfully',
      migrated: true,
      tokens: oldUser.gameState?.tokens || 0
    });
    
  } catch (error) {
    console.error('Error migrating user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
router.get('/admin/statistics', async (req, res) => {
  try {
    const database = await connectToDatabase();
    const usersCollection = database.collection('users');
    const depositsCollection = database.collection('deposits');
    const withdrawalsCollection = database.collection('withdrawals');

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUsers = await usersCollection.countDocuments();
    // –ë–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã (—Å—É–º–º–∞ tokens –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    const users = await usersCollection.find({}, { projection: { 'gameState.tokens': 1 } }).toArray();
    const totalTokens = users.reduce((sum, u) => sum + (u.gameState?.tokens || 0), 0);
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    const totalDeposits = await depositsCollection.countDocuments();
    const sumDeposits = await depositsCollection.aggregate([
      { $group: { _id: null, total: { $sum: '$amount' } } }
    ]).toArray();
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤
    const totalWithdrawals = await withdrawalsCollection.countDocuments();
    const sumWithdrawals = await withdrawalsCollection.aggregate([
      { $group: { _id: null, total: { $sum: '$amount' } } }
    ]).toArray();
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24—á
    const since = new Date(Date.now() - 24*60*60*1000);
    const activeUsers = await usersCollection.countDocuments({ 'profile.lastLogin': { $gte: since } });

    res.json({
      totalUsers,
      totalTokens,
      totalDeposits,
      sumDeposits: sumDeposits[0]?.total || 0,
      totalWithdrawals,
      sumWithdrawals: sumWithdrawals[0]?.total || 0,
      activeUsers
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
router.get('/admin/settings', async (req, res) => {
  try {
    const database = await connectToDatabase();
    const settingsCollection = database.collection('adminSettings');
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    const settings = await settingsCollection.findOne({ _id: 'gameSettings' });
    
    if (!settings) {
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const defaultSettings = {
        token: {
          symbol: 'BOOST',
          contractAddress: '',
          decimals: 18
        },
        gameMechanics: {
          baseReward: 1,
          maxFingers: 5,
          rateWindow: 1000
        },
        gearMultipliers: {
          'N': 0,
          '1': 1,
          '2': 1.5,
          '3': 2,
          '4': 3,
          'M': 5
        },
        gearThresholds: {
          '1': 1,
          '2': 5,
          '3': 10,
          '4': 15,
          'M': 20
        },
        energy: {
          recoveryRate: 0.033,
          consumptionRate: {
            'N': 0,
            '1': 0.006,
            '2': 0.009,
            '3': 0.012,
            '4': 0.015,
            'M': 0.0165
          }
        },
        components: {
          engines: [100, 250, 500, 1000, 2000, 4000, 8000, 16000, 32000, 64000],
          gearboxes: [50, 100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600],
          batteries: [100, 200, 400, 800, 1600, 3200, 6400, 12800, 25600, 51200],
          hyperdrives: [5000, 10000, 20000, 40000, 80000],
          powerGrids: [500, 1000, 2000, 4000, 8000]
        }
      };
      
      await settingsCollection.insertOne({
        _id: 'gameSettings',
        ...defaultSettings,
        updatedAt: new Date()
      });
      
      res.json(defaultSettings);
    } else {
      res.json({
        token: settings.token,
        gameMechanics: settings.gameMechanics,
        gearMultipliers: settings.gearMultipliers,
        gearThresholds: settings.gearThresholds,
        energy: settings.energy,
        components: settings.components
      });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
router.post('/admin/settings', async (req, res) => {
  try {
    const { token, gameMechanics, gearMultipliers, gearThresholds, energy, components } = req.body;
    const database = await connectToDatabase();
    const settingsCollection = database.collection('adminSettings');
    
    const settings = {
      _id: 'gameSettings',
      token,
      gameMechanics,
      gearMultipliers,
      gearThresholds,
      energy,
      components,
      updatedAt: new Date()
    };
    
    await settingsCollection.updateOne(
      { _id: 'gameSettings' },
      { $set: settings },
      { upsert: true }
    );
    
    res.json({ message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', settings });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
async function updateUserInLeaderboard(database, user, tokens) {
  try {
    const leaderboardEntry = {
      userId: user.userId,
      username: formatUserName(
        user.profile?.username, 
        user.profile?.telegramFirstName || user.telegramFirstName, 
        user.profile?.telegramLastName || user.telegramLastName, 
        user.profile?.telegramUsername || user.telegramUsername, 
        user.userId
      ),
      telegramId: user.profile?.telegramId || user.telegramId,
      telegramUsername: user.profile?.telegramUsername || user.telegramUsername,
      telegramFirstName: user.profile?.telegramFirstName || user.telegramFirstName,
      telegramLastName: user.profile?.telegramLastName || user.telegramLastName,
      tokens: tokens,
      updatedAt: new Date()
    };

    await database.collection('leaderboard').updateOne(
      { userId: user.userId },
      { $set: leaderboardEntry },
      { upsert: true }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
    await updateAllRanks(database);
  } catch (error) {
    console.error('Error updating user in leaderboard:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–Ω–≥–æ–≤
async function updateAllRanks(database) {
  try {
    const users = await database.collection('leaderboard')
      .find()
      .sort({ tokens: -1 })
      .toArray();
    
    await Promise.all(users.map((user, index) => 
      database.collection('leaderboard').updateOne(
        { _id: user._id },
        { $set: { rank: index + 1 } }
      )
    ));
  } catch (error) {
    console.error('Error updating ranks:', error);
  }
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ö–ï–ù–ê–ú–ò ===

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
router.get('/admin/tokens', async (req, res) => {
  try {
    const database = await connectToDatabase();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ë–î –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
    const tokenConfig = await database.collection('system_config').findOne({ key: 'tokens' });
    
    const defaultTokens = [
      {
        symbol: 'BOOST',
        address: '0x15cefa2ffb0759b519c15e23025a718978be9322',
        decimals: 18,
        name: 'BOOST Token',
        isActive: true
      },
      {
        symbol: 'DEL',
        address: '0x0000000000000000000000000000000000000000',
        decimals: 18,
        name: 'Decimal Token',
        isActive: false
      }
    ];

    res.json({
      success: true,
      tokens: tokenConfig?.value || defaultTokens
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
router.post('/admin/tokens/activate', async (req, res) => {
  try {
    const { symbol } = req.body;
    
    if (!symbol) {
      return res.status(400).json({ success: false, error: '–°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const database = await connectToDatabase();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const tokenConfig = await database.collection('system_config').findOne({ key: 'tokens' });
    const tokens = tokenConfig?.value || [];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
    const updatedTokens = tokens.map(token => ({
      ...token,
      isActive: token.symbol === symbol
    }));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await database.collection('system_config').updateOne(
      { key: 'tokens' },
      { $set: { value: updatedTokens, updatedAt: new Date() } },
      { upsert: true }
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    await database.collection('token_history').insertOne({
      symbol,
      address: tokens.find(t => t.symbol === symbol)?.address || '',
      changedAt: new Date(),
      changedBy: 'admin',
      reason: '–°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞'
    });
    
    console.log(`üîÑ –¢–æ–∫–µ–Ω ${symbol} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
    
    res.json({ success: true, message: `–¢–æ–∫–µ–Ω ${symbol} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω` });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
router.post('/admin/tokens/add', async (req, res) => {
  try {
    const { symbol, address, decimals, name } = req.body;
    
    if (!symbol || !address || !name) {
      return res.status(400).json({ success: false, error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    if (!address.match(/^0x[a-fA-F0-9]{40}$/)) {
      return res.status(400).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞' });
    }

    const database = await connectToDatabase();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const tokenConfig = await database.collection('system_config').findOne({ key: 'tokens' });
    const tokens = tokenConfig?.value || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (tokens.find(t => t.symbol === symbol)) {
      return res.status(400).json({ success: false, error: '–¢–æ–∫–µ–Ω —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const newToken = {
      symbol: symbol.toUpperCase(),
      address,
      decimals: decimals || 18,
      name,
      isActive: false
    };
    
    const updatedTokens = [...tokens, newToken];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await database.collection('system_config').updateOne(
      { key: 'tokens' },
      { $set: { value: updatedTokens, updatedAt: new Date() } },
      { upsert: true }
    );
    
    console.log(`‚ûï –¢–æ–∫–µ–Ω ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω`);
    
    res.json({ success: true, message: `–¢–æ–∫–µ–Ω ${symbol} –¥–æ–±–∞–≤–ª–µ–Ω` });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤
router.get('/admin/tokens/history', async (req, res) => {
  try {
    const database = await connectToDatabase();
    
    const history = await database.collection('token_history')
      .find({})
      .sort({ changedAt: -1 })
      .limit(50)
      .toArray();
    
    res.json({ success: true, history });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', async () => {
  if (client) {
    await client.close();
  }
});

module.exports = router;
