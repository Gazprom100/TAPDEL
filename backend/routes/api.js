const express = require('express');
const { MongoClient } = require('mongodb');
const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å—Ç–æ–≥–æ MongoDB URI
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

// Health check —Ä–æ—É—Ç
router.get('/health', async (req, res) => {
  try {
    const database = await connectToDatabase();
    const userCount = await database.collection('users').countDocuments();
    const leaderboardCount = await database.collection('leaderboard').countDocuments();
    
    res.json({
      status: 'OK',
      mongodb: 'connected',
      userCount,
      leaderboardCount,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      status: 'ERROR',
      mongodb: 'disconnected',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç
router.get('/test', (req, res) => {
  res.json({
    message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString(),
    endpoint: '/api/test'
  });
});

let client = null;
let db = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const connectToDatabase = async () => {
  if (!client) {
    try {
      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
      console.log('üìç URI –º–∞—Å–∫–∞:', MONGODB_URI.replace(/\/\/.*@/, '//***:***@'));
      
      client = new MongoClient(MONGODB_URI);
      await client.connect();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await client.db().admin().ping();
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
      
      db = client.db(MONGODB_DB);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      await Promise.all([
        db.collection('users').createIndex({ userId: 1 }, { unique: true }),
        db.collection('users').createIndex({ telegramId: 1 }, { sparse: true }),
        db.collection('leaderboard').createIndex({ tokens: -1 }),
        db.collection('leaderboard').createIndex({ userId: 1 }, { unique: true }),
        db.collection('leaderboard').createIndex({ telegramId: 1 }, { sparse: true })
      ]);
      
      console.log('üìä –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
      throw error;
    }
  }
  return db;
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/users/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const database = await connectToDatabase();
    
    const user = await database.collection('users').findOne({ userId });
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    res.json(user);
  } catch (error) {
    console.error('Error getting user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/users/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const userData = req.body;
    const database = await connectToDatabase();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gameBalance –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (userData.gameBalance === undefined) {
      const existingUser = await database.collection('users').findOne({ userId });
      if (!existingUser || existingUser.gameBalance === undefined) {
        userData.gameBalance = 0;
      }
    }
    
    await database.collection('users').updateOne(
      { userId },
      { 
        $set: { 
          ...userData,
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    
    res.json({ message: 'User updated successfully' });
  } catch (error) {
    console.error('Error updating user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤)
router.post('/users/:userId/initialize', async (req, res) => {
  try {
    const { userId } = req.params;
    const { profile, gameState, telegramData } = req.body;
    const database = await connectToDatabase();
    
    console.log(`üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await database.collection('users').findOne({ userId });
    if (existingUser) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = {
      userId: userId,
      profile: profile || {
        userId: userId,
        username: `–ò–≥—Ä–æ–∫ ${userId.slice(-4)}`,
        maxEnergy: 100,
        energyRecoveryRate: 1,
        maxGear: 'M',
        level: 1,
        experience: 0,
        createdAt: new Date(),
        lastLogin: new Date(),
        ...telegramData
      },
      gameState: gameState || {
        tokens: 0,
        highScore: 0,
        engineLevel: 'Mk I',
        gearboxLevel: 'L1',
        batteryLevel: 'B1',
        hyperdriveLevel: 'H1',
        powerGridLevel: 'P1',
        lastSaved: new Date()
      },
      gameBalance: 0,
      transactions: [],
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await database.collection('users').updateOne(
      { userId },
      { $set: newUser },
      { upsert: true }
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    const leaderboardEntry = {
      userId: userId,
      username: newUser.profile.username,
      telegramId: newUser.profile.telegramId,
      telegramUsername: newUser.profile.telegramUsername,
      telegramFirstName: newUser.profile.telegramFirstName,
      telegramLastName: newUser.profile.telegramLastName,
      tokens: 0,
      rank: 1,
      updatedAt: new Date()
    };
    
    await database.collection('leaderboard').updateOne(
      { userId },
      { $set: leaderboardEntry },
      { upsert: true }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
    await updateAllRanks(database);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
    
    res.json({ 
      message: 'User initialized successfully',
      user: newUser,
      isNewUser: !existingUser
    });
    
  } catch (error) {
    console.error('Error initializing user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
router.put('/users/:userId/gamestate', async (req, res) => {
  try {
    const { userId } = req.params;
    const gameState = req.body;
    console.log(`üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ gameState –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ç–æ–∫–µ–Ω—ã: ${gameState.tokens}`);
    
    const database = await connectToDatabase();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    const updateResult = await database.collection('users').updateOne(
      { userId },
      {
        $set: {
          'gameState': {
            ...gameState,
            lastSaved: new Date()
          },
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    const user = await database.collection('users').findOne({ userId });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã
    if (user && gameState.tokens !== undefined) {
      console.log(`üèÜ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è ${userId} —Å ${gameState.tokens} —Ç–æ–∫–µ–Ω–∞–º–∏`);
      await updateUserInLeaderboard(database, user, gameState.tokens);
    }
    
    res.json({ message: 'Game state updated successfully' });
  } catch (error) {
    console.error('‚ùå Error updating game state:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
router.post('/users/:userId/transactions', async (req, res) => {
  try {
    const { userId } = req.params;
    const transaction = {
      ...req.body,
      id: Date.now().toString(),
      timestamp: Date.now()
    };
    const database = await connectToDatabase();
    
    await database.collection('users').updateOne(
      { userId },
      {
        $push: { transactions: transaction },
        $set: { updatedAt: new Date() }
      }
    );
    
    res.json({ message: 'Transaction added successfully' });
  } catch (error) {
    console.error('Error adding transaction:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/users/:userId/rank', async (req, res) => {
  try {
    const { userId } = req.params;
    const database = await connectToDatabase();
    
    const user = await database.collection('leaderboard').findOne({ userId });
    
    if (!user) {
      return res.status(404).json({ message: 'User not found in leaderboard' });
    }
    
    res.json({ rank: user.rank });
  } catch (error) {
    console.error('Error getting user rank:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏)
router.get('/leaderboard', async (req, res) => {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
    const limit = parseInt(req.query.limit) || 100;
    const database = await connectToDatabase();
    
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...');
    const leaderboard = await database.collection('leaderboard')
      .find()
      .sort({ tokens: -1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º –≤–º–µ—Å—Ç–æ score
      .limit(limit)
      .toArray();
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${leaderboard.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ`);
    
    if (leaderboard.length === 0) {
      console.log('‚ö†Ô∏è –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    } else {
      console.log('üèÜ –¢–æ–ø-3:', leaderboard.slice(0, 3).map(u => `${u.telegramFirstName || u.username}: ${u.tokens}`));
    }
    
    res.json(leaderboard);
  } catch (error) {
    console.error('‚ùå Error getting leaderboard:', error);
    res.status(500).json({ 
      message: 'Internal server error',
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏)
router.post('/leaderboard', async (req, res) => {
  try {
    const entry = req.body;
    console.log(`üèÜ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è ${entry.userId}:`, {
      username: entry.username,
      telegramFirstName: entry.telegramFirstName,
      telegramUsername: entry.telegramUsername,
      tokens: entry.tokens
    });
    
    const database = await connectToDatabase();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–ø–µ—Ä—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏)
    const result = await database.collection('leaderboard').updateOne(
      { userId: entry.userId },
      {
        $set: {
          userId: entry.userId,
          username: entry.username || `–ò–≥—Ä–æ–∫ ${entry.userId.slice(-4)}`,
          telegramId: entry.telegramId,
          telegramUsername: entry.telegramUsername,
          telegramFirstName: entry.telegramFirstName,
          telegramLastName: entry.telegramLastName,
          tokens: entry.tokens || entry.score || 0, // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );

    console.log(`‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${entry.userId} ${result.upsertedCount ? '–¥–æ–±–∞–≤–ª–µ–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω'} –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
    await updateAllRanks(database);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedUser = await database.collection('leaderboard').findOne({ userId: entry.userId });
    console.log(`üéØ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:`, {
      userId: updatedUser.userId,
      username: updatedUser.username,
      tokens: updatedUser.tokens,
      rank: updatedUser.rank
    });
    
    res.json({ message: 'Leaderboard updated successfully' });
  } catch (error) {
    console.error('‚ùå API: Error updating leaderboard:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –°–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
router.post('/admin/reset-leaderboard', async (req, res) => {
  try {
    const { adminKey } = req.body;
    
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –ø–æ –∫–ª—é—á—É
    if (adminKey !== 'tapdel-reset-2025') {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const database = await connectToDatabase();
    
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞...');
    
    // 1. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ leaderboard
    const leaderboardResult = await database.collection('leaderboard').deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${leaderboardResult.deletedCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ leaderboard`);
    
    // 2. –°–±—Ä–æ—Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResult = await database.collection('users').updateMany(
      {},
      {
        $set: {
          'gameState.tokens': 0,
          'gameState.highScore': 0,
          'gameBalance': 0,
          updatedAt: new Date()
        }
      }
    );
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${usersResult.modifiedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // 3. –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactionsResult = await database.collection('users').updateMany(
      {},
      {
        $set: {
          transactions: []
        }
      }
    );
    console.log(`‚úÖ –û—á–∏—â–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É ${transactionsResult.modifiedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    // 4. –û—á–∏—Å—Ç–∫–∞ DecimalChain –¥–∞–Ω–Ω—ã—Ö
    const depositsResult = await database.collection('deposits').deleteMany({});
    const withdrawalsResult = await database.collection('withdrawals').deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${depositsResult.deletedCount} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ ${withdrawalsResult.deletedCount} –≤—ã–≤–æ–¥–æ–≤`);
    
    res.json({
      message: '–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω',
      results: {
        leaderboardDeleted: leaderboardResult.deletedCount,
        usersReset: usersResult.modifiedCount,
        transactionsCleared: transactionsResult.modifiedCount,
        depositsDeleted: depositsResult.deletedCount,
        withdrawalsDeleted: withdrawalsResult.deletedCount
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    res.status(500).json({ 
      message: '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞',
      error: error.message 
    });
  }
});

// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:userId/migrate', async (req, res) => {
  try {
    const { userId } = req.params;
    const { oldUserId } = req.body;
    
    if (!oldUserId || oldUserId === userId) {
      return res.status(400).json({ message: 'Invalid migration request' });
    }
    
    const database = await connectToDatabase();
    
    console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${oldUserId} -> ${userId}`);
    
    // –ù–∞–π—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const oldUser = await database.collection('users').findOne({ userId: oldUserId });
    const newUser = await database.collection('users').findOne({ userId });
    
    if (!oldUser) {
      return res.status(404).json({ message: 'Old user not found' });
    }
    
    // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–µ –º–∏–≥—Ä–∏—Ä—É–µ–º
    if (newUser && newUser.gameState && newUser.gameState.tokens > 0) {
      console.log(`‚ö†Ô∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å, –º–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      return res.json({ 
        message: 'Migration skipped - new user already has progress',
        migrated: false 
      });
    }
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const migratedUser = {
      ...oldUser,
      userId, // –û–±–Ω–æ–≤–ª—è–µ–º ID
      updatedAt: new Date(),
      migratedFrom: oldUserId,
      migrationDate: new Date()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await database.collection('users').updateOne(
      { userId },
      { $set: migratedUser },
      { upsert: true }
    );
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    const oldLeaderboardEntry = await database.collection('leaderboard').findOne({ userId: oldUserId });
    if (oldLeaderboardEntry) {
      const migratedLeaderboardEntry = {
        ...oldLeaderboardEntry,
        userId,
        updatedAt: new Date()
      };
      
      await database.collection('leaderboard').updateOne(
        { userId },
        { $set: migratedLeaderboardEntry },
        { upsert: true }
      );
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
      await database.collection('leaderboard').deleteOne({ userId: oldUserId });
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await database.collection('users').deleteOne({ userId: oldUserId });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    await updateAllRanks(database);
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${oldUserId} -> ${userId}`);
    
    res.json({ 
      message: 'User data migrated successfully',
      migrated: true,
      tokens: oldUser.gameState?.tokens || 0
    });
    
  } catch (error) {
    console.error('Error migrating user:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
async function updateUserInLeaderboard(database, user, tokens) {
  try {
    const leaderboardEntry = {
      userId: user.userId,
      username: user.profile?.username || user.telegramFirstName || `–ò–≥—Ä–æ–∫ ${user.userId.slice(-4)}`,
      telegramId: user.telegramId,
      telegramUsername: user.telegramUsername,
      telegramFirstName: user.telegramFirstName,
      telegramLastName: user.telegramLastName,
      tokens: tokens,
      updatedAt: new Date()
    };

    await database.collection('leaderboard').updateOne(
      { userId: user.userId },
      { $set: leaderboardEntry },
      { upsert: true }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
    await updateAllRanks(database);
  } catch (error) {
    console.error('Error updating user in leaderboard:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–Ω–≥–æ–≤
async function updateAllRanks(database) {
  try {
    const users = await database.collection('leaderboard')
      .find()
      .sort({ tokens: -1 })
      .toArray();
    
    await Promise.all(users.map((user, index) => 
      database.collection('leaderboard').updateOne(
        { _id: user._id },
        { $set: { rank: index + 1 } }
      )
    ));
  } catch (error) {
    console.error('Error updating ranks:', error);
  }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', async () => {
  if (client) {
    await client.close();
  }
});

module.exports = router;
