const { MongoClient } = require('mongodb');
require('dotenv').config();

class DatabaseConfig {
  constructor() {
    this.MONGODB_URI = process.env.MONGODB_URI || 
      'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0';
    
    this.client = null;
    this.db = null;
    this.isConnected = false;
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è 2000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  getConnectionConfig() {
    return {
      // Connection Pool –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      maxPoolSize: 50,         // –ú–∞–∫—Å–∏–º—É–º 50 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      minPoolSize: 5,          // –ú–∏–Ω–∏–º—É–º 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      maxIdleTimeMS: 30000,    // 30 —Å–µ–∫ timeout –¥–ª—è idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      
      // Timeouts
      serverSelectionTimeoutMS: 5000,  // 5 —Å–µ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
      socketTimeoutMS: 45000,          // 45 —Å–µ–∫ socket timeout
      connectTimeoutMS: 10000,         // 10 —Å–µ–∫ connection timeout
      
      // Retry –ª–æ–≥–∏–∫–∞
      retryWrites: true,
      retryReads: true,
      
      // Write Concern –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      writeConcern: { 
        w: 'majority',  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞
        j: true,        // Journaling
        wtimeoutMS: 10000  // Timeout –¥–ª—è write –æ–ø–µ—Ä–∞—Ü–∏–π
      },
      
      // Read Preference
      readPreference: 'primaryPreferred',
      readConcern: { level: 'majority' },
      
      // Heartbeat
      heartbeatFrequencyMS: 10000,
      
      // Compression
      compressors: ['zstd', 'zlib'],
      
      // Monitoring
      monitorCommands: process.env.NODE_ENV === 'development'
    };
  }

  async connect() {
    if (this.isConnected && this.client) {
      return this.db;
    }

    try {
      console.log('üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
      
      this.client = new MongoClient(this.MONGODB_URI, this.getConnectionConfig());
      
      await this.client.connect();
      this.db = this.client.db('tapdel');
      this.isConnected = true;
      
      // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      await this.createOptimizedIndexes();
      
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
      console.log(`   - Pool size: 5-50 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
      console.log(`   - –ò–Ω–¥–µ–∫—Å—ã: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è 2000+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      return this.db;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
      throw error;
    }
  }

  async createOptimizedIndexes() {
    try {
      console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');
      
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è users
      await this.db.collection('users').createIndex(
        { 
          "userId": 1, 
          "gameState.tokens": -1, 
          "gameState.lastSaved": -1 
        }, 
        { 
          name: "user_tokens_activity",
          background: true
        }
      );

      await this.db.collection('users').createIndex(
        { 
          "profile.telegramId": 1, 
          "gameState.tokens": -1 
        }, 
        { 
          name: "telegram_tokens",
          background: true
        }
      );

      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
      await this.db.collection('leaderboard').createIndex(
        { 
          "tokens": -1, 
          "updatedAt": -1 
        }, 
        { 
          name: "leaderboard_performance",
          background: true
        }
      );

      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await this.db.collection('withdrawals').createIndex(
        { 
          "userId": 1, 
          "status": 1, 
          "requestedAt": -1 
        }, 
        { 
          name: "user_withdrawals",
          background: true
        }
      );

      await this.db.collection('deposits').createIndex(
        { 
          "userId": 1, 
          "matched": 1, 
          "expiresAt": 1 
        }, 
        { 
          name: "user_deposits",
          background: true
        }
      );

      // –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
      await this.db.collection('withdrawals').createIndex(
        { 
          "status": 1,
          "requestedAt": -1
        }, 
        { 
          name: "status_queue",
          background: true
        }
      );

      console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å:', error.message);
    }
  }

  async getStats() {
    if (!this.isConnected) {
      throw new Error('Database not connected');
    }

    try {
      const [serverStatus, dbStats] = await Promise.all([
        this.db.admin().serverStatus(),
        this.db.stats()
      ]);

      return {
        connections: {
          current: serverStatus.connections.current,
          available: serverStatus.connections.available,
          totalCreated: serverStatus.connections.totalCreated
        },
        operations: {
          insert: serverStatus.opcounters.insert,
          query: serverStatus.opcounters.query,
          update: serverStatus.opcounters.update,
          delete: serverStatus.opcounters.delete
        },
        database: {
          collections: dbStats.collections,
          objects: dbStats.objects,
          dataSize: Math.round(dbStats.dataSize / 1024 / 1024 * 100) / 100, // MB
          storageSize: Math.round(dbStats.storageSize / 1024 / 1024 * 100) / 100 // MB
        }
      };
    } catch (error) {
      console.error('Error getting database stats:', error);
      return null;
    }
  }

  async healthCheck() {
    if (!this.isConnected) {
      return { healthy: false, message: 'Not connected' };
    }

    try {
      const start = Date.now();
      await this.db.admin().ping();
      const responseTime = Date.now() - start;
      
      const stats = await this.getStats();
      
      return {
        healthy: true,
        responseTime,
        stats,
        timestamp: new Date()
      };
    } catch (error) {
      return {
        healthy: false,
        message: error.message,
        timestamp: new Date()
      };
    }
  }

  async disconnect() {
    if (this.client) {
      await this.client.close();
      this.isConnected = false;
      this.client = null;
      this.db = null;
      console.log('üìä MongoDB –æ—Ç–∫–ª—é—á–µ–Ω');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  getCollection(name) {
    if (!this.isConnected) {
      throw new Error('Database not connected');
    }
    
    return this.db.collection(name);
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

  // –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
  async getLeaderboard(page = 1, limit = 50) {
    const skip = (page - 1) * limit;
    
    return await this.getCollection('leaderboard')
      .find({}, { 
        projection: { 
          username: 1, 
          tokens: 1, 
          rank: 1,
          _id: 0
        } 
      })
      .sort({ tokens: -1 })
      .skip(skip)
      .limit(limit)
      .toArray();
  }

  // Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  async batchUpdateTokens(updates) {
    const operations = updates.map(({ userId, amount }) => ({
      updateOne: {
        filter: { userId },
        update: { 
          $inc: { 'gameState.tokens': amount },
          $set: { 'gameState.lastSaved': new Date() }
        },
        upsert: true
      }
    }));

    return await this.getCollection('users').bulkWrite(operations, {
      ordered: false  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    });
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  async getUserProfile(userId) {
    return await this.getCollection('users').findOne(
      { userId },
      {
        projection: {
          userId: 1,
          'gameState.tokens': 1,
          'gameState.highScore': 1,
          'gameState.engineLevel': 1,
          'profile.username': 1,
          'profile.level': 1,
          _id: 0
        }
      }
    );
  }
}

// Singleton instance
const databaseConfig = new DatabaseConfig();

module.exports = databaseConfig; 