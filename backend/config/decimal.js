const crypto = require('crypto');

module.exports = {
  // DecimalChain API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  API_BASE_URL: process.env.DECIMAL_API_BASE_URL || 'https://api.decimalchain.com/api/v1',
  RPC_URL: process.env.DECIMAL_RPC_URL || 'https://node.decimalchain.com/web3/',
  CHAIN_ID: parseInt(process.env.DECIMAL_CHAIN_ID || '75'),
  GAS_LIMIT: 21000,
  GAS_PRICE: parseInt(process.env.DECIMAL_GAS_PRICE_GWEI || '50000'), // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 50,000 gwei
  
  // –†–∞–±–æ—á–∏–π –∫–æ—à–µ–ª–µ–∫
  WORKING_ADDRESS: process.env.DECIMAL_WORKING_ADDRESS,
  WORKING_PRIVKEY_ENC: process.env.DECIMAL_WORKING_PRIVKEY_ENC,
  KEY_PASSPHRASE: process.env.DECIMAL_KEY_PASSPHRASE,
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  CONFIRMATIONS: parseInt(process.env.DECIMAL_CONFIRMATIONS || '6'),
  UNIQUE_SCALE: parseFloat(process.env.DECIMAL_UNIQUE_SCALE || '0.001'),
  MAX_USER_MOD: 0.999,
  
  // Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ Upstash —Å TLS)
  REDIS_URL: process.env.REDIS_URL || 'redis://localhost:6379/0',
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  isConfigured() {
    return !!(this.WORKING_ADDRESS && this.WORKING_PRIVKEY_ENC && this.KEY_PASSPHRASE && this.REDIS_URL);
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Upstash (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ URL)
  isUpstash() {
    return this.REDIS_URL.includes('upstash.io') || this.REDIS_URL.includes('upstash-redis');
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ Upstash REST URL –∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  getUpstashConfig() {
    const restUrl = process.env.UPSTASH_REDIS_REST_URL;
    const token = process.env.UPSTASH_REDIS_REST_TOKEN;
    
    if (restUrl && token) {
      return { restUrl, token };
    }
    return null;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Redis
  getRedisConfig() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø Redis –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const isUpstash = this.isUpstash();
    const isRedisCloud = this.REDIS_URL.includes('redis-cloud.com') || this.REDIS_URL.includes('redislabs.com');
    const isSecureRedis = this.REDIS_URL.startsWith('rediss://') || this.REDIS_URL.includes('upstash.io') || this.REDIS_URL.includes('upstash-redis');
    
    console.log(`üîß Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${this.REDIS_URL}`);
    console.log(`   Upstash: ${isUpstash}`);
    console.log(`   RedisCloud: ${isRedisCloud}`);
    console.log(`   Secure: ${isSecureRedis}`);
    
    if (isUpstash || isRedisCloud || isSecureRedis) {
      // –î–ª—è –≤—Å–µ—Ö SSL/TLS Redis –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      const redisUrl = new URL(this.REDIS_URL);
      console.log(`üîí –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TLS –¥–ª—è Redis: ${redisUrl.hostname}`);
      
      return {
        url: this.REDIS_URL,
        socket: {
          tls: true,
          rejectUnauthorized: false,
          servername: redisUrl.hostname,
          checkServerIdentity: () => undefined // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è TLS
        },
        connectTimeout: 60000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è Upstash
        lazyConnect: true,
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3,
        enableReadyCheck: true,
        maxLoadingTimeout: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º loading timeout
        retryDelayOnClusterDown: 300,
        retryDelayOnFailover: 100,
        retryDelayOnTryAgain: 100
      };
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ Redis
      console.log(`üîì –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis`);
      return { 
        url: this.REDIS_URL,
        socket: {
          connectTimeout: 10000,
          tls: false
        },
        connectTimeout: 10000,
        lazyConnect: true,
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3
      };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥–∞–∑ –ø—Ä–∞–π—Å–∞ –∏–∑ —Å–µ—Ç–∏
  async getCurrentGasPrice() {
    try {
      const response = await fetch(this.RPC_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jsonrpc: '2.0',
          method: 'eth_gasPrice',
          params: [],
          id: 1
        })
      });

      const data = await response.json();
      if (data.result) {
        const gasPriceWei = parseInt(data.result, 16);
        const gasPriceGwei = gasPriceWei / 1000000000;
        
        // –î–æ–±–∞–≤–ª—è–µ–º 20% –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–∞–π—Å—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        const adjustedGasPrice = Math.ceil(gasPriceGwei * 1.2);
        
        console.log(`Current gas price: ${gasPriceGwei} gwei, using: ${adjustedGasPrice} gwei`);
        return adjustedGasPrice;
      }
    } catch (error) {
      console.error('Error getting gas price:', error);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
    return this.GAS_PRICE;
  },

  // API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DecimalChain
  async getAddressBalance(address) {
    try {
      const response = await fetch(`${this.API_BASE_URL}/addresses/${address}/balance`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error getting address balance:', error);
      throw error;
    }
  },

  async getAddressTransactions(address, limit = 50) {
    try {
      const response = await fetch(`${this.API_BASE_URL}/addresses/${address}/transactions?limit=${limit}`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error getting address transactions:', error);
      throw error;
    }
  },

  async getTransaction(txHash) {
    try {
      const response = await fetch(`${this.API_BASE_URL}/transactions/${txHash}`);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error getting transaction:', error);
      throw error;
    }
  },

  async sendTransaction(signedTx) {
    try {
      const response = await fetch(`${this.API_BASE_URL}/transactions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          signedTx: signedTx
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error sending transaction:', error);
      throw error;
    }
  },

  // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
  getPrivateKey() {
    if (!this.WORKING_PRIVKEY_ENC || !this.KEY_PASSPHRASE) {
      throw new Error('DECIMAL_WORKING_PRIVKEY_ENC –∏ DECIMAL_KEY_PASSPHRASE –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    try {
      const algorithm = 'aes-256-cbc';
      const key = crypto.scryptSync(this.KEY_PASSPHRASE, 'salt', 32);
      const encryptedData = Buffer.from(this.WORKING_PRIVKEY_ENC, 'base64');
      
      const iv = encryptedData.slice(0, 16);
      const encrypted = encryptedData.slice(16);
      
      const decipher = crypto.createDecipheriv(algorithm, key, iv);
      let decrypted = decipher.update(encrypted, null, 'utf8');
      decrypted += decipher.final('utf8');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "0x" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!decrypted.startsWith('0x')) {
        decrypted = '0x' + decrypted;
      }
      
      return decrypted;
    } catch (error) {
      throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ' + error.message);
    }
  },
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞
  generateUniqueAmount(baseAmount, userId) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ —á–∏—Å–ª–æ–≤–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    const userIdHash = crypto.createHash('md5').update(userId.toString()).digest('hex');
    const userMod = parseInt(userIdHash.substring(0, 8), 16) % 1000;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä (0.001 - 0.999)
    const uniqueModifier = (userMod / 1000) * 0.999;
    const uniqueAmount = baseAmount + uniqueModifier;
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    return Math.round(uniqueAmount * 10000) / 10000;
  }
}; 