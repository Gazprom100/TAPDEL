require('dotenv').config();

class RedisConfig {
  constructor() {
    this.redisUrl = process.env.REDIS_URL;
    this.isUpstash = this.redisUrl && this.redisUrl.includes('upstash.io');
    this.isVercelRedis = this.redisUrl && this.redisUrl.includes('vercel-storage.com');
    this.isSupabaseRedis = this.redisUrl && this.redisUrl.includes('supabase');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  isConfigured() {
    return !!this.redisUrl;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Redis
  getRedisConfig() {
    if (!this.redisUrl) {
      throw new Error('REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    console.log(`üîß Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${this.redisUrl}`);
    console.log(`   Upstash: ${this.isUpstash}`);
    console.log(`   Vercel Redis: ${this.isVercelRedis}`);
    console.log(`   Supabase Redis: ${this.isSupabaseRedis}`);

    // –î–ª—è Vercel Redis (KV Storage)
    if (this.isVercelRedis) {
      return {
        url: this.redisUrl,
        socket: {
          tls: true,
          rejectUnauthorized: false,
          connectTimeout: 10000,
          commandTimeout: 5000
        },
        connectTimeout: 10000,
        lazyConnect: true,
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3,
        enableReadyCheck: true,
        maxLoadingTimeout: 30000
      };
    }

    // –î–ª—è Supabase Redis
    if (this.isSupabaseRedis) {
      return {
        url: this.redisUrl,
        socket: {
          tls: true,
          rejectUnauthorized: false,
          connectTimeout: 10000,
          commandTimeout: 5000
        },
        connectTimeout: 10000,
        lazyConnect: true,
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3,
        enableReadyCheck: true,
        maxLoadingTimeout: 30000
      };
    }

    // –î–ª—è Upstash Redis
    if (this.isUpstash) {
      return {
        url: this.redisUrl,
        socket: {
          tls: true,
          rejectUnauthorized: false,
          connectTimeout: 10000,
          commandTimeout: 5000
        },
        connectTimeout: 10000,
        lazyConnect: true,
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3,
        enableReadyCheck: true,
        maxLoadingTimeout: 30000
      };
    }

    // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ Redis
    return {
      url: this.redisUrl,
      socket: {
        connectTimeout: 10000,
        tls: false
      },
      connectTimeout: 10000,
      lazyConnect: true,
      retryDelayOnFailover: 100,
      maxRetriesPerRequest: 3
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ Redis –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  getProviderType() {
    if (this.isVercelRedis) return 'vercel';
    if (this.isSupabaseRedis) return 'supabase';
    if (this.isUpstash) return 'upstash';
    return 'standard';
  }
}

module.exports = new RedisConfig();
