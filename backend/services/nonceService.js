const redis = require('redis');
const config = require('../config/decimal');

class NonceService {
  constructor() {
    this.redis = null;
    this.localNonce = new Map(); // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à nonce –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    this.nonceLock = new Map();  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
    this.isConnected = false;
  }

  async initialize() {
    try {
      console.log('üî¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Nonce Service...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      try {
        const redisConfig = config.getRedisConfig();
        this.redis = redis.createClient(redisConfig);
        
        this.redis.on('error', (err) => {
          console.warn('‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞ –≤ NonceService:', err.message);
          this.isConnected = false;
        });

        this.redis.on('connect', () => {
          this.isConnected = true;
        });

        await this.redis.connect();
        await this.redis.ping();
        
        console.log('‚úÖ Nonce Service: Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
      } catch (redisError) {
        console.warn('‚ö†Ô∏è Nonce Service —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Redis:', redisError.message);
        this.isConnected = false;
      }

      console.log('‚úÖ Nonce Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Nonce Service:', error);
      return false;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è nonce —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
  async getNonce(address, web3Instance) {
    const normalizedAddress = address.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    while (this.nonceLock.get(normalizedAddress)) {
      await this.sleep(10); // –ñ–¥–µ–º 10–º—Å
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    this.nonceLock.set(normalizedAddress, true);
    
    try {
      let nonce = await this.getNextNonce(normalizedAddress, web3Instance);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ nonce
      await this.updateNonceSources(normalizedAddress, nonce);
      
      console.log(`üî¢ Nonce –¥–ª—è ${normalizedAddress}: ${nonce}`);
      return nonce;
      
    } finally {
      // –í—Å–µ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      this.nonceLock.delete(normalizedAddress);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ nonce —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  async getNextNonce(address, web3Instance) {
    const sources = await this.getAllNonceSources(address, web3Instance);
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const maxNonce = Math.max(...Object.values(sources).filter(n => n !== null));
    const nextNonce = isNaN(maxNonce) ? 0 : maxNonce + 1;
    
    console.log(`üîç Nonce –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è ${address}:`, {
      redis: sources.redis,
      local: sources.local,
      chain: sources.chain,
      selected: nextNonce
    });
    
    return nextNonce;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ nonce –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  async getAllNonceSources(address, web3Instance) {
    const sources = {
      redis: null,
      local: null,
      chain: null
    };

    // –ò–∑ Redis
    try {
      if (this.isConnected && this.redis) {
        const redisNonce = await this.redis.get(`nonce:${address}`);
        sources.redis = redisNonce ? parseInt(redisNonce) : null;
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è nonce –∏–∑ Redis –¥–ª—è ${address}:`, error.message);
    }

    // –ò–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
    sources.local = this.localNonce.get(address) || null;

    // –ò–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    try {
      if (web3Instance) {
        const chainNonce = await web3Instance.eth.getTransactionCount(address, 'pending');
        sources.chain = Number(chainNonce);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è nonce –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è ${address}:`, error.message);
    }

    return sources;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nonce –≤–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
  async updateNonceSources(address, nonce) {
    // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
    this.localNonce.set(address, nonce);

    // Redis —Å TTL 5 –º–∏–Ω—É—Ç
    try {
      if (this.isConnected && this.redis) {
        await this.redis.setEx(`nonce:${address}`, 300, nonce.toString());
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å nonce –≤ Redis –¥–ª—è ${address}:`, error.message);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  async onTransactionSuccess(address, nonce) {
    const normalizedAddress = address.toLowerCase();
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º nonce –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await this.updateNonceSources(normalizedAddress, nonce);
      
      console.log(`‚úÖ Nonce –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${normalizedAddress}: ${nonce}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è nonce –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  async onTransactionFailure(address, failedNonce, reason) {
    const normalizedAddress = address.toLowerCase();
    
    try {
      console.warn(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è ${normalizedAddress}, nonce ${failedNonce}: ${reason}`);
      
      // –ï—Å–ª–∏ nonce —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à–∏
      if (reason && reason.includes('nonce too low')) {
        this.localNonce.delete(normalizedAddress);
        
        if (this.isConnected && this.redis) {
          await this.redis.del(`nonce:${normalizedAddress}`);
        }
        
        console.log(`üîÑ Nonce –∫–µ—à–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è ${normalizedAddress}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, error);
    }
  }

  // –°–±—Ä–æ—Å nonce –¥–ª—è –∞–¥—Ä–µ—Å–∞ (–≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º)
  async resetNonce(address) {
    const normalizedAddress = address.toLowerCase();
    
    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–µ—à–∏
      this.localNonce.delete(normalizedAddress);
      
      if (this.isConnected && this.redis) {
        await this.redis.del(`nonce:${normalizedAddress}`);
      }
      
      console.log(`üîÑ Nonce —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${normalizedAddress}`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ nonce –¥–ª—è ${normalizedAddress}:`, error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    return {
      redisConnected: this.isConnected,
      localCacheSize: this.localNonce.size,
      activeLocks: this.nonceLock.size,
      addresses: Array.from(this.localNonce.keys())
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  async cleanup() {
    try {
      this.localNonce.clear();
      this.nonceLock.clear();
      
      if (this.redis && this.isConnected) {
        await this.redis.disconnect();
      }
      
      console.log('üßπ Nonce Service –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Nonce Service:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö nonce
  async reserveNonces(address, count, web3Instance) {
    const normalizedAddress = address.toLowerCase();
    const nonces = [];
    
    // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –±–ª–æ–∫ nonce –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π
    while (this.nonceLock.get(normalizedAddress)) {
      await this.sleep(10);
    }
    
    this.nonceLock.set(normalizedAddress, true);
    
    try {
      const startNonce = await this.getNextNonce(normalizedAddress, web3Instance);
      
      for (let i = 0; i < count; i++) {
        nonces.push(startNonce + i);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º nonce –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
      await this.updateNonceSources(normalizedAddress, startNonce + count - 1);
      
      console.log(`üî¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ ${count} nonce –¥–ª—è ${normalizedAddress}: ${startNonce}-${startNonce + count - 1}`);
      
      return nonces;
    } finally {
      this.nonceLock.delete(normalizedAddress);
    }
  }
}

// Singleton instance
const nonceService = new NonceService();

module.exports = nonceService; 