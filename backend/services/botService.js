const TelegramBot = require('node-telegram-bot-api');
const config = require('../config/telegram');

class BotService {
  constructor() {
    this.bot = null;
    this.userChatIds = new Map();
    this.database = null; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
  setDatabase(database) {
    this.database = database;
    console.log('‚úÖ BotService: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  }

  async initialize() {
    if (!config.token) {
      console.warn('TELEGRAM_BOT_TOKEN not provided. Bot functionality will be disabled.');
      return null;
    }

    try {
      this.bot = new TelegramBot(config.token, config.options);
      console.log('Telegram bot initialized successfully');

      if (config.isProduction) {
        await this.setupWebhook();
      }

      this.setupCommands();
      return this.bot;
    } catch (error) {
      console.error('Failed to initialize Telegram bot:', error);
      return null;
    }
  }

  async setupWebhook() {
    const webhookPath = `/webhook/${config.token}`;
    const webhookUrl = `${config.url}${webhookPath}`;

    try {
      await this.bot.deleteWebHook();
      console.log('Old webhook removed');
      await this.bot.setWebHook(webhookUrl);
      console.log('Webhook set successfully:', webhookUrl);
    } catch (error) {
      console.error('Failed to set webhook:', error);
    }
  }

  setupCommands() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const user = msg.from;
      
      this.userChatIds.set(chatId, true);
      
      console.log('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
        id: user.id,
        username: user.username,
        first_name: user.first_name,
        last_name: user.last_name,
        chatId: chatId
      });

      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î
      await this.saveUserToDatabase(user, chatId);
      
      const welcomeMessage = `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TAPDEL!

üöÄ Tap-to-Earn –∏–≥—Ä–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ DecimalChain
üíé –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ BOOST —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Ç–∞–ø–∞–º–∏
üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏

–í–∞—à Telegram ID: ${user.id}
Chat ID: ${chatId}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É! üëá`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ WebApp
      const options = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üéÆ –ò–≥—Ä–∞—Ç—å TAPDEL',
                web_app: {
                  url: config.url
                }
              }
            ]
          ]
        }
      };

      await this.bot.sendMessage(chatId, welcomeMessage, options);
      console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    this.bot.on('message', async (msg) => {
      if (msg.text === '/start') return; // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ

      const user = msg.from;
      const chatId = msg.chat.id;

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      await this.updateUserActivity(user, chatId);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
    this.bot.on('callback_query', async (callbackQuery) => {
      const user = callbackQuery.from;
      const chatId = callbackQuery.message.chat.id;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      await this.updateUserActivity(user, chatId);
    });
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
  async saveUserToDatabase(telegramUser, chatId) {
    if (!this.database) {
      console.warn('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –±–æ—Ç—É');
      return;
    }

    try {
      const userId = `telegram-${telegramUser.id}`;
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userProfile = {
        userId: userId,
        username: `${telegramUser.first_name} ${telegramUser.last_name || ''}`.trim(),
        maxEnergy: 100,
        energyRecoveryRate: 1,
        maxGear: 'M',
        level: 1,
        experience: 0,
        createdAt: new Date(),
        lastLogin: new Date(),
        telegramId: telegramUser.id.toString(),
        telegramUsername: telegramUser.username,
        telegramFirstName: telegramUser.first_name,
        telegramLastName: telegramUser.last_name,
        chatId: chatId
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const result = await this.database.collection('users').updateOne(
        { userId: userId },
        {
          $set: {
            profile: userProfile,
            gameState: {
              tokens: 0,
              highScore: 0,
              engineLevel: 'Mk I',
              gearboxLevel: 'L1',
              batteryLevel: 'B1',
              hyperdriveLevel: 'H1',
              powerGridLevel: 'P1',
              lastSaved: new Date()
            },
            gameBalance: 0,
            transactions: [],
            updatedAt: new Date(),
            botInteraction: {
              firstInteraction: new Date(),
              lastSeen: new Date(),
              chatId: chatId
            }
          }
        },
        { upsert: true }
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
      await this.database.collection('leaderboard').updateOne(
        { userId: userId },
        {
          $set: {
            userId: userId,
            username: userProfile.username,
            telegramId: telegramUser.id.toString(),
            telegramUsername: telegramUser.username,
            telegramFirstName: telegramUser.first_name,
            telegramLastName: telegramUser.last_name,
            tokens: 0,
            rank: 1,
            updatedAt: new Date()
          }
        },
        { upsert: true }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
      await this.updateAllRanks();

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${result.upsertedCount ? '—Å–æ–∑–¥–∞–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω'} –≤ –ë–î`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', error);
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserActivity(telegramUser, chatId) {
    if (!this.database) return;

    try {
      const userId = `telegram-${telegramUser.id}`;

      await this.database.collection('users').updateOne(
        { userId: userId },
        {
          $set: {
            'botInteraction.lastSeen': new Date(),
            'botInteraction.chatId': chatId,
            updatedAt: new Date()
          }
        }
      );

      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
  async updateAllRanks() {
    if (!this.database) return;

    try {
      const users = await this.database.collection('leaderboard')
        .find()
        .sort({ tokens: -1 })
        .toArray();
      
      await Promise.all(users.map((user, index) => 
        this.database.collection('leaderboard').updateOne(
          { _id: user._id },
          { $set: { rank: index + 1 } }
        )
      ));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–æ–≤:', error);
    }
  }

  async sendMessage(chatId, message) {
    if (!this.bot) {
      throw new Error('Bot is not initialized');
    }
    return this.bot.sendMessage(chatId, message);
  }

  registerChatId(chatId) {
    this.userChatIds.set(chatId, true);
  }

  async shutdown() {
    if (!this.bot) return;

    if (config.isProduction) {
      try {
        await this.bot.deleteWebHook();
        console.log('Webhook removed');
      } catch (error) {
        console.error('Error removing webhook:', error);
      }
    } else {
      try {
        await this.bot.stopPolling();
        console.log('Bot polling stopped');
      } catch (error) {
        console.error('Error stopping bot:', error);
      }
    }
  }
}

module.exports = new BotService(); 