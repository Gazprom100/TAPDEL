const { connectToDatabase } = require('../config/database');

class TokenService {
  constructor() {
    this.activeToken = null;
    this.tokens = [];
    this.lastUpdate = null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
  async getActiveToken() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
      if (this.activeToken && this.lastUpdate && (Date.now() - this.lastUpdate) < 300000) {
        return this.activeToken;
      }

      const database = await connectToDatabase();
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
      const tokenConfig = await database.collection('system_config').findOne({ key: 'tokens' });
      
      if (tokenConfig && tokenConfig.value) {
        this.tokens = tokenConfig.value;
        this.activeToken = this.tokens.find(token => token.isActive);
        this.lastUpdate = Date.now();
        
        console.log(`ü™ô –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω: ${this.activeToken?.symbol || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        return this.activeToken;
      }

      // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      const defaultToken = {
        symbol: 'BOOST',
        address: '0x15cefa2ffb0759b519c15e23025a718978be9322',
        decimals: 18,
        name: 'BOOST Token',
        isActive: true
      };

      this.activeToken = defaultToken;
      this.lastUpdate = Date.now();
      
      return defaultToken;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error);
      
      // Fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
      return {
        symbol: 'BOOST',
        address: '0x15cefa2ffb0759b519c15e23025a718978be9322',
        decimals: 18,
        name: 'BOOST Token',
        isActive: true
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
  async getAllTokens() {
    try {
      const database = await connectToDatabase();
      
      const tokenConfig = await database.collection('system_config').findOne({ key: 'tokens' });
      
      if (tokenConfig && tokenConfig.value) {
        return tokenConfig.value;
      }

      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      return [
        {
          symbol: 'BOOST',
          address: '0x15cefa2ffb0759b519c15e23025a718978be9322',
          decimals: 18,
          name: 'BOOST Token',
          isActive: true
        },
        {
          symbol: 'DEL',
          address: '0x0000000000000000000000000000000000000000',
          decimals: 18,
          name: 'Decimal Token',
          isActive: false
        }
      ];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return [];
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
  async activateToken(symbol) {
    try {
      const database = await connectToDatabase();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const tokenConfig = await database.collection('system_config').findOne({ key: 'tokens' });
      const tokens = tokenConfig?.value || [];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
      const updatedTokens = tokens.map(token => ({
        ...token,
        isActive: token.symbol === symbol
      }));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      await database.collection('system_config').updateOne(
        { key: 'tokens' },
        { $set: { value: updatedTokens, updatedAt: new Date() } },
        { upsert: true }
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await database.collection('token_history').insertOne({
        symbol,
        address: tokens.find(t => t.symbol === symbol)?.address || '',
        changedAt: new Date(),
        changedBy: 'admin',
        reason: '–°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞'
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à
      this.activeToken = null;
      this.lastUpdate = null;
      
      console.log(`üîÑ –¢–æ–∫–µ–Ω ${symbol} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
  async addToken(tokenData) {
    try {
      const database = await connectToDatabase();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const tokenConfig = await database.collection('system_config').findOne({ key: 'tokens' });
      const tokens = tokenConfig?.value || [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (tokens.find(t => t.symbol === tokenData.symbol)) {
        throw new Error('–¢–æ–∫–µ–Ω —Å —Ç–∞–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const newToken = {
        symbol: tokenData.symbol.toUpperCase(),
        address: tokenData.address,
        decimals: tokenData.decimals || 18,
        name: tokenData.name,
        isActive: false
      };
      
      const updatedTokens = [...tokens, newToken];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      await database.collection('system_config').updateOne(
        { key: 'tokens' },
        { $set: { value: updatedTokens, updatedAt: new Date() } },
        { upsert: true }
      );
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à
      this.activeToken = null;
      this.lastUpdate = null;
      
      console.log(`‚ûï –¢–æ–∫–µ–Ω ${tokenData.symbol} –¥–æ–±–∞–≤–ª–µ–Ω`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
  async getTokenHistory() {
    try {
      const database = await connectToDatabase();
      
      const history = await database.collection('token_history')
        .find({})
        .sort({ changedAt: -1 })
        .limit(50)
        .toArray();
      
      return history;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  async getActiveTokenSymbol() {
    const activeToken = await this.getActiveToken();
    return activeToken?.symbol || 'BOOST';
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  async getActiveTokenAddress() {
    const activeToken = await this.getActiveToken();
    return activeToken?.address || '0x15cefa2ffb0759b519c15e23025a718978be9322';
  }
}

module.exports = new TokenService(); 