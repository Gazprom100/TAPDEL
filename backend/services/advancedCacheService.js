const Redis = require('redis');
const cacheService = require('./cacheService');

class AdvancedCacheService {
  constructor() {
    this.redis = null;
    this.localCache = new Map();
    this.localCacheMaxSize = 1000;
    this.isRedisAvailable = false;
    this.stats = {
      hits: 0,
      misses: 0,
      redisHits: 0,
      localHits: 0
    };
  }

  async initialize() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
      if (process.env.REDIS_URL) {
        this.redis = Redis.createClient({
          url: process.env.REDIS_URL,
          socket: {
            tls: process.env.REDIS_URL.includes('rediss://'),
            rejectUnauthorized: false
          }
        });

        await this.redis.connect();
        this.isRedisAvailable = true;
        console.log('‚úÖ AdvancedCacheService: Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
      } else {
        console.log('‚ö†Ô∏è AdvancedCacheService: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è AdvancedCacheService: Redis –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à:', error.message);
      this.isRedisAvailable = false;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  async cache(key, data, ttl = 300) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (this.isRedisAvailable && this.redis) {
        await this.redis.setex(key, ttl, JSON.stringify(data));
        console.log(`üíæ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–æ –≤ Redis: ${key} (TTL: ${ttl}s)`);
      }
      
      // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      this.setLocalCache(key, data, ttl * 1000);
      
      return true;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ${key}:`, error.message);
      return false;
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  async get(key) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      const localData = this.getLocalCache(key);
      if (localData) {
        this.stats.localHits++;
        this.stats.hits++;
        return localData;
      }

      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º Redis
      if (this.isRedisAvailable && this.redis) {
        const redisData = await this.redis.get(key);
        if (redisData) {
          const parsedData = JSON.parse(redisData);
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
          this.setLocalCache(key, parsedData, 60000); // 1 –º–∏–Ω—É—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ
          this.stats.redisHits++;
          this.stats.hits++;
          return parsedData;
        }
      }

      this.stats.misses++;
      return null;
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–∞ ${key}:`, error.message);
      return null;
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
  async cacheLeaderboard(data, ttl = 300) {
    const key = 'leaderboard:top100';
    await this.cache(key, data, ttl);
    await this.cache('leaderboard:timestamp', Date.now(), ttl);
  }

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async cacheUserProfile(userId, data, ttl = 600) {
    const key = `user:${userId}:profile`;
    await this.cache(key, data, ttl);
  }

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  async cacheGameState(userId, data, ttl = 120) {
    const key = `user:${userId}:gamestate`;
    await this.cache(key, data, ttl);
  }

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  async cacheBalance(userId, data, ttl = 300) {
    const key = `user:${userId}:balance`;
    await this.cache(key, data, ttl);
  }

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  async cacheTransactions(userId, data, ttl = 180) {
    const key = `user:${userId}:transactions`;
    await this.cache(key, data, ttl);
  }

  // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –º–µ—Ç–æ–¥—ã
  setLocalCache(key, value, ttl = 60000) {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
    if (this.localCache.size >= this.localCacheMaxSize) {
      const firstKey = this.localCache.keys().next().value;
      this.localCache.delete(firstKey);
    }

    this.localCache.set(key, {
      value,
      expires: Date.now() + ttl
    });
  }

  getLocalCache(key) {
    const item = this.localCache.get(key);
    if (!item || Date.now() > item.expires) {
      this.localCache.delete(key);
      return null;
    }
    return item.value;
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞
  async invalidate(pattern) {
    try {
      if (this.isRedisAvailable && this.redis) {
        const keys = await this.redis.keys(pattern);
        if (keys.length > 0) {
          await this.redis.del(keys);
          console.log(`üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω Redis –∫–µ—à: ${keys.length} –∫–ª—é—á–µ–π`);
        }
      }

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      for (const key of this.localCache.keys()) {
        if (key.includes(pattern.replace('*', ''))) {
          this.localCache.delete(key);
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞:', error.message);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    const totalRequests = this.stats.hits + this.stats.misses;
    const hitRate = totalRequests > 0 ? (this.stats.hits / totalRequests * 100).toFixed(2) : 0;
    
    return {
      ...this.stats,
      hitRate: `${hitRate}%`,
      localCacheSize: this.localCache.size,
      redisAvailable: this.isRedisAvailable
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  async clearCache() {
    try {
      if (this.isRedisAvailable && this.redis) {
        await this.redis.flushall();
        console.log('üóëÔ∏è Redis –∫–µ—à –æ—á–∏—â–µ–Ω');
      }
      
      this.localCache.clear();
      console.log('üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –æ—á–∏—â–µ–Ω');
      
      this.stats = { hits: 0, misses: 0, redisHits: 0, localHits: 0 };
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error.message);
    }
  }

  // Graceful shutdown
  async shutdown() {
    try {
      if (this.redis) {
        await this.redis.quit();
        console.log('üîå AdvancedCacheService: Redis –æ—Ç–∫–ª—é—á–µ–Ω');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Redis:', error.message);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const advancedCacheService = new AdvancedCacheService();

module.exports = advancedCacheService; 