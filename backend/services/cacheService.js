const redis = require('redis');
const config = require('../config/decimal');
const databaseConfig = require('../config/database');

class CacheService {
  constructor() {
    this.redis = null;
    this.isConnected = false;
    this.localCache = new Map(); // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    this.cacheStats = {
      hits: 0,
      misses: 0,
      errors: 0
    };
  }

  async initialize() {
    try {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–µ—à–∞...');
      
      const redisConfig = config.getRedisConfig();
      this.redis = redis.createClient(redisConfig);
      
      this.redis.on('error', (err) => {
        console.warn('‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞ (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–µ—à–∞):', err.message);
        this.cacheStats.errors++;
        this.isConnected = false;
      });

      this.redis.on('connect', () => {
        console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
        this.isConnected = true;
      });

      this.redis.on('disconnect', () => {
        console.log('‚ö†Ô∏è Redis –æ—Ç–∫–ª—é—á–µ–Ω');
        this.isConnected = false;
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å timeout
      const connectPromise = this.redis.connect();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Redis connection timeout')), 5000)
      );
      
      await Promise.race([connectPromise, timeoutPromise]);
      
      // –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
      await this.redis.ping();
      
      console.log('‚úÖ Cache Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Redis');
      return true;
    } catch (error) {
      console.warn('‚ö†Ô∏è Cache Service —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Redis:', error.message);
      this.isConnected = false;
      
      // –û—á–∏—â–∞–µ–º Redis –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (this.redis) {
        try {
          await this.redis.disconnect();
        } catch {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        }
        this.redis = null;
      }
      
      console.log('‚úÖ Cache Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à)');
      return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  async get(key) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      if (this.localCache.has(key)) {
        this.cacheStats.hits++;
        return this.localCache.get(key);
      }

      if (!this.isConnected) {
        this.cacheStats.misses++;
        return null;
      }

      const cached = await this.redis.get(key);
      if (cached) {
        this.cacheStats.hits++;
        const data = JSON.parse(cached);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        this.localCache.set(key, data);
        setTimeout(() => this.localCache.delete(key), 30000);
        
        return data;
      }

      this.cacheStats.misses++;
      return null;
    } catch (error) {
      console.error(`Cache get error for key ${key}:`, error);
      this.cacheStats.errors++;
      return null;
    }
  }

  async set(key, value, ttl = 300) {
    try {
      if (!this.isConnected) {
        return false;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
      const serialized = JSON.stringify(value);
      await this.redis.setEx(key, ttl, serialized);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      this.localCache.set(key, value);
      setTimeout(() => this.localCache.delete(key), Math.min(ttl * 1000, 30000));
      
      return true;
    } catch (error) {
      console.error(`Cache set error for key ${key}:`, error);
      this.cacheStats.errors++;
      return false;
    }
  }

  async del(key) {
    try {
      this.localCache.delete(key);
      
      if (this.isConnected) {
        await this.redis.del(key);
      }
      
      return true;
    } catch (error) {
      console.error(`Cache delete error for key ${key}:`, error);
      this.cacheStats.errors++;
      return false;
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è

  // –ö–µ—à –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  async getLeaderboard(page = 1, limit = 50) {
    const cacheKey = `leaderboard:page:${page}:limit:${limit}`;
    
    let cached = await this.get(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const data = await databaseConfig.getLeaderboard(page, limit);
      
      // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
      await this.set(cacheKey, data, 300);
      
      return data;
    } catch (error) {
      console.error('Error getting leaderboard:', error);
      return [];
    }
  }

  // –ö–µ—à —Ç–æ–ø-100 –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (—Å–∞–º—ã–π —á–∞—Å—Ç—ã–π –∑–∞–ø—Ä–æ—Å)
  async getTopLeaderboard() {
    const cacheKey = 'leaderboard:top100';
    
    let cached = await this.get(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      const data = await databaseConfig.getLeaderboard(1, 100);
      
      // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
      await this.set(cacheKey, data, 300);
      
      return data;
    } catch (error) {
      console.error('Error getting top leaderboard:', error);
      return [];
    }
  }

  // –ö–µ—à –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (10 –º–∏–Ω—É—Ç)
  async getUserProfile(userId) {
    const cacheKey = `user:profile:${userId}`;
    
    let cached = await this.get(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      const user = await databaseConfig.getUserProfile(userId);
      
      if (user) {
        // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
        await this.set(cacheKey, user, 600);
      }
      
      return user;
    } catch (error) {
      console.error('Error getting user profile:', error);
      return null;
    }
  }

  // –ö–µ—à –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π)
  async getUserGameState(userId) {
    const cacheKey = `user:gamestate:${userId}`;
    
    let cached = await this.get(cacheKey);
    if (cached) {
      return cached;
    }

    try {
      const user = await databaseConfig.getCollection('users').findOne(
        { userId },
        { projection: { gameState: 1, _id: 0 } }
      );
      
      if (user && user.gameState) {
        // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
        await this.set(cacheKey, user.gameState, 120);
        return user.gameState;
      }
      
      return null;
    } catch (error) {
      console.error('Error getting user game state:', error);
      return null;
    }
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  async invalidateUser(userId) {
    const keys = [
      `user:profile:${userId}`,
      `user:gamestate:${userId}`
    ];
    
    for (const key of keys) {
      await this.del(key);
    }
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
  async invalidateLeaderboard() {
    try {
      if (!this.isConnected) return;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
      const keys = await this.redis.keys('leaderboard:*');
      if (keys.length > 0) {
        await this.redis.del(keys);
      }
      
      console.log(`üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫–µ—à –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (${keys.length} –∫–ª—é—á–µ–π)`);
    } catch (error) {
      console.error('Error invalidating leaderboard cache:', error);
    }
  }

  // Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  async mget(keys) {
    try {
      if (!this.isConnected || keys.length === 0) {
        return [];
      }

      const results = await this.redis.mGet(keys);
      return results.map(result => {
        try {
          return result ? JSON.parse(result) : null;
        } catch {
          return null;
        }
      });
    } catch (error) {
      console.error('Cache mget error:', error);
      return new Array(keys.length).fill(null);
    }
  }

  async mset(keyValuePairs, ttl = 300) {
    try {
      if (!this.isConnected || keyValuePairs.length === 0) {
        return false;
      }

      const pipeline = this.redis.multi();
      
      for (const [key, value] of keyValuePairs) {
        pipeline.setEx(key, ttl, JSON.stringify(value));
      }
      
      await pipeline.exec();
      return true;
    } catch (error) {
      console.error('Cache mset error:', error);
      return false;
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
  getStats() {
    const totalRequests = this.cacheStats.hits + this.cacheStats.misses;
    const hitRate = totalRequests > 0 ? (this.cacheStats.hits / totalRequests * 100).toFixed(2) : 0;
    
    return {
      connected: this.isConnected,
      hits: this.cacheStats.hits,
      misses: this.cacheStats.misses,
      errors: this.cacheStats.errors,
      hitRate: `${hitRate}%`,
      localCacheSize: this.localCache.size
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
  clearLocalCache() {
    this.localCache.clear();
    console.log('üßπ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –æ—á–∏—â–µ–Ω');
  }

  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async preloadCriticalData() {
    try {
      console.log('üöÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø-100 –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
      await this.getTopLeaderboard();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
      for (let page = 1; page <= 5; page++) {
        await this.getLeaderboard(page, 50);
      }
      
      console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    }
  }

  async disconnect() {
    try {
      this.clearLocalCache();
      
      if (this.redis && this.isConnected) {
        await this.redis.disconnect();
      }
      
      this.isConnected = false;
      console.log('üìä Cache Service –æ—Ç–∫–ª—é—á–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Cache Service:', error);
    }
  }
}

// Singleton instance
const cacheService = new CacheService();

module.exports = cacheService; 