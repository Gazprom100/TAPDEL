const fetch = require('node-fetch');

class UpstashRedisService {
  constructor(restUrl, token) {
    this.restUrl = restUrl;
    this.token = token;
    this.baseUrl = restUrl.replace('/rest/v1', '');
    this.isConnected = false;
  }

  async connect() {
    try {
      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Upstash Redis —á–µ—Ä–µ–∑ REST API...');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ping
      const pingResponse = await fetch(`${this.restUrl}/ping`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        }
      });

      if (pingResponse.ok) {
        this.isConnected = true;
        console.log('‚úÖ Upstash Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ REST API');
        return true;
      } else {
        throw new Error(`Ping failed: ${pingResponse.status} ${pingResponse.statusText}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Upstash Redis:', error);
      this.isConnected = false;
      throw error;
    }
  }

  async get(key) {
    try {
      const response = await fetch(`${this.restUrl}/get/${key}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        return result.result; // Upstash –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ result
      } else if (response.status === 404) {
        return null; // –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
      } else {
        throw new Error(`GET failed: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ ${key}:`, error);
      throw error;
    }
  }

  async set(key, value, ttl = null) {
    try {
      const body = { value: value };
      if (ttl) {
        body.expiry = ttl;
      }

      const response = await fetch(`${this.restUrl}/set/${key}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      if (response.ok) {
        const result = await response.json();
        return result.result === 'OK';
      } else {
        throw new Error(`SET failed: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞ ${key}:`, error);
      throw error;
    }
  }

  async setEx(key, ttl, value) {
    return this.set(key, value, ttl);
  }

  async del(key) {
    try {
      const response = await fetch(`${this.restUrl}/del/${key}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        return result.result === 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
      } else {
        throw new Error(`DEL failed: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ ${key}:`, error);
      throw error;
    }
  }

  async ping() {
    try {
      const response = await fetch(`${this.restUrl}/ping`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.text();
        return result;
      } else {
        throw new Error(`PING failed: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ ping:', error);
      throw error;
    }
  }

  async quit() {
    this.isConnected = false;
    console.log('üîå Upstash Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å redis –∫–ª–∏–µ–Ω—Ç–æ–º
  async disconnect() {
    return this.quit();
  }

  on(event, callback) {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (event === 'connect') {
      setTimeout(() => callback(), 100);
    } else if (event === 'ready') {
      setTimeout(() => callback(), 200);
    } else if (event === 'error') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ try-catch
    } else if (event === 'end') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    }
  }
}

module.exports = UpstashRedisService; 