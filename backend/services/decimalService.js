const { Web3 } = require('web3');
const redis = require('redis');
const config = require('../config/decimal');
const UpstashRedisService = require('./upstashRedisService');

// –ò–º–ø–æ—Ä—Ç fetch –¥–ª—è Node.js
const fetch = require('node-fetch');

class DecimalService {
  constructor() {
    this.web3 = new Web3(config.RPC_URL);
    this.redis = null;
    this.hasRedis = false;
    this.isWatching = false;
    this.watchInterval = null;
    this.confirmInterval = null;
    this.withdrawInterval = null;
    this.lastNoWithdrawalsLog = null;
    this.localLastBlock = null; // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ –±–µ–∑ Redis
    this.isInitialized = false;
  }

  async initialize() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      if (!config.isConfigured()) {
        throw new Error('DecimalChain –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain RPC (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ)
      console.log('üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain RPC...');
      const blockNumber = await this.web3.eth.getBlockNumber();
      console.log(`‚úÖ DecimalService: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ DecimalChain RPC, –±–ª–æ–∫: ${blockNumber}`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis (–Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Upstash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        const upstashConfig = config.getUpstashConfig();
        
        if (upstashConfig) {
          console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Upstash Redis —á–µ—Ä–µ–∑ REST API...');
          this.redis = new UpstashRedisService(upstashConfig.restUrl, upstashConfig.token);
          await this.redis.connect();
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –∫–æ–º–∞–Ω–¥–æ–π ping
          const pong = await this.redis.ping();
          console.log(`‚úÖ DecimalService: Upstash Redis –ø–æ–¥–∫–ª—é—á–µ–Ω, ping: ${pong}`);
          this.hasRedis = true;
          
        } else {
          // –û–±—ã—á–Ω–æ–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          const redisConfig = config.getRedisConfig();
          console.log(`üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis: ${config.isUpstash() ? 'Upstash (TLS)' : 'Local'}`);
          
          this.redis = redis.createClient(redisConfig);
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Redis
          this.redis.on('error', (err) => {
            console.warn('‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞ (—Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Redis):', err.message);
            this.redis = null;
          });
          
          // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å timeout
          const connectPromise = this.redis.connect();
          const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Redis timeout')), 5000)
          );
          
          await Promise.race([connectPromise, timeoutPromise]);
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –∫–æ–º–∞–Ω–¥–æ–π ping
          const pong = await this.redis.ping();
          console.log(`‚úÖ DecimalService: Redis –ø–æ–¥–∫–ª—é—á–µ–Ω, ping: ${pong}`);
          this.hasRedis = true;
        }
        
      } catch (redisError) {
        console.warn('‚ö†Ô∏è DecimalService: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è nonce');
        console.warn('üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ Redis –æ—à–∏–±–∫–∏:', redisError.message);
        this.redis = null;
        this.hasRedis = false;
        this.localNonce = null; // –ë—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å nonce –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DecimalChain API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      try {
        const testResponse = await fetch(`${config.API_BASE_URL}/addresses/`, { timeout: 5000 });
        if (testResponse.ok) {
          console.log('‚úÖ DecimalService: API –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
          console.log('‚ö†Ô∏è DecimalService: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ RPC');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è DecimalService: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ RPC');
      }
      
      console.log('‚úÖ DecimalService: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      this.isInitialized = true;
      return true;
      
    } catch (error) {
      console.error('‚ùå DecimalService: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        code: error.code,
        redis_configured: !!config.REDIS_URL,
        upstash: config.isUpstash()
      });
      throw error;
    }
  }

  // === –†–ê–ë–û–¢–ê –° –ë–ê–õ–ê–ù–°–ê–ú–ò ===
  
  async getBalance(address) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API
      try {
        const balanceData = await config.getAddressBalance(address);
        if (balanceData && balanceData.result && balanceData.result.balance) {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ wei –≤ DEL (1 DEL = 10^18 wei)
          const balanceWei = BigInt(balanceData.result.balance);
          const balanceDel = Number(balanceWei) / 1000000000000000000;
          return balanceDel;
        }
      } catch (apiError) {
        console.log('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º RPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
      }
      
      // Fallback –Ω–∞ RPC
      const wei = await this.web3.eth.getBalance(this.web3.utils.toChecksumAddress(address));
      return parseFloat(this.web3.utils.fromWei(wei, 'ether'));
    } catch (error) {
      console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  }

  async getWorkingBalance() {
    return this.getBalance(config.WORKING_ADDRESS);
  }

  // === –†–ê–ë–û–¢–ê –° NONCE ===
  
  async getNonce(address, ttl = 30) {
    const key = `DECIMAL_NONCE_${address.toLowerCase()}`;
    
    try {
      let nonce;
      
      // –ï—Å–ª–∏ Redis –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è nonce
      if (this.hasRedis && this.redis) {
        try {
          const cached = await this.redis.get(key);
          
          if (cached !== null) {
            nonce = parseInt(cached) + 1;
          } else {
            const transactionCount = await this.web3.eth.getTransactionCount(
              this.web3.utils.toChecksumAddress(address)
            );
            nonce = Number(transactionCount);
          }
          
          await this.redis.setEx(key, ttl, nonce.toString());
          console.log(`üìù DecimalService: Nonce –ø–æ–ª—É—á–µ–Ω –∏–∑ Redis/–∫–µ—à–∏—Ä–æ–≤–∞–Ω: ${nonce}`);
          
        } catch (redisError) {
          console.warn('‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ nonce, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å:', redisError.message);
          // Fallback –Ω–∞ –ø—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ nonce
          const transactionCount = await this.web3.eth.getTransactionCount(
            this.web3.utils.toChecksumAddress(address)
          );
          nonce = Number(transactionCount);
          console.log(`üìù DecimalService: Nonce –ø–æ–ª—É—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞: ${nonce}`);
        }
      } else {
        // –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–∞–µ–º nonce –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
        const transactionCount = await this.web3.eth.getTransactionCount(
          this.web3.utils.toChecksumAddress(address)
        );
        nonce = Number(transactionCount);
        console.log(`üìù DecimalService: Nonce –ø–æ–ª—É—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ Redis): ${nonce}`);
      }
      
      return nonce;
      
    } catch (error) {
      console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è nonce:', error);
      throw error;
    }
  }

  // === –û–¢–ü–†–ê–í–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===
  
  async signAndSend(toAddress, amount) {
    try {
      console.log(`üîç DecimalService: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${amount} DEL ‚Üí ${toAddress}`);
      
      const privateKey = config.getPrivateKey();
      const fromAddress = config.WORKING_ADDRESS;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–æ
      const amountNum = parseFloat(amount);
      if (isNaN(amountNum) || amountNum <= 0) {
        throw new Error(`Invalid amount: ${amount}`);
      }
      
      console.log(`üìä DecimalService: –°—É–º–º–∞: ${amountNum} DEL`);
      
      // –ü–æ–ª—É—á–∞–µ–º nonce
      const nonce = await this.getNonce(fromAddress);
      console.log(`üìù DecimalService: Nonce: ${nonce}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–∞–∑ –ø—Ä–∞–π—Å –∏–∑ —Å–µ—Ç–∏
      const currentGasPrice = await config.getCurrentGasPrice();
      console.log(`‚õΩ DecimalService: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞–∑ –ø—Ä–∞–π—Å: ${currentGasPrice} gwei`);
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      // DecimalChain –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 18 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∫–∞–∫ Ethereum
      const transaction = {
        from: this.web3.utils.toChecksumAddress(fromAddress),
        to: this.web3.utils.toChecksumAddress(toAddress),
        value: this.web3.utils.toWei(amountNum.toString(), 'ether'), // 1 DEL = 10^18 wei
        gas: config.GAS_LIMIT,
        gasPrice: this.web3.utils.toWei(currentGasPrice.toString(), 'gwei'),
        nonce: nonce,
        chainId: config.CHAIN_ID
      };

      console.log(`üìã DecimalService: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:`, {
        from: transaction.from,
        to: transaction.to,
        value: amountNum + ' DEL',
        valueWei: transaction.value,
        gas: transaction.gas,
        gasPrice: currentGasPrice + ' gwei'
      });

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const signedTx = await this.web3.eth.accounts.signTransaction(transaction, privateKey);
      console.log(`‚úçÔ∏è DecimalService: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ API
      try {
        const apiResult = await config.sendTransaction(signedTx.rawTransaction);
        if (apiResult && apiResult.result && apiResult.result.hash) {
          console.log(`‚úÖ DecimalService: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API: ${apiResult.result.hash}`);
          return apiResult.result.hash;
        }
      } catch (apiError) {
        console.log('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º RPC –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      }
      
      // Fallback –Ω–∞ RPC
      const receipt = await this.web3.eth.sendSignedTransaction(signedTx.rawTransaction);
      
      console.log(`‚úÖ DecimalService: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ RPC: ${receipt.transactionHash}`);
      return receipt.transactionHash;
      
    } catch (error) {
      console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  }

  // === –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–ï–ü–û–ó–ò–¢–û–í ===
  
  async startWatching(database) {
    if (this.isWatching) {
      console.log('‚ö†Ô∏è DecimalService: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isWatching = true;
    console.log('üîç DecimalService: –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã
    this.startDepositWatcher(database);
    this.startConfirmationUpdater(database);
    this.startWithdrawalWorker(database);
    this.startExpiredDepositsCleaner(database);
  }

  async startDepositWatcher(database) {
    const pollInterval = 10000; // 10 —Å–µ–∫—É–Ω–¥
    
    this.watchInterval = setInterval(async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∏–ª–∏ –≤—ã–≤–æ–¥—ã
        const activeDeposits = await database.collection('deposits').countDocuments({
          matched: false,
          expiresAt: { $gt: new Date() }
        });
        
        const activeWithdrawals = await database.collection('withdrawals').countDocuments({
          status: { $in: ['queued', 'processing'] }
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤
        if (activeDeposits === 0 && activeWithdrawals === 0) {
          console.log('üí§ DecimalService: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤');
          return;
        }
        
        console.log(`üîç DecimalService: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–ª–æ–∫–æ–≤ (–¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${activeDeposits}, –≤—ã–≤–æ–¥–æ–≤: ${activeWithdrawals})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫
        const lastBlockKey = 'DECIMAL_LAST_BLOCK';
        let lastBlock;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (this.hasRedis && this.redis) {
          try {
            lastBlock = await this.redis.get(lastBlockKey);
          } catch (redisError) {
            console.warn('‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞:', redisError.message);
            lastBlock = null;
          }
        } else {
          // –ë–µ–∑ Redis –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
          lastBlock = this.localLastBlock;
        }
        
        if (!lastBlock) {
          const currentBlock = await this.web3.eth.getBlockNumber();
          lastBlock = Number(currentBlock) - 5; // –ù–∞—á–∏–Ω–∞–µ–º —Å 5 –±–ª–æ–∫–æ–≤ –Ω–∞–∑–∞–¥
        } else {
          lastBlock = parseInt(lastBlock);
        }

        const latestBlock = await this.web3.eth.getBlockNumber();
        const latestBlockNum = Number(latestBlock); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —á–∏—Å–ª–æ
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
        for (let blockNum = lastBlock + 1; blockNum <= latestBlockNum; blockNum++) {
          await this.processBlock(blockNum, database);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫
          if (this.hasRedis && this.redis) {
            try {
              await this.redis.set(lastBlockKey, blockNum.toString());
            } catch (redisError) {
              console.warn('‚ö†Ô∏è Redis –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞:', redisError.message);
              this.localLastBlock = blockNum; // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
            }
          } else {
            this.localLastBlock = blockNum; // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
          }
        }
        
      } catch (error) {
        console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      }
    }, pollInterval);
  }

  async processBlock(blockNumber, database) {
    try {
      const block = await this.web3.eth.getBlock(blockNumber, true);
      
      if (!block.transactions) return;

      for (const tx of block.transactions) {
        if (tx.to && tx.to.toLowerCase() === config.WORKING_ADDRESS.toLowerCase()) {
          const value = parseFloat(this.web3.utils.fromWei(tx.value, 'ether'));
          
          // –û–∫—Ä—É–≥–ª—è–µ–º value –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
          const roundedValue = Math.round(value * 10000) / 10000;
          const EPSILON = 0.00005;
          
          // –ò—â–µ–º –¥–µ–ø–æ–∑–∏—Ç —Å —Ç–∞–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π (—Å –¥–æ–ø—É—Å–∫–æ–º)
          // –û–∫—Ä—É–≥–ª—è–µ–º uniqueAmount –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const deposit = await database.collection('deposits').findOne({
            $expr: {
              $and: [
                { $gte: [{ $round: ["$uniqueAmount", 4] }, roundedValue - EPSILON] },
                { $lte: [{ $round: ["$uniqueAmount", 4] }, roundedValue + EPSILON] }
              ]
            },
            matched: false
          });

          if (deposit) {
            console.log(`üí∞ DecimalService: –ù–∞–π–¥–µ–Ω –¥–µ–ø–æ–∑–∏—Ç! ${deposit.userId}: ${deposit.amountRequested} DEL (tx: ${tx.hash})`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
            await database.collection('deposits').updateOne(
              { _id: deposit._id },
              {
                $set: {
                  txHash: tx.hash,
                  matched: true,
                  confirmations: 1,
                  matchedAt: new Date()
                }
              }
            );

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await database.collection('users').findOne({ userId: deposit.userId });
            if (!user) {
              console.error(`‚ùå DecimalService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${deposit.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞`);
              continue;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const currentTokens = user.gameState?.tokens || 0;
            const newTokens = currentTokens + deposit.amountRequested;
            
            await database.collection('users').updateOne(
              { userId: deposit.userId },
              {
                $set: {
                  "gameState.tokens": newTokens,
                  "gameState.lastSaved": new Date(),
                  updatedAt: new Date()
                }
              }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            await this.updateUserInLeaderboard(database, user, newTokens);

            console.log(`‚úÖ DecimalService: –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω! ${deposit.userId}: ${currentTokens} ‚Üí ${newTokens} DEL`);
          }
        }
      }
    } catch (error) {
      console.error(`‚ùå DecimalService: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ ${blockNumber}:`, error);
    }
  }

  async startConfirmationUpdater(database) {
    this.confirmInterval = setInterval(async () => {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –¥–µ–ø–æ–∑–∏—Ç—ã –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const pendingDeposits = await database.collection('deposits').find({
          matched: true,
          confirmations: { $lt: config.CONFIRMATIONS }
        }).toArray();

        const currentBlock = await this.web3.eth.getBlockNumber();
        const currentBlockNum = Number(currentBlock); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —á–∏—Å–ª–æ

        for (const deposit of pendingDeposits) {
          if (deposit.txHash) {
            try {
              const receipt = await this.web3.eth.getTransactionReceipt(deposit.txHash);
              if (receipt) {
                const confirmations = currentBlockNum - Number(receipt.blockNumber) + 1;
                
                await database.collection('deposits').updateOne(
                  { _id: deposit._id },
                  { $set: { confirmations: Math.max(0, confirmations) } }
                );
              }
            } catch (error) {
              console.error(`‚ùå DecimalService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è ${deposit.txHash}:`, error);
            }
          }
        }
      } catch (error) {
        console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π:', error);
      }
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥
  }

  async startWithdrawalWorker(database) {
    this.withdrawInterval = setInterval(async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–≤–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const queuedWithdrawals = await database.collection('withdrawals').countDocuments({
          status: 'queued'
        });
        
        const processingWithdrawals = await database.collection('withdrawals').countDocuments({
          status: 'processing'
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (queuedWithdrawals === 0 && processingWithdrawals === 0) {
          return; // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–µ –∑–∞—Å–æ—Ä—è–µ–º –ª–æ–≥–∏
        }
        
        console.log(`üîÑ DecimalService: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–æ–≤ (–≤ –æ—á–µ—Ä–µ–¥–∏: ${queuedWithdrawals}, –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${processingWithdrawals})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã –≤ —Å—Ç–∞—Ç—É—Å–µ processing (–±–µ–∑ processingStartedAt)
        const stuckWithdrawals = await database.collection('withdrawals').find({
          status: 'processing',
          $or: [
            { processingStartedAt: { $exists: false } },
            { processingStartedAt: { $lt: new Date(Date.now() - 5 * 60 * 1000) } } // 5 –º–∏–Ω—É—Ç
          ]
        }).toArray();

        if (stuckWithdrawals.length > 0) {
          console.log(`‚ö†Ô∏è DecimalService: –ù–∞–π–¥–µ–Ω–æ ${stuckWithdrawals.length} –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤`);
        }

        for (const stuck of stuckWithdrawals) {
          console.log(`‚ö†Ô∏è DecimalService: –ó–∞—Å—Ç—Ä—è–≤—à–∏–π –≤—ã–≤–æ–¥ ${stuck._id} –¥–ª—è ${stuck.userId}, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed`);
          
          await database.collection('withdrawals').updateOne(
            { _id: stuck._id },
            {
              $set: {
                status: 'failed',
                error: 'Timeout - processing took too long',
                processedAt: new Date()
              },
              $unset: { processingStartedAt: 1 }
            }
          );
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await database.collection('users').updateOne(
            { userId: stuck.userId },
            { $inc: { "gameState.tokens": stuck.amount } }
          );
          
          console.log(`üí∞ DecimalService: –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${stuck.userId}: +${stuck.amount} DEL`);
        }

        // –ù–∞—Ö–æ–¥–∏–º –æ–∂–∏–¥–∞—é—â–∏–π –≤—ã–≤–æ–¥ –∏ —Å—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
        const withdrawal = await database.collection('withdrawals').findOneAndUpdate(
          { status: 'queued' },
          { $set: { status: 'processing', processingStartedAt: new Date() } },
          { returnDocument: 'after' }
        );

        if (withdrawal && withdrawal.value) {
          const withdrawalData = withdrawal.value;
          try {
            console.log(`üîÑ DecimalService: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–≤–æ–¥–∞ ${withdrawalData._id} –¥–ª—è ${withdrawalData.userId}`);
            console.log(`üìã –î–µ—Ç–∞–ª–∏ –≤—ã–≤–æ–¥–∞: ${withdrawalData.amount} DEL ‚Üí ${withdrawalData.toAddress}`);
            
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º parseFloat –¥–ª—è —Å—É–º–º—ã
            const amountNum = parseFloat(withdrawalData.amount);
            if (isNaN(amountNum) || amountNum <= 0) {
              throw new Error(`Invalid amount for withdrawal: ${withdrawalData.amount}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            const workingBalance = await this.getWorkingBalance();
            if (workingBalance < amountNum) {
              throw new Error(`Insufficient working wallet balance: ${workingBalance} < ${amountNum}`);
            }
            
            console.log(`üí∞ DecimalService: –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${workingBalance} DEL`);
            
            const txHash = await this.signAndSend(withdrawalData.toAddress, amountNum);
            
            await database.collection('withdrawals').updateOne(
              { _id: withdrawalData._id },
              {
                $set: {
                  txHash: txHash,
                  status: 'sent',
                  processedAt: new Date()
                },
                $unset: { processingStartedAt: 1 }
              }
            );

            console.log(`üí∏ DecimalService: –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${amountNum} DEL ‚Üí ${withdrawalData.toAddress}`);
            console.log(`üìÑ TX Hash: ${txHash}`);
            
          } catch (error) {
            console.error(`‚ùå DecimalService: –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è ${withdrawalData.userId}:`, error.message);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            await database.collection('users').updateOne(
              { userId: withdrawalData.userId },
              { $inc: { "gameState.tokens": parseFloat(withdrawalData.amount) } }
            );
            console.log(`üí∞ DecimalService: –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawalData.userId}: +${withdrawalData.amount} DEL (–æ—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞)`);
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
            await database.collection('withdrawals').updateOne(
              { _id: withdrawalData._id },
              {
                $set: {
                  status: 'failed',
                  error: error.message,
                  processedAt: new Date(),
                  lastErrorAt: new Date()
                },
                $unset: { processingStartedAt: 1 }
              }
            );
          }
        }
      } catch (error) {
        console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ withdrawal worker:', error);
      }
    }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  }

  async startExpiredDepositsCleaner(database) {
    this.cleanerInterval = setInterval(async () => {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã (–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –∏—Å—Ç–µ–∫—à–∏–µ)
        const expiredDeposits = await database.collection('deposits').find({
          matched: false,
          expiresAt: { $lt: new Date() }
        }).toArray();

        if (expiredDeposits.length > 0) {
          console.log(`üßπ DecimalService: –ù–∞–π–¥–µ–Ω–æ ${expiredDeposits.length} –∏—Å—Ç–µ–∫—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
          
          for (const deposit of expiredDeposits) {
            const timeExpired = Math.round((new Date() - deposit.expiresAt) / 1000 / 60);
            console.log(`   - ${deposit.userId}: ${deposit.uniqueAmount} DEL (–∏—Å—Ç–µ–∫ ${timeExpired} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
          }
          
          // –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –∫–∞–∫ expired
          const result = await database.collection('deposits').updateMany(
            {
              matched: false,
              expiresAt: { $lt: new Date() }
            },
            {
              $set: {
                status: 'expired',
                expiredAt: new Date()
              }
            }
          );
          
          console.log(`‚úÖ DecimalService: ${result.modifiedCount} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ`);
        }
        
      } catch (error) {
        console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  async stopWatching() {
    this.isWatching = false;
    
    if (this.watchInterval) {
      clearInterval(this.watchInterval);
      this.watchInterval = null;
    }
    
    if (this.confirmInterval) {
      clearInterval(this.confirmInterval);
      this.confirmInterval = null;
    }
    
    if (this.withdrawInterval) {
      clearInterval(this.withdrawInterval);
      this.withdrawInterval = null;
    }
    
    if (this.cleanerInterval) {
      clearInterval(this.cleanerInterval);
      this.cleanerInterval = null;
    }
    
    console.log('üõë DecimalService: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  async disconnect() {
    await this.stopWatching();
    
    if (this.redis) {
      await this.redis.disconnect();
      console.log('üîí DecimalService: Redis –æ—Ç–∫–ª—é—á–µ–Ω');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
  async updateUserInLeaderboard(database, user, tokens) {
    try {
      const leaderboardEntry = {
        userId: user.userId,
        username: this.formatUserName(
          user.profile?.username, 
          user.profile?.telegramFirstName || user.telegramFirstName, 
          user.profile?.telegramLastName || user.telegramLastName, 
          user.profile?.telegramUsername || user.telegramUsername, 
          user.userId
        ),
        telegramId: user.profile?.telegramId || user.telegramId,
        telegramUsername: user.profile?.telegramUsername || user.telegramUsername,
        telegramFirstName: user.profile?.telegramFirstName || user.telegramFirstName,
        telegramLastName: user.profile?.telegramLastName || user.telegramLastName,
        tokens: tokens,
        updatedAt: new Date()
      };

      await database.collection('leaderboard').updateOne(
        { userId: user.userId },
        { $set: leaderboardEntry },
        { upsert: true }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
      await this.updateAllRanks(database);
      
      console.log(`üèÜ DecimalService: –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${user.userId} (${tokens} —Ç–æ–∫–µ–Ω–æ–≤)`);
    } catch (error) {
      console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–Ω–≥–æ–≤
  async updateAllRanks(database) {
    try {
      const users = await database.collection('leaderboard')
        .find()
        .sort({ tokens: -1 })
        .toArray();
      
      await Promise.all(users.map((user, index) => 
        database.collection('leaderboard').updateOne(
          { _id: user._id },
          { $set: { rank: index + 1 } }
        )
      ));
    } catch (error) {
      console.error('‚ùå DecimalService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–æ–≤:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  formatUserName(username, firstName, lastName, telegramUsername, userId) {
    if (firstName && lastName) {
      return `${firstName} ${lastName}`;
    } else if (firstName) {
      return firstName;
    } else if (telegramUsername) {
      return `@${telegramUsername}`;
    } else if (username) {
      return username;
    } else {
      return `–ò–≥—Ä–æ–∫ ${userId.slice(-4)}`;
    }
  }
}

module.exports = new DecimalService(); 