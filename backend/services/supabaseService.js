const fetch = require('node-fetch');
const supabaseConfig = require('../config/supabase');

class SupabaseService {
  constructor() {
    this.config = supabaseConfig;
    this.isInitialized = false;
  }

  async initialize() {
    try {
      if (!this.config.isConfigured()) {
        throw new Error('Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è');
      }

      console.log('üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
      const isConnected = await this.config.testConnection();
      
      if (!isConnected) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase');
      }

      console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      this.isInitialized = true;
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
      throw error;
    }
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  async request(endpoint, options = {}) {
    const url = `${this.config.getApiUrl()}/rest/v1${endpoint}`;
    const headers = this.config.getHeaders(options.useServiceKey);

    const response = await fetch(url, {
      ...options,
      headers: {
        ...headers,
        ...options.headers
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Supabase API error: ${response.status} ${errorText}`);
    }

    return response.json();
  }

  // === –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

  async createUser(userData) {
    return this.request('/users', {
      method: 'POST',
      body: JSON.stringify(userData),
      useServiceKey: true
    });
  }

  async getUser(userId) {
    const response = await this.request(`/users?userId=eq.${userId}&select=*`, {
      method: 'GET'
    });
    return response[0] || null;
  }

  async updateUser(userId, userData) {
    return this.request(`/users?userId=eq.${userId}`, {
      method: 'PATCH',
      body: JSON.stringify(userData),
      useServiceKey: true
    });
  }

  async deleteUser(userId) {
    return this.request(`/users?userId=eq.${userId}`, {
      method: 'DELETE',
      useServiceKey: true
    });
  }

  async getAllUsers(limit = 100, offset = 0) {
    return this.request(`/users?select=*&limit=${limit}&offset=${offset}&order=createdAt.desc`, {
      method: 'GET'
    });
  }

  // === –†–ê–ë–û–¢–ê –° –õ–ò–î–ï–†–ë–û–†–î–û–ú ===

  async createLeaderboardEntry(entryData) {
    return this.request('/leaderboard', {
      method: 'POST',
      body: JSON.stringify(entryData),
      useServiceKey: true
    });
  }

  async getLeaderboard(limit = 100, offset = 0) {
    return this.request(`/leaderboard?select=*&limit=${limit}&offset=${offset}&order=tokens.desc`, {
      method: 'GET'
    });
  }

  async updateLeaderboardEntry(userId, entryData) {
    return this.request(`/leaderboard?userId=eq.${userId}`, {
      method: 'PATCH',
      body: JSON.stringify(entryData),
      useServiceKey: true
    });
  }

  async deleteLeaderboardEntry(userId) {
    return this.request(`/leaderboard?userId=eq.${userId}`, {
      method: 'DELETE',
      useServiceKey: true
    });
  }

  // === –†–ê–ë–û–¢–ê –° –î–ï–ü–û–ó–ò–¢–ê–ú–ò ===

  async createDeposit(depositData) {
    return this.request('/deposits', {
      method: 'POST',
      body: JSON.stringify(depositData),
      useServiceKey: true
    });
  }

  async getDeposits(userId = null, limit = 100, offset = 0) {
    const filter = userId ? `userId=eq.${userId}&` : '';
    return this.request(`/deposits?${filter}select=*&limit=${limit}&offset=${offset}&order=createdAt.desc`, {
      method: 'GET'
    });
  }

  async updateDeposit(depositId, depositData) {
    return this.request(`/deposits?id=eq.${depositId}`, {
      method: 'PATCH',
      body: JSON.stringify(depositData),
      useServiceKey: true
    });
  }

  // === –†–ê–ë–û–¢–ê –° –í–´–í–û–î–ê–ú–ò ===

  async createWithdrawal(withdrawalData) {
    return this.request('/withdrawals', {
      method: 'POST',
      body: JSON.stringify(withdrawalData),
      useServiceKey: true
    });
  }

  async getWithdrawals(userId = null, limit = 100, offset = 0) {
    const filter = userId ? `userId=eq.${userId}&` : '';
    return this.request(`/withdrawals?${filter}select=*&limit=${limit}&offset=${offset}&order=createdAt.desc`, {
      method: 'GET'
    });
  }

  async updateWithdrawal(withdrawalId, withdrawalData) {
    return this.request(`/withdrawals?id=eq.${withdrawalId}`, {
      method: 'PATCH',
      body: JSON.stringify(withdrawalData),
      useServiceKey: true
    });
  }

  // === –†–ê–ë–û–¢–ê –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ===

  async getAdminSettings() {
    const response = await this.request('/admin_settings?select=*', {
      method: 'GET'
    });
    return response[0] || null;
  }

  async updateAdminSettings(settingsData) {
    return this.request('/admin_settings', {
      method: 'POST',
      body: JSON.stringify(settingsData),
      useServiceKey: true
    });
  }

  // === –†–ê–ë–û–¢–ê –° –¢–û–ö–ï–ù–ê–ú–ò ===

  async getTokenConfig() {
    const response = await this.request('/system_config?key=eq.tokens&select=*', {
      method: 'GET'
    });
    return response[0] || null;
  }

  async updateTokenConfig(tokenData) {
    return this.request('/system_config', {
      method: 'POST',
      body: JSON.stringify({
        key: 'tokens',
        value: tokenData,
        updatedAt: new Date().toISOString()
      }),
      useServiceKey: true
    });
  }

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

  async getStatistics() {
    const [users, leaderboard, deposits, withdrawals] = await Promise.all([
      this.request('/users?select=count', { method: 'GET' }),
      this.request('/leaderboard?select=count', { method: 'GET' }),
      this.request('/deposits?select=count', { method: 'GET' }),
      this.request('/withdrawals?select=count', { method: 'GET' })
    ]);

    return {
      totalUsers: users[0]?.count || 0,
      totalLeaderboard: leaderboard[0]?.count || 0,
      totalDeposits: deposits[0]?.count || 0,
      totalWithdrawals: withdrawals[0]?.count || 0
    };
  }

  // === –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===

  async migrateFromMongoDB(mongoData) {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ Supabase...');
    
    try {
      // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (mongoData.users && mongoData.users.length > 0) {
        console.log(`üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º ${mongoData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
        for (const user of mongoData.users) {
          await this.createUser(user);
        }
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      }

      // –ú–∏–≥—Ä–∞—Ü–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
      if (mongoData.leaderboard && mongoData.leaderboard.length > 0) {
        console.log(`üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º ${mongoData.leaderboard.length} –∑–∞–ø–∏—Å–µ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...`);
        for (const entry of mongoData.leaderboard) {
          await this.createLeaderboardEntry(entry);
        }
        console.log('‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω');
      }

      // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      if (mongoData.deposits && mongoData.deposits.length > 0) {
        console.log(`üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º ${mongoData.deposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤...`);
        for (const deposit of mongoData.deposits) {
          await this.createDeposit(deposit);
        }
        console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      }

      // –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–≤–æ–¥–æ–≤
      if (mongoData.withdrawals && mongoData.withdrawals.length > 0) {
        console.log(`üì¶ –ú–∏–≥—Ä–∏—Ä—É–µ–º ${mongoData.withdrawals.length} –≤—ã–≤–æ–¥–æ–≤...`);
        for (const withdrawal of mongoData.withdrawals) {
          await this.createWithdrawal(withdrawal);
        }
        console.log('‚úÖ –í—ã–≤–æ–¥—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      }

      console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
}

module.exports = new SupabaseService();
