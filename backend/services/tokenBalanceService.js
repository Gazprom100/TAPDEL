const { connectToDatabase } = require('../config/database');

class TokenBalanceService {
  constructor() {
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  async saveUserTokenBalance(userId, tokenSymbol, balance, highScore) {
    try {
      const database = await connectToDatabase();
      
      const balanceData = {
        userId,
        tokenSymbol,
        balance,
        highScore,
        lastUpdated: new Date(),
        isActive: false
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
      await database.collection('user_token_balances').updateOne(
        { userId, tokenSymbol },
        { $set: balanceData },
        { upsert: true }
      );

      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Ç–æ–∫–µ–Ω ${tokenSymbol}: ${balance}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  async getUserTokenBalance(userId, tokenSymbol) {
    try {
      const database = await connectToDatabase();
      
      const balance = await database.collection('user_token_balances').findOne({
        userId,
        tokenSymbol
      });

      return balance || {
        userId,
        tokenSymbol,
        balance: 0,
        highScore: 0,
        lastUpdated: new Date(),
        isActive: false
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º
  async getAllUserTokenBalances(userId) {
    try {
      const database = await connectToDatabase();
      
      const balances = await database.collection('user_token_balances')
        .find({ userId })
        .sort({ lastUpdated: -1 })
        .toArray();

      return balances;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return [];
    }
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  async migrateToNewToken(oldTokenSymbol, newTokenSymbol) {
    try {
      const database = await connectToDatabase();
      
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å ${oldTokenSymbol} –Ω–∞ ${newTokenSymbol}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await database.collection('users').find({}).toArray();
      
      let migratedCount = 0;
      let errorCount = 0;

      for (const user of users) {
        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—Ç–∞—Ä–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
          if (user.gameState && user.gameState.tokens !== undefined) {
            await this.saveUserTokenBalance(
              user.userId,
              oldTokenSymbol,
              user.gameState.tokens,
              user.gameState.highScore || 0
            );
          }

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
          // –ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–ø–≥—Ä–µ–π–¥—ã
          const updatedGameState = {
            ...user.gameState,
            tokens: 0,
            highScore: 0
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await database.collection('users').updateOne(
            { userId: user.userId },
            { $set: { gameState: updatedGameState } }
          );

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
          await this.saveUserTokenBalance(
            user.userId,
            newTokenSymbol,
            0,
            0
          );

          // –ü–æ–º–µ—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
          await database.collection('user_token_balances').updateOne(
            { userId: user.userId, tokenSymbol: newTokenSymbol },
            { $set: { isActive: true } }
          );

          // –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
          await database.collection('user_token_balances').updateOne(
            { userId: user.userId, tokenSymbol: oldTokenSymbol },
            { $set: { isActive: false } }
          );

          migratedCount++;
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}:`, error);
          errorCount++;
        }
      }

      console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${migratedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—à–∏–±–æ–∫: ${errorCount}`);
      return { success: true, migratedCount, errorCount };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return { success: false, error: error.message };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–∫–µ–Ω–∞–º
  async getTokenStatistics() {
    try {
      const database = await connectToDatabase();
      
      const stats = await database.collection('user_token_balances').aggregate([
        {
          $group: {
            _id: '$tokenSymbol',
            totalUsers: { $sum: 1 },
            totalBalance: { $sum: '$balance' },
            totalHighScore: { $sum: '$highScore' },
            activeUsers: {
              $sum: { $cond: ['$isActive', 1, 0] }
            }
          }
        }
      ]).toArray();

      return stats;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return [];
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
  clearCache() {
    this.cache.clear();
  }
}

module.exports = new TokenBalanceService(); 