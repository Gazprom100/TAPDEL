const databaseConfig = require('../config/database');
const decimalService = require('./decimalService');

class WithdrawalBatchService {
  constructor() {
    this.batchSize = 10;
    this.processingInterval = 30000; // 30 —Å–µ–∫—É–Ω–¥
    this.maxRetries = 3;
    this.isProcessing = false;
    this.stats = {
      totalProcessed: 0,
      successful: 0,
      failed: 0,
      averageProcessingTime: 0
    };
  }

  async initialize() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WithdrawalBatchService...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º batch processing
    this.startBatchProcessing();
    
    console.log(`‚úÖ WithdrawalBatchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
    console.log(`   - Batch size: ${this.batchSize}`);
    console.log(`   - Processing interval: ${this.processingInterval}ms`);
    console.log(`   - Max retries: ${this.maxRetries}`);
  }

  async startBatchProcessing() {
    setInterval(async () => {
      if (!this.isProcessing) {
        await this.processBatch();
      }
    }, this.processingInterval);
  }

  async processBatch() {
    if (this.isProcessing) {
      console.log('‚ö†Ô∏è Batch processing —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    this.isProcessing = true;
    const startTime = Date.now();

    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É batch –≤—ã–≤–æ–¥–æ–≤...');
      
      const database = await databaseConfig.connect();
      if (!database) {
        throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }

      // –ü–æ–ª—É—á–∞–µ–º pending –≤—ã–≤–æ–¥—ã
      const pendingWithdrawals = await this.getPendingWithdrawals(database);
      
      if (pendingWithdrawals.length === 0) {
        console.log('üí§ –ù–µ—Ç pending –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        this.isProcessing = false;
        return;
      }

      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º batch –∏–∑ ${pendingWithdrawals.length} –≤—ã–≤–æ–¥–æ–≤`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const results = await Promise.allSettled(
        pendingWithdrawals.map(withdrawal => this.processWithdrawal(withdrawal))
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const successful = results.filter(r => r.status === 'fulfilled').length;
      const failed = results.filter(r => r.status === 'rejected').length;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.stats.totalProcessed += pendingWithdrawals.length;
      this.stats.successful += successful;
      this.stats.failed += failed;
      this.stats.averageProcessingTime = (Date.now() - startTime) / pendingWithdrawals.length;

      console.log(`‚úÖ Batch –∑–∞–≤–µ—Ä—à–µ–Ω:`);
      console.log(`   - –£—Å–ø–µ—à–Ω–æ: ${successful}`);
      console.log(`   - –ù–µ—É–¥–∞—á–Ω–æ: ${failed}`);
      console.log(`   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Date.now() - startTime}ms`);

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      results.forEach((result, index) => {
        if (result.status === 'rejected') {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ ${pendingWithdrawals[index]._id}:`, result.reason);
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ batch processing:', error);
    } finally {
      this.isProcessing = false;
    }
  }

  async getPendingWithdrawals(database) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥—ã –≤ —Å—Ç–∞—Ç—É—Å–µ processing –∏–ª–∏ queued
      const withdrawals = await database.collection('withdrawals').find({
        status: { $in: ['processing', 'queued'] },
        $or: [
          { processingStartedAt: { $exists: false } },
          { processingStartedAt: { $lt: new Date(Date.now() - 5 * 60 * 1000) } } // 5 –º–∏–Ω—É—Ç
        ]
      }).limit(this.batchSize).toArray();

      return withdrawals;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –≤—ã–≤–æ–¥–æ–≤:', error);
      return [];
    }
  }

  async processWithdrawal(withdrawal) {
    const database = await databaseConfig.connect();
    
    try {
      console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥: ${withdrawal._id} (${withdrawal.amount} DEL)`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ processing
      await database.collection('withdrawals').updateOne(
        { _id: withdrawal._id },
        { 
          $set: { 
            status: 'processing',
            processingStartedAt: new Date(),
            retryCount: (withdrawal.retryCount || 0) + 1
          }
        }
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      const workingBalance = await decimalService.getWorkingBalance();
      if (workingBalance < withdrawal.amount) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ—à–µ–ª—å–∫–µ: ${workingBalance} < ${withdrawal.amount}`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const txHash = await decimalService.sendWithdrawal(
        withdrawal.userId,
        withdrawal.amount,
        withdrawal.toAddress
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed
      await database.collection('withdrawals').updateOne(
        { _id: withdrawal._id },
        { 
          $set: { 
            status: 'completed',
            txHash: txHash,
            completedAt: new Date()
          }
        }
      );

      console.log(`‚úÖ –í—ã–≤–æ–¥ ${withdrawal._id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${txHash}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await database.collection('users').updateOne(
        { userId: withdrawal.userId },
        { 
          $inc: { "gameState.tokens": -withdrawal.amount },
          $set: { updatedAt: new Date() }
        }
      );

      return { success: true, txHash };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ ${withdrawal._id}:`, error.message);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      const retryCount = (withdrawal.retryCount || 0) + 1;
      
      if (retryCount >= this.maxRetries) {
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
        await database.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          { 
            $set: { 
              status: 'failed',
              error: error.message,
              failedAt: new Date()
            }
          }
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await database.collection('users').updateOne(
          { userId: withdrawal.userId },
          { 
            $inc: { "gameState.tokens": withdrawal.amount },
            $set: { updatedAt: new Date() }
          }
        );

        console.log(`üí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${withdrawal.userId}: ${withdrawal.amount} DEL`);
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        await database.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          { 
            $set: { 
              status: 'queued',
              processingStartedAt: null,
              error: error.message
            }
          }
        );
      }

      throw error;
    }
  }

  // –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
  async processSpecificWithdrawal(withdrawalId) {
    const database = await databaseConfig.connect();
    const withdrawal = await database.collection('withdrawals').findOne({ _id: withdrawalId });
    
    if (!withdrawal) {
      throw new Error('–í—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return await this.processWithdrawal(withdrawal);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    return {
      ...this.stats,
      successRate: this.stats.totalProcessed > 0 
        ? ((this.stats.successful / this.stats.totalProcessed) * 100).toFixed(2) + '%'
        : '0%',
      isProcessing: this.isProcessing
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
  async cleanupOldRecords() {
    try {
      const database = await databaseConfig.connect();
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
      
      const result = await database.collection('withdrawals').deleteMany({
        createdAt: { $lt: thirtyDaysAgo },
        status: { $in: ['completed', 'failed'] }
      });

      console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤—ã–≤–æ–¥–æ–≤`);
      
      return result.deletedCount;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
      return 0;
    }
  }

  // Graceful shutdown
  async shutdown() {
    console.log('üîå WithdrawalBatchService: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    this.isProcessing = false;
  }
}

// –°–æ–∑–¥–∞–µ–º singleton instance
const withdrawalBatchService = new WithdrawalBatchService();

module.exports = withdrawalBatchService; 