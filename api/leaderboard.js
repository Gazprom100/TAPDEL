const express = require('express');
const { MongoClient } = require('mongodb');
require('dotenv').config();

const app = express();

// Database configuration
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%25sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  return `mongodb+srv://${username}:${password}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

let client = null;
let db = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const connectToDatabase = async () => {
  if (!client) {
    try {
      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
      client = new MongoClient(MONGODB_URI);
      await client.connect();
      db = client.db(MONGODB_DB);
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
      throw error;
    }
  }
  return db;
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const formatUserName = (username, telegramFirstName, telegramLastName, telegramUsername, userId) => {
  const isValidValue = (value) => 
    value !== null && value !== undefined && value !== 'null' && 
    typeof value === 'string' && value.trim() !== '';

  if (isValidValue(username)) return username;
  
  if (isValidValue(telegramFirstName) && isValidValue(telegramLastName)) {
    return `${telegramFirstName} ${telegramLastName}`;
  }
  
  if (isValidValue(telegramFirstName)) return telegramFirstName;
  if (isValidValue(telegramUsername)) return telegramUsername;
  
  return `–ò–≥—Ä–æ–∫ ${userId?.slice(-4) || '0000'}`;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–Ω–≥–æ–≤
async function updateAllRanks(database) {
  try {
    const users = await database.collection('leaderboard')
      .find()
      .sort({ tokens: -1 })
      .toArray();
    
    await Promise.all(users.map((user, index) => 
      database.collection('leaderboard').updateOne(
        { _id: user._id },
        { $set: { rank: index + 1 } }
      )
    ));
  } catch (error) {
    console.error('Error updating ranks:', error);
  }
}

// GET /api/leaderboard
app.get('/api/leaderboard', async (req, res) => {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
    const limit = parseInt(req.query.limit) || 100;
    const page = parseInt(req.query.page) || 1;
    
    const database = await connectToDatabase();
    
    if (!database) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return res.status(503).json({ message: 'Database unavailable' });
    }
    
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...');
    const skip = (page - 1) * limit;
    const leaderboard = await database.collection('leaderboard')
      .find()
      .sort({ tokens: -1 })
      .skip(skip)
      .limit(limit)
      .toArray();
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${leaderboard.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ`);
    
    if (leaderboard.length === 0) {
      console.log('‚ö†Ô∏è –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    } else {
      console.log('üèÜ –¢–æ–ø-3:', leaderboard.slice(0, 3).map(u => `${u.telegramFirstName || u.username}: ${u.tokens}`));
    }
    
    res.json(leaderboard);
  } catch (error) {
    console.error('‚ùå Error getting leaderboard:', error);
    res.status(500).json({ 
      message: 'Internal server error',
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// POST /api/leaderboard
app.post('/api/leaderboard', async (req, res) => {
  try {
    const entry = req.body;
    console.log(`üèÜ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –¥–ª—è ${entry.userId}:`, {
      username: entry.username,
      telegramFirstName: entry.telegramFirstName,
      telegramUsername: entry.telegramUsername,
      tokens: entry.tokens
    });
    
    const database = await connectToDatabase();
    
    if (!database) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return res.status(503).json({ message: 'Database unavailable' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await database.collection('leaderboard').updateOne(
      { userId: entry.userId },
      {
        $set: {
          userId: entry.userId,
          username: formatUserName(
            entry.username,
            entry.telegramFirstName,
            entry.telegramLastName,
            entry.telegramUsername,
            entry.userId
          ),
          telegramId: entry.telegramId,
          telegramUsername: entry.telegramUsername,
          telegramFirstName: entry.telegramFirstName,
          telegramLastName: entry.telegramLastName,
          tokens: entry.tokens || entry.score || 0,
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );

    console.log(`‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${entry.userId} ${result.upsertedCount ? '–¥–æ–±–∞–≤–ª–µ–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω'} –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await updateAllRanks(database);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedUser = await database.collection('leaderboard').findOne({ userId: entry.userId });
    console.log(`üéØ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:`, {
      userId: updatedUser.userId,
      username: updatedUser.username,
      tokens: updatedUser.tokens,
      rank: updatedUser.rank
    });
    
    res.json({ message: 'Leaderboard updated successfully' });
  } catch (error) {
    console.error('‚ùå API: Error updating leaderboard:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

module.exports = app;
