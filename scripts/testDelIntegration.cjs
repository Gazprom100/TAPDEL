const fetch = require('node-fetch');

const API_BASE_URL = 'http://localhost:3000';

async function testDelIntegration() {
  const testUserId = 'test_del_integration_' + Date.now();
  
  console.log('üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DEL –ò–ù–¢–ï–ì–†–ê–¶–ò–ò');
  console.log('=====================================\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const initResponse = await fetch(`${API_BASE_URL}/api/users/${testUserId}/initialize`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        profile: {
          username: 'Test DEL User',
          telegramId: '123456789'
        },
        gameState: {
          tokens: 0,
          highScore: 0
        }
      })
    });
    
    if (initResponse.ok) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${initResponse.status}`);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüí∞ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ DEL –±–∞–ª–∞–Ω—Å–∞...');
    const balanceResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/balance`);
    
    if (balanceResponse.ok) {
      const balanceData = await balanceResponse.json();
      console.log(`‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balanceData.gameBalance} DEL`);
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balanceResponse.status}`);
    }
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
    console.log('\nüì• 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞...');
    const depositResponse = await fetch(`${API_BASE_URL}/api/decimal/deposits`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: testUserId,
        baseAmount: 1.0
      })
    });
    
    if (depositResponse.ok) {
      const depositData = await depositResponse.json();
      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω:`);
      console.log(`   ID: ${depositData.depositId}`);
      console.log(`   –°—É–º–º–∞: ${depositData.uniqueAmount} DEL`);
      console.log(`   –ê–¥—Ä–µ—Å: ${depositData.address}`);
    } else {
      const error = await depositResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞: ${depositResponse.status} - ${error}`);
    }
    
    // 4. –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
    console.log('\n‚úÖ 4. –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞...');
    const depositAmount = 1.0;
    const mockDepositResponse = await fetch(`${API_BASE_URL}/api/users/${testUserId}/deposit`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'X-Internal-Secret': process.env.INTERNAL_SECRET || ''
      },
      body: JSON.stringify({
        amount: depositAmount
      })
    });
    
    if (mockDepositResponse.ok) {
      const result = await mockDepositResponse.json();
      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: +${depositAmount} DEL`);
      console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newTokens} DEL`);
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞: ${mockDepositResponse.status}`);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞
    console.log('\nüí∞ 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è...');
    const newBalanceResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/balance`);
    
    if (newBalanceResponse.ok) {
      const balanceData = await newBalanceResponse.json();
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balanceData.gameBalance} DEL`);
      
      if (balanceData.gameBalance >= depositAmount) {
        console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!`);
      } else {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –±–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É`);
      }
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${newBalanceResponse.status}`);
    }
    
    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    console.log('\nüì§ 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤...');
    const withdrawAmount = 0.5;
    const withdrawResponse = await fetch(`${API_BASE_URL}/api/decimal/withdrawals`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: testUserId,
        toAddress: '0x1234567890123456789012345678901234567890',
        amount: withdrawAmount
      })
    });
    
    if (withdrawResponse.ok) {
      const withdrawData = await withdrawResponse.json();
      console.log(`‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω:`);
      console.log(`   ID: ${withdrawData.withdrawalId}`);
      console.log(`   –°—É–º–º–∞: ${withdrawData.amount} DEL`);
      console.log(`   –ê–¥—Ä–µ—Å: ${withdrawData.toAddress}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawData.status}`);
    } else {
      const error = await withdrawResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞: ${withdrawResponse.status} - ${error}`);
    }
    
    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüí∞ 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
    const finalBalanceResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/balance`);
    
    if (finalBalanceResponse.ok) {
      const balanceData = await finalBalanceResponse.json();
      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balanceData.gameBalance} DEL`);
      
      const expectedBalance = depositAmount - withdrawAmount;
      if (Math.abs(balanceData.gameBalance - expectedBalance) < 0.001) {
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! (–æ–∂–∏–¥–∞–ª—Å—è: ${expectedBalance} DEL)`);
      } else {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –æ–∂–∏–¥–∞–ª—Å—è –±–∞–ª–∞–Ω—Å ${expectedBalance} DEL`);
      }
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: ${finalBalanceResponse.status}`);
    }
    
    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    console.log('\nüìã 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
    const depositsResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/deposits`);
    
    if (depositsResponse.ok) {
      const deposits = await depositsResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`);
    } else {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${depositsResponse.status}`);
    }
    
    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤
    console.log('\nüìã 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤...');
    const withdrawalsResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/withdrawals`);
    
    if (withdrawalsResponse.ok) {
      const withdrawals = await withdrawalsResponse.json();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawals.length}`);
    } else {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤: ${withdrawalsResponse.status}`);
    }
    
    console.log('\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('==========================================');
    console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ DEL —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:');
    console.log('   - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞');
    console.log('   - –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
    console.log('   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π');
    console.log('   - –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–æ–≤');
    console.log('   - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.error(error.message);
    console.error('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.error('   - –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (npm start)');
    console.error('   - –ü—Ä–æ–±–ª–µ–º—ã —Å MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
    console.error('   - –û—à–∏–±–∫–∏ –≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testDelIntegration(); 