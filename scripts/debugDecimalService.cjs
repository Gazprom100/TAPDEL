const { MongoClient } = require('mongodb');

// MongoDB –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function debugDecimalService() {
  let client = null;
  
  try {
    console.log('üîç –û–¢–õ–ê–î–ö–ê DECIMAL SERVICE');
    console.log('=========================\n');
    
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    const db = client.db(MONGODB_DB);
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –≤—ã–≤–æ–¥–æ–≤
    console.log('\nüìã 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–≤–æ–¥–æ–≤:');
    
    const queuedWithdrawals = await db.collection('withdrawals').find({
      status: 'queued'
    }).toArray();
    
    console.log(`   –í—ã–≤–æ–¥–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "queued": ${queuedWithdrawals.length}`);
    
    if (queuedWithdrawals.length > 0) {
      console.log('   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:');
      queuedWithdrawals.forEach((w, index) => {
        console.log(`   ${index + 1}. ${w.amount} DEL ‚Üí ${w.toAddress} (${w._id})`);
        console.log(`      –°–æ–∑–¥–∞–Ω: ${w.requestedAt}`);
      });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    console.log('\n‚ùå 2. –ù–µ–¥–∞–≤–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã:');
    
    const failedWithdrawals = await db.collection('withdrawals')
      .find({ status: 'failed' })
      .sort({ processedAt: -1 })
      .limit(5)
      .toArray();
    
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤: ${failedWithdrawals.length}`);
    
    failedWithdrawals.forEach((w, index) => {
      console.log(`   ${index + 1}. ${w.amount} DEL ‚Üí ${w.toAddress}`);
      console.log(`      –û—à–∏–±–∫–∞: ${w.error || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`      –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${(new Date(w.processedAt) - new Date(w.requestedAt)) / 1000}—Å`);
    });
    
    // 3. –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –º–∞–ª–æ–π —Å—É–º–º—ã
    console.log('\nüß™ 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞:');
    
    const testWithdrawal = {
      userId: 'debug_test_withdrawal',
      toAddress: '0xd6187dD54DF3002D5C82043b81EdE74187A5A647',
      amount: 0.001, // –û—á–µ–Ω—å –º–∞–ª–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
      txHash: null,
      status: 'queued',
      requestedAt: new Date(),
      processedAt: null,
      debug: true
    };
    
    const insertResult = await db.collection('withdrawals').insertOne(testWithdrawal);
    console.log(`   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω: ${insertResult.insertedId}`);
    console.log(`   –°—É–º–º–∞: ${testWithdrawal.amount} DEL`);
    console.log(`   –ê–¥—Ä–µ—Å: ${testWithdrawal.toAddress}`);
    
    // 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
    console.log('\n‚è≥ 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (30 —Å–µ–∫—É–Ω–¥):');
    
    for (let i = 0; i < 6; i++) {
      await new Promise(resolve => setTimeout(resolve, 5000)); // –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥
      
      const updatedWithdrawal = await db.collection('withdrawals').findOne({
        _id: insertResult.insertedId
      });
      
      console.log(`   [${(i + 1) * 5}—Å] –°—Ç–∞—Ç—É—Å: ${updatedWithdrawal.status}`);
      
      if (updatedWithdrawal.status !== 'queued') {
        console.log(`   üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
        console.log(`      –°—Ç–∞—Ç—É—Å: ${updatedWithdrawal.status}`);
        console.log(`      TX Hash: ${updatedWithdrawal.txHash || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`      –û—à–∏–±–∫–∞: ${updatedWithdrawal.error || '–ù–µ—Ç'}`);
        console.log(`      –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${updatedWithdrawal.processedAt}`);
        break;
      }
      
      if (i === 5) {
        console.log(`   ‚ö†Ô∏è  –í—ã–≤–æ–¥ –≤—Å—ë –µ—â—ë –≤ —Å—Ç–∞—Ç—É—Å–µ "queued" –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥`);
        console.log(`   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:`);
        console.log(`      - DecimalService –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
        console.log(`      - –ü—Ä–æ–±–ª–µ–º—ã —Å withdrawalWorker`);
        console.log(`      - –û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DecimalService
    console.log('\nüîß 5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ DecimalService:');
    
    try {
      const fetch = require('node-fetch');
      const infoResponse = await fetch('http://localhost:3000/api/decimal/info');
      
      if (infoResponse.ok) {
        const info = await infoResponse.json();
        console.log(`   ‚úÖ DecimalService –æ—Ç–≤–µ—á–∞–µ—Ç`);
        console.log(`   üí∞ –†–∞–±–æ—á–∏–π –±–∞–ª–∞–Ω—Å: ${info.workingBalance} DEL`);
        console.log(`   üåê RPC URL: ${info.rpcUrl}`);
        console.log(`   ‚õìÔ∏è  Chain ID: ${info.chainId}`);
      } else {
        console.log(`   ‚ùå DecimalService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${infoResponse.status}`);
      }
    } catch (apiError) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ API DecimalService: ${apiError.message}`);
    }
    
    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    console.log('\nüí° 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    
    if (queuedWithdrawals.length > 0) {
      console.log('   üìù –í –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã');
      console.log('   üîÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É withdrawalWorker –≤ DecimalService');
    }
    
    if (failedWithdrawals.length > 0) {
      const avgProcessTime = failedWithdrawals.reduce((sum, w) => {
        return sum + (new Date(w.processedAt) - new Date(w.requestedAt));
      }, 0) / failedWithdrawals.length / 1000;
      
      console.log(`   üìä –°—Ä–µ–¥–Ω–µ –≤—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${avgProcessTime.toFixed(1)}—Å`);
      
      if (avgProcessTime < 1) {
        console.log('   ‚ö° –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      } else if (avgProcessTime > 10) {
        console.log('   üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é/RPC');
      }
    }
    
    console.log('\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏ DecimalService');
    console.log('   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ withdrawalWorker –∑–∞–ø—É—â–µ–Ω');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è DecimalChain');
    console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC —É–∑–ª—É');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  } finally {
    if (client) {
      await client.close();
      console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
debugDecimalService().catch(console.error); 