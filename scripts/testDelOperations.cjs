const { MongoClient } = require('mongodb');

// MongoDB –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function testDelOperations() {
  let client = null;
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    const db = client.db(MONGODB_DB);
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const testUserId = 'test_user_del_ops';
    
    // 1. –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    console.log('\nüìã 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await db.collection('users').updateOne(
      { userId: testUserId },
      {
        $set: {
          userId: testUserId,
          gameState: {
            tokens: 100, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 100 DEL
            highScore: 500,
            lastSaved: new Date()
          },
          gameBalance: 100, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          profile: {
            username: 'Test User DEL',
            createdAt: new Date()
          },
          createdAt: new Date(),
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.collection('users').findOne({ userId: testUserId });
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.gameState.tokens} DEL –≤ gameState.tokens`);
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    console.log('\nüí∏ 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤—ã–≤–æ–¥–∞...');
    const withdrawAmount = 50;
    const currentBalance = user.gameState?.tokens || 0;
    
    console.log(`   üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} DEL`);
    console.log(`   üí≥ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${withdrawAmount} DEL`);
    
    if (currentBalance >= withdrawAmount) {
      console.log(`   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ—à–ª–∞ (${currentBalance} >= ${withdrawAmount})`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞
      const newBalance = currentBalance - withdrawAmount;
      await db.collection('users').updateOne(
        { userId: testUserId },
        { $set: { "gameState.tokens": newBalance, updatedAt: new Date() } }
      );
      
      console.log(`   üí∏ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω: ${currentBalance} -> ${newBalance} DEL`);
    } else {
      console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞`);
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    console.log('\nüí∞ 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è...');
    const depositAmount = 25;
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const updatedUser = await db.collection('users').findOne({ userId: testUserId });
    const balanceBeforeDeposit = updatedUser.gameState?.tokens || 0;
    
    console.log(`   üìä –ë–∞–ª–∞–Ω—Å –¥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${balanceBeforeDeposit} DEL`);
    console.log(`   üí≥ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${depositAmount} DEL`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await db.collection('users').updateOne(
      { userId: testUserId },
      { $inc: { "gameState.tokens": depositAmount } }
    );
    
    const userAfterDeposit = await db.collection('users').findOne({ userId: testUserId });
    const balanceAfterDeposit = userAfterDeposit.gameState?.tokens || 0;
    
    console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${balanceAfterDeposit} DEL`);
    console.log(`   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +${balanceAfterDeposit - balanceBeforeDeposit} DEL`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    console.log('\nüîç 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...');
    const finalUser = await db.collection('users').findOne({ userId: testUserId });
    
    console.log(`   üéÆ gameState.tokens: ${finalUser.gameState?.tokens || 0} DEL`);
    console.log(`   üíæ gameBalance: ${finalUser.gameBalance || 0} DEL`);
    
    const isConsistent = (finalUser.gameState?.tokens || 0) === (finalUser.gameBalance || 0);
    console.log(`   ${isConsistent ? '‚úÖ' : '‚ö†Ô∏è'} –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${isConsistent ? '–û–ö' : '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}`);
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    console.log('\nüîÑ 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤...');
    const refundAmount = 10;
    const balanceBeforeRefund = finalUser.gameState?.tokens || 0;
    
    await db.collection('users').updateOne(
      { userId: testUserId },
      { $inc: { "gameState.tokens": refundAmount } }
    );
    
    const userAfterRefund = await db.collection('users').findOne({ userId: testUserId });
    const balanceAfterRefund = userAfterRefund.gameState?.tokens || 0;
    
    console.log(`   üìä –ë–∞–ª–∞–Ω—Å –¥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${balanceBeforeRefund} DEL`);
    console.log(`   üí≥ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${refundAmount} DEL`);
    console.log(`   üìä –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${balanceAfterRefund} DEL`);
    console.log(`   ‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: +${balanceAfterRefund - balanceBeforeRefund} DEL`);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await db.collection('users').deleteOne({ userId: testUserId });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω');
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! DEL –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    if (client) {
      await client.close();
      console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testDelOperations().catch(console.error); 