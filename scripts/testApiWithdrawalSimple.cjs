require('dotenv').config({ path: './backend/TAPDEL.env' });

const fetch = require('node-fetch');
const { MongoClient } = require('mongodb');

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å—Ç–æ–≥–æ MongoDB URI
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function testApiWithdrawalSimple() {
  let client = null;
  
  try {
    const testUserId = 'api_simple_test_user';
    const testAmount = 0.001;
    const testAddress = '0xd6187dD54DF3002D5C82043b81EdE74187A5A647';

    console.log('üß™ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–≤–æ–¥–∞...\n');

    // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
    console.log('üë§ 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ë–î...');
    
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    const db = client.db(MONGODB_DB);
    
    await db.collection('users').updateOne(
      { userId: testUserId },
      {
        $set: {
          userId: testUserId,
          gameState: {
            tokens: 5.0, // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞
            highScore: 0
          },
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: 5.0 DEL');

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API
    console.log('\nüí∞ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API...');
    
    const balanceResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/balance`);
    
    if (balanceResponse.ok) {
      const balanceData = await balanceResponse.json();
      console.log(`‚úÖ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceData.gameBalance} DEL`);
    } else {
      const error = await balanceResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balanceResponse.status} - ${error}`);
    }

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ API
    console.log('\nüí∏ 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ API...');
    
    const withdrawalResponse = await fetch(`${API_BASE_URL}/api/decimal/withdrawals`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: testUserId,
        toAddress: testAddress,
        amount: testAmount
      })
    });

    if (withdrawalResponse.ok) {
      const withdrawalData = await withdrawalResponse.json();
      console.log(`‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
      console.log(`   ID: ${withdrawalData.withdrawalId}`);
      console.log(`   –°—É–º–º–∞: ${withdrawalData.amount} DEL`);
      console.log(`   –ê–¥—Ä–µ—Å: ${withdrawalData.toAddress}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawalData.status}`);

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞
      console.log('\nüìä 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞...');
      
      let attempts = 0;
      const maxAttempts = 12; // 60 —Å–µ–∫—É–Ω–¥
      
      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 5000)); // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
        attempts++;
        
        const statusResponse = await fetch(`${API_BASE_URL}/api/decimal/withdrawals/${withdrawalData.withdrawalId}`);
        
        if (statusResponse.ok) {
          const statusData = await statusResponse.json();
          console.log(`   –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: –°—Ç–∞—Ç—É—Å = ${statusData.status}`);
          
          if (statusData.status === 'sent') {
            console.log(`‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!`);
            console.log(`   TX Hash: ${statusData.txHash}`);
            console.log(`   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${statusData.processedAt}`);
            break;
          } else if (statusData.status === 'failed') {
            console.log(`‚ùå –í—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π`);
            console.log(`   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${statusData.processedAt}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ –ë–î
            const withdrawalDoc = await db.collection('withdrawals').findOne({
              _id: new require('mongodb').ObjectId(withdrawalData.withdrawalId)
            });
            if (withdrawalDoc && withdrawalDoc.error) {
              console.log(`   –û—à–∏–±–∫–∞: ${withdrawalDoc.error}`);
            }
            break;
          }
        } else {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${statusResponse.status}`);
        }
      }
      
      if (attempts >= maxAttempts) {
        console.log(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –ø–æ—Å–ª–µ ${maxAttempts * 5} —Å–µ–∫—É–Ω–¥`);
      }

    } else {
      const error = await withdrawalResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞: ${withdrawalResponse.status} - ${error}`);
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüí∞ 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
    
    const finalBalanceResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/balance`);
    
    if (finalBalanceResponse.ok) {
      const finalBalanceData = await finalBalanceResponse.json();
      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalanceData.gameBalance} DEL`);
    } else {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: ${finalBalanceResponse.status}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç API –≤—ã–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –≤—ã–≤–æ–¥–∞:', error.message);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

testApiWithdrawalSimple().catch(console.error); 