require('dotenv').config({ path: './backend/TAPDEL.env' });

const config = require('../backend/config/decimal');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DecimalChain...\n');

console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log(`DECIMAL_WORKING_ADDRESS: ${process.env.DECIMAL_WORKING_ADDRESS ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`DECIMAL_WORKING_PRIVKEY_ENC: ${process.env.DECIMAL_WORKING_PRIVKEY_ENC ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`DECIMAL_KEY_PASSPHRASE: ${process.env.DECIMAL_KEY_PASSPHRASE ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`REDIS_URL: ${process.env.REDIS_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

console.log('\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è decimal.js:');
console.log(`WORKING_ADDRESS: ${config.WORKING_ADDRESS || 'undefined'}`);
console.log(`WORKING_PRIVKEY_ENC: ${config.WORKING_PRIVKEY_ENC ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 'undefined'}`);
console.log(`KEY_PASSPHRASE: ${config.KEY_PASSPHRASE ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 'undefined'}`);
console.log(`REDIS_URL: ${config.REDIS_URL || 'undefined'}`);

console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
console.log(`isConfigured(): ${config.isConfigured()}`);

if (!config.isConfigured()) {
  console.log('\n‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:');
  if (!config.WORKING_ADDRESS) console.log('  - DECIMAL_WORKING_ADDRESS');
  if (!config.WORKING_PRIVKEY_ENC) console.log('  - DECIMAL_WORKING_PRIVKEY_ENC');
  if (!config.KEY_PASSPHRASE) console.log('  - DECIMAL_KEY_PASSPHRASE');
  if (!config.REDIS_URL) console.log('  - REDIS_URL');
}

// –ï—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
if (config.isConfigured()) {
  try {
    const privateKey = config.getPrivateKey();
    console.log(`\nüîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${privateKey.substring(0, 10)}... (–¥–ª–∏–Ω–∞: ${privateKey.length})`);
  } catch (error) {
    console.log(`\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${error.message}`);
  }
} 