const { Web3 } = require('web3');
const crypto = require('crypto');

// DecimalChain –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const config = {
  RPC_URL: 'https://node.decimalchain.com/web3/',
  CHAIN_ID: 75,
  GAS_LIMIT: 21000,
  GAS_PRICE: 50000, // Gwei
  WORKING_ADDRESS: '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43',
  WORKING_PRIVKEY_ENC: 'x435O9YfEK4jdApK2VSc0N8lu/LlWtjDpUmhjGat4AB/7U4eMsOxgBqQOYO/GUjGonYr1csAuwhgXqMw+HtByeUy0JiX50XLLyCTOTtFfrjgqlb6t4X2WIem+guMG00Q',
  KEY_PASSPHRASE: 'PyL34X8rWaU6p2OwErGV'
};

function decryptPrivateKey() {
  try {
    const algorithm = 'aes-256-cbc';
    const key = crypto.scryptSync(config.KEY_PASSPHRASE, 'salt', 32);
    const encryptedData = Buffer.from(config.WORKING_PRIVKEY_ENC, 'base64');
    
    const iv = encryptedData.slice(0, 16);
    const encrypted = encryptedData.slice(16);
    
    const decipher = crypto.createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(encrypted, null, 'utf8');
    decrypted += decipher.final('utf8');
    
    return decrypted;
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ' + error.message);
  }
}

async function debugTransactionError() {
  try {
    console.log('üîç –û–¢–õ–ê–î–ö–ê –û–®–ò–ë–û–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô');
    console.log('============================\n');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
    const web3 = new Web3(config.RPC_URL);
    console.log(`üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${config.RPC_URL}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const blockNumber = await web3.eth.getBlockNumber();
    console.log(`‚úÖ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: ${blockNumber}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    console.log('\nüîê –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...');
    const privateKey = decryptPrivateKey();
    console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å
    const account = web3.eth.accounts.privateKeyToAccount(privateKey);
    console.log(`üíº –ê–¥—Ä–µ—Å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${account.address}`);
    console.log(`üíº –û–∂–∏–¥–∞–µ–º—ã–π –∞–¥—Ä–µ—Å: ${config.WORKING_ADDRESS}`);
    
    if (account.address.toLowerCase() !== config.WORKING_ADDRESS.toLowerCase()) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê–¥—Ä–µ—Å–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
      return;
    }
    console.log('‚úÖ –ê–¥—Ä–µ—Å–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
    const gasBalance = await web3.eth.getBalance(config.WORKING_ADDRESS);
    console.log(`\nüí∞ Gas –±–∞–ª–∞–Ω—Å: ${web3.utils.fromWei(gasBalance, 'ether')} DEL`);
    
    // –ü–æ–ª—É—á–∞–µ–º nonce
    const nonce = await web3.eth.getTransactionCount(config.WORKING_ADDRESS);
    console.log(`üìä Nonce: ${nonce}`);
    
    // –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É
    const testAmount = '0.001'; // 0.001 DEL
    const testAddress = '0xd6187dD54DF3002D5C82043b81EdE74187A5A647';
    
    console.log(`\nüß™ –¢–ï–°–¢–û–í–ê–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø:`);
    console.log(`   –°—É–º–º–∞: ${testAmount} DEL`);
    console.log(`   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${testAddress}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = {
      from: web3.utils.toChecksumAddress(config.WORKING_ADDRESS),
      to: web3.utils.toChecksumAddress(testAddress),
      value: web3.utils.toWei(testAmount, 'ether'),
      gas: config.GAS_LIMIT,
      gasPrice: web3.utils.toWei(config.GAS_PRICE.toString(), 'gwei'),
      nonce: nonce,
      chainId: config.CHAIN_ID
    };
    
    console.log('\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    console.log(`   From: ${transaction.from}`);
    console.log(`   To: ${transaction.to}`);
    console.log(`   Value: ${transaction.value} wei (${testAmount} DEL)`);
    console.log(`   Gas: ${transaction.gas}`);
    console.log(`   Gas Price: ${transaction.gasPrice} wei (${config.GAS_PRICE} Gwei)`);
    console.log(`   Nonce: ${transaction.nonce}`);
    console.log(`   Chain ID: ${transaction.chainId}`);
    
    // –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
    try {
      console.log('\n‚õΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞...');
      const estimatedGas = await web3.eth.estimateGas(transaction);
      console.log(`‚úÖ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: ${estimatedGas}`);
      
      if (estimatedGas > config.GAS_LIMIT) {
        console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ (${estimatedGas}) –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ (${config.GAS_LIMIT})`);
      }
    } catch (gasError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞: ${gasError.message}`);
      console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      console.log('   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
      return;
    }
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\n‚úçÔ∏è  –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    try {
      const signedTx = await web3.eth.accounts.signTransaction(transaction, privateKey);
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞');
      console.log(`üìÑ Raw Transaction: ${signedTx.rawTransaction.substring(0, 66)}...`);
      
      // –°–ò–ú–£–õ–Ø–¶–ò–Ø –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ)
      console.log('\nüé≠ –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò (—Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)');
      console.log('   –ï—Å–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–µ–∞–ª—å–Ω–æ:');
      console.log(`   üì§ –ö–æ–º–∞–Ω–¥–∞: web3.eth.sendSignedTransaction('${signedTx.rawTransaction}')`);
      console.log('   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞...');
      console.log('   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ—á–µ–º—É –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
      console.log('\nüîç –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–´–• –ü–†–û–ë–õ–ï–ú:');
      console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
      console.log('‚úÖ –ê–¥—Ä–µ—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á—É'); 
      console.log('‚úÖ Gas –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω');
      console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –ø—Ä–æ—à–ª–∞');
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –û–®–ò–ë–û–ö –í PRODUCTION:');
      console.log('1. üåê –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å RPC —É–∑–ª–æ–º');
      console.log('2. ‚ö° –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π gas price –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞');
      console.log('3. üîÑ –ü—Ä–æ–±–ª–µ–º—ã —Å nonce (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)');
      console.log('4. üö¶ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏');
      console.log('5. üõ°Ô∏è  –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –≤ development —Å—Ä–µ–¥–µ');
      
    } catch (signError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: ${signError.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
debugTransactionError().catch(console.error); 