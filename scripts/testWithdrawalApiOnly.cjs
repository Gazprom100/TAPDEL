require('dotenv').config({ path: './backend/TAPDEL.env' });

const fetch = require('node-fetch');
const { MongoClient } = require('mongodb');

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å—Ç–æ–≥–æ MongoDB URI
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function testWithdrawalApiOnly() {
  let client = null;
  
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ API –≤—ã–≤–æ–¥–∞ (–±–µ–∑ DecimalService)...\n');
    
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    const db = client.db(MONGODB_DB);
    
    // –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥
    const lastWithdrawal = await db.collection('withdrawals')
      .findOne({ status: 'sent' }, { sort: { requestedAt: -1 } });
    
    if (!lastWithdrawal) {
      console.log('‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const withdrawalId = lastWithdrawal._id.toString();
    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥: ${withdrawalId}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${lastWithdrawal.status}`);
    console.log(`   TX Hash: ${lastWithdrawal.txHash}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –Ω–∞–ø—Ä—è–º—É—é
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint...');
    
    const response = await fetch(`${API_BASE_URL}/api/decimal/withdrawals/${withdrawalId}`);
    
    console.log(`   HTTP Status: ${response.status}`);
    console.log(`   Content-Type: ${response.headers.get('content-type')}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ API –æ—Ç–≤–µ—Ç:');
      console.log(`   withdrawalId: ${data.withdrawalId}`);
      console.log(`   status: ${data.status}`);
      console.log(`   txHash: ${data.txHash}`);
      console.log(`   amount: ${data.amount} DEL`);
    } else {
      const errorText = await response.text();
      console.log('‚ùå API –æ—à–∏–±–∫–∞:');
      console.log(`   ${errorText}`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –ë–î...');
      const withdrawalFromDb = await db.collection('withdrawals').findOne({
        _id: lastWithdrawal._id
      });
      
      if (withdrawalFromDb) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã:');
        console.log(`   _id: ${withdrawalFromDb._id}`);
        console.log(`   status: ${withdrawalFromDb.status}`);
        console.log(`   txHash: ${withdrawalFromDb.txHash}`);
        console.log(`   amount: ${withdrawalFromDb.amount}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

testWithdrawalApiOnly().catch(console.error); 