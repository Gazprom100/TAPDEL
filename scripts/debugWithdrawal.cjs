const { MongoClient } = require('mongodb');

// MongoDB –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function debugWithdrawal() {
  let client = null;
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    const db = client.db(MONGODB_DB);
    
    const testUserId = 'test_user_del';
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìä 1. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    const user = await db.collection('users').findOne({ userId: testUserId });
    if (user) {
      console.log(`   gameState.tokens: ${user.gameState?.tokens || 'undefined'}`);
      console.log(`   gameBalance: ${user.gameBalance || 'undefined'}`);
      console.log(`   updatedAt: ${user.updatedAt}`);
    } else {
      console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    // 2. –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞
    console.log('\nüí∏ 2. –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞...');
    const currentBalance = user.gameState?.tokens || 0;
    const withdrawAmount = 1.0;
    
    console.log(`   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} DEL`);
    console.log(`   –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${withdrawAmount} DEL`);
    
    if (currentBalance >= withdrawAmount) {
      const newBalance = currentBalance - withdrawAmount;
      console.log(`   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: ${newBalance} DEL`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      const updateResult = await db.collection('users').updateOne(
        { userId: testUserId },
        { $set: { "gameState.tokens": newBalance, updatedAt: new Date() } }
      );
      
      console.log(`   MongoDB updateOne —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`);
      console.log(`     acknowledged: ${updateResult.acknowledged}`);
      console.log(`     modifiedCount: ${updateResult.modifiedCount}`);
      console.log(`     matchedCount: ${updateResult.matchedCount}`);
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log('\n‚úÖ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
      const updatedUser = await db.collection('users').findOne({ userId: testUserId });
      console.log(`   gameState.tokens: ${updatedUser.gameState?.tokens || 'undefined'}`);
      console.log(`   gameBalance: ${updatedUser.gameBalance || 'undefined'}`);
      console.log(`   updatedAt: ${updatedUser.updatedAt}`);
      
      // 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–≤–æ–¥–µ
      console.log('\nüìù 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã–≤–æ–¥–µ:');
      const withdrawal = {
        userId: testUserId,
        toAddress: '0xDEBUG1234567890123456789012345678901234',
        amount: withdrawAmount,
        txHash: null,
        status: 'queued',
        requestedAt: new Date(),
        processedAt: null,
        debug: true
      };
      
      const insertResult = await db.collection('withdrawals').insertOne(withdrawal);
      console.log(`   Withdrawal ID: ${insertResult.insertedId}`);
      
    } else {
      console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞`);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã 5. –í—Å–µ –≤—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    const withdrawals = await db.collection('withdrawals')
      .find({ userId: testUserId })
      .sort({ requestedAt: -1 })
      .limit(10)
      .toArray();
    
    console.log(`   –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawals.length}`);
    withdrawals.forEach((w, index) => {
      console.log(`   ${index + 1}. ${w.amount} DEL ‚Üí ${w.toAddress} (${w.status}) ${w.debug ? '[DEBUG]' : ''}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  } finally {
    if (client) {
      await client.close();
      console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
debugWithdrawal().catch(console.error); 