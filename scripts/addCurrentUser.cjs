const { MongoClient } = require('mongodb');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MongoDB
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = generateCleanMongoURI();
const MONGODB_DB = 'tapdel';

async function addCurrentUser() {
  let client;
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(MONGODB_DB);
    const usersCollection = db.collection('users');
    const leaderboardCollection = db.collection('leaderboard');
    
    console.log('üë§ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...');
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await usersCollection.find({}).toArray();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${allUsers.length}`);
    
    for (const user of allUsers) {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
      const existingEntry = await leaderboardCollection.findOne({ userId: user.userId });
      
      if (!existingEntry) {
        // –î–æ–±–∞–≤–∏—Ç—å –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        const tokens = user.gameState?.tokens || 0;
        const newEntry = {
          userId: user.userId,
          username: user.profile?.telegramFirstName || user.profile?.telegramUsername || user.profile?.username || `–ò–≥—Ä–æ–∫ ${user.userId.slice(-4)}`,
          telegramId: user.profile?.telegramId,
          telegramUsername: user.profile?.telegramUsername,
          telegramFirstName: user.profile?.telegramFirstName,
          telegramLastName: user.profile?.telegramLastName,
          tokens: tokens,
          rank: 0, // –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω
          updatedAt: new Date()
        };
        
        await leaderboardCollection.insertOne(newEntry);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥: ${newEntry.username} —Å ${tokens} —Ç–æ–∫–µ–Ω–∞–º–∏`);
      } else {
        console.log(`‚ö™ –£–∂–µ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${existingEntry.username}`);
      }
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–∞–Ω–≥–∏
    console.log('üîÑ –ü–µ—Ä–µ—Å—á—ë—Ç —Ä–∞–Ω–≥–æ–≤...');
    const allLeaderboard = await leaderboardCollection.find().sort({ tokens: -1 }).toArray();
    
    for (let i = 0; i < allLeaderboard.length; i++) {
      await leaderboardCollection.updateOne(
        { _id: allLeaderboard[i]._id },
        { $set: { rank: i + 1 } }
      );
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–æ–ø-10
    const top10 = await leaderboardCollection
      .find()
      .sort({ tokens: -1 })
      .limit(10)
      .toArray();
      
    console.log(`\nüèÜ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô –¢–û–ü-10:`);
    top10.forEach((user, index) => {
      const displayName = user.telegramFirstName || user.telegramUsername || user.username;
      console.log(`${index + 1}. ${displayName} - ${user.tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    if (client) {
      await client.close();
      console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  addCurrentUser()
    .then(() => {
      console.log('\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { addCurrentUser }; 