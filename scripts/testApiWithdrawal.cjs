require('dotenv').config({ path: './backend/TAPDEL.env' });

const fetch = require('node-fetch');

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

async function testApiWithdrawal() {
  try {
    const testUserId = 'api_test_user';
    const testAmount = 0.001;
    const testAddress = '0xd6187dD54DF3002D5C82043b81EdE74187A5A647';

    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–≤–æ–¥–∞...\n');

    // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
    console.log('üë§ 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const prepareResponse = await fetch(`${API_BASE_URL}/api/users/${testUserId}/deposit`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'x-internal-secret': process.env.INTERNAL_SECRET || 'default-secret'
      },
      body: JSON.stringify({ amount: 5.0 })
    });

    if (prepareResponse.ok) {
      const prepareData = await prepareResponse.json();
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: –±–∞–ª–∞–Ω—Å ${prepareData.newTokens} DEL`);
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${prepareResponse.status}`);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüí∞ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const balanceResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/balance`);
    
    if (balanceResponse.ok) {
      const balanceData = await balanceResponse.json();
      console.log(`‚úÖ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balanceData.gameBalance} DEL`);
      
      if (balanceData.gameBalance < testAmount) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ù—É–∂–Ω–æ: ${testAmount}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${balanceData.gameBalance}`);
      }
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balanceResponse.status}`);
    }

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ API
    console.log('\nüí∏ 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ API...');
    
    const withdrawalResponse = await fetch(`${API_BASE_URL}/api/decimal/withdrawals`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: testUserId,
        toAddress: testAddress,
        amount: testAmount
      })
    });

    if (withdrawalResponse.ok) {
      const withdrawalData = await withdrawalResponse.json();
      console.log(`‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
      console.log(`   ID: ${withdrawalData.withdrawalId}`);
      console.log(`   –°—É–º–º–∞: ${withdrawalData.amount} DEL`);
      console.log(`   –ê–¥—Ä–µ—Å: ${withdrawalData.toAddress}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${withdrawalData.status}`);

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞
      console.log('\nüìä 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞...');
      
      let attempts = 0;
      const maxAttempts = 12; // 60 —Å–µ–∫—É–Ω–¥
      
      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 5000)); // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
        attempts++;
        
        const statusResponse = await fetch(`${API_BASE_URL}/api/decimal/withdrawals/${withdrawalData.withdrawalId}`);
        
        if (statusResponse.ok) {
          const statusData = await statusResponse.json();
          console.log(`   –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: –°—Ç–∞—Ç—É—Å = ${statusData.status}`);
          
          if (statusData.status === 'sent') {
            console.log(`‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!`);
            console.log(`   TX Hash: ${statusData.txHash}`);
            console.log(`   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${statusData.processedAt}`);
            break;
          } else if (statusData.status === 'failed') {
            console.log(`‚ùå –í—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π`);
            console.log(`   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${statusData.processedAt}`);
            break;
          }
        } else {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${statusResponse.status}`);
        }
      }
      
      if (attempts >= maxAttempts) {
        console.log(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ –ø–æ—Å–ª–µ ${maxAttempts * 5} —Å–µ–∫—É–Ω–¥`);
      }

    } else {
      const error = await withdrawalResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞: ${withdrawalResponse.status} - ${error}`);
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    console.log('\nüí∞ 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
    
    const finalBalanceResponse = await fetch(`${API_BASE_URL}/api/decimal/users/${testUserId}/balance`);
    
    if (finalBalanceResponse.ok) {
      const finalBalanceData = await finalBalanceResponse.json();
      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalanceData.gameBalance} DEL`);
    } else {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: ${finalBalanceResponse.status}`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç API –≤—ã–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –≤—ã–≤–æ–¥–∞:', error.message);
  }
}

testApiWithdrawal().catch(console.error); 