const crypto = require('crypto');

const config = {
  WORKING_PRIVKEY_ENC: 'x435O9YfEK4jdApK2VSc0N8lu/LlWtjDpUmhjGat4AB/7U4eMsOxgBqQOYO/GUjGonYr1csAuwhgXqMw+HtByeUy0JiX50XLLyCTOTtFfrjgqlb6t4X2WIem+guMG00Q',
  KEY_PASSPHRASE: 'PyL34X8rWaU6p2OwErGV'
};

function debugPrivateKeyDecryption() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –†–ê–°–®–ò–§–†–û–í–ö–ò –ü–†–ò–í–ê–¢–ù–û–ì–û –ö–õ–Æ–ß–ê');
  console.log('======================================\n');
  
  console.log('üìã –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log(`   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: ${config.WORKING_PRIVKEY_ENC}`);
  console.log(`   –ü–∞—Ä–æ–ª—å: ${config.KEY_PASSPHRASE}`);
  console.log(`   –î–ª–∏–Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞: ${config.WORKING_PRIVKEY_ENC.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);
  
  try {
    // –®–∞–≥ 1: –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ base64
    console.log('üîÑ –®–∞–≥ 1: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ base64...');
    const encryptedData = Buffer.from(config.WORKING_PRIVKEY_ENC, 'base64');
    console.log(`   –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ base64: ${encryptedData.length} –±–∞–π—Ç`);
    console.log(`   Hex –¥–∞–Ω–Ω—ã–µ: ${encryptedData.toString('hex').substring(0, 64)}...`);
    
    // –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîë –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const iv = encryptedData.slice(0, 16);
    const encrypted = encryptedData.slice(16);
    console.log(`   IV (16 –±–∞–π—Ç): ${iv.toString('hex')}`);
    console.log(`   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${encrypted.length} –±–∞–π—Ç`);
    
    // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
    console.log('\nüóùÔ∏è  –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è...');
    const algorithm = 'aes-256-cbc';
    const key = crypto.scryptSync(config.KEY_PASSPHRASE, 'salt', 32);
    console.log(`   –ê–ª–≥–æ—Ä–∏—Ç–º: ${algorithm}`);
    console.log(`   –ö–ª—é—á (32 –±–∞–π—Ç–∞): ${key.toString('hex')}`);
    
    // –®–∞–≥ 4: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
    console.log('\nüîì –®–∞–≥ 4: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...');
    const decipher = crypto.createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(encrypted, null, 'utf8');
    decrypted += decipher.final('utf8');
    
    console.log(`   –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: ${decrypted.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`   –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: "${decrypted}"`);
    console.log(`   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "0x": ${decrypted.startsWith('0x')}`);
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:');
    
    if (decrypted.startsWith('0x')) {
      const hexKey = decrypted.substring(2);
      console.log(`   Hex —á–∞—Å—Ç—å: ${hexKey}`);
      console.log(`   –î–ª–∏–Ω–∞ hex: ${hexKey.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏–Ω–∞: 64 —Å–∏–º–≤–æ–ª–∞ (32 –±–∞–π—Ç–∞)`);
      
      if (hexKey.length === 64) {
        console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π hex
        const hexRegex = /^[0-9a-fA-F]+$/;
        if (hexRegex.test(hexKey)) {
          console.log('   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π hex —Ñ–æ—Ä–º–∞—Ç');
        } else {
          console.log('   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π hex —Ñ–æ—Ä–º–∞—Ç');
          console.log(`   –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: ${hexKey.replace(/[0-9a-fA-F]/g, '').split('').join(', ')}`);
        }
      } else {
        console.log(`   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 64, –ø–æ–ª—É—á–µ–Ω–æ ${hexKey.length})`);
      }
    } else {
      console.log('   ‚ùå –ù–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "0x"');
      console.log(`   –ü–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: "${decrypted.substring(0, 10)}"`);
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log('\nüîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞:');
    let fixedKey = decrypted.trim();
    
    if (!fixedKey.startsWith('0x')) {
      fixedKey = '0x' + fixedKey;
      console.log(`   –î–æ–±–∞–≤–∏–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å "0x": ${fixedKey}`);
    }
    
    if (fixedKey.length !== 66) { // 64 hex + "0x"
      console.log(`   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${fixedKey.length}`);
    } else {
      console.log(`   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${fixedKey.length}`);
      
      // –¢–µ—Å—Ç —Å Web3
      try {
        const { Web3 } = require('web3');
        const web3 = new Web3();
        const account = web3.eth.accounts.privateKeyToAccount(fixedKey);
        console.log(`   ‚úÖ Web3 –ø—Ä–∏–Ω—è–ª –∫–ª—é—á! –ê–¥—Ä–µ—Å: ${account.address}`);
        
        const expectedAddress = '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43';
        if (account.address.toLowerCase() === expectedAddress.toLowerCase()) {
          console.log(`   ‚úÖ –ê–¥—Ä–µ—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º!`);
        } else {
          console.log(`   ‚ùå –ê–¥—Ä–µ—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!`);
          console.log(`      –ü–æ–ª—É—á–µ–Ω: ${account.address}`);
          console.log(`      –û–∂–∏–¥–∞–ª—Å—è: ${expectedAddress}`);
        }
      } catch (web3Error) {
        console.log(`   ‚ùå Web3 –æ—Ç–∫–ª–æ–Ω–∏–ª –∫–ª—é—á: ${web3Error.message}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error.message);
    console.error('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.error('   - –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    console.error('   - –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.error('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
    console.error('   - –ü—Ä–æ–±–ª–µ–º—ã —Å base64 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π');
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
debugPrivateKeyDecryption(); 