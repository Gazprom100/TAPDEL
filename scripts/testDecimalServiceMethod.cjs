const { Web3 } = require('web3');
const crypto = require('crypto');

// DecimalChain –Ω–∞—Å—Ç—Ä–æ–π–∫–∏  
const config = {
  RPC_URL: 'https://node.decimalchain.com/web3/',
  CHAIN_ID: 75,
  GAS_LIMIT: 21000,
  GAS_PRICE: 50000, // Gwei
  WORKING_ADDRESS: '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43',
  WORKING_PRIVKEY_ENC: 'x435O9YfEK4jdApK2VSc0N8lu/LlWtjDpUmhjGat4AB/7U4eMsOxgBqQOYO/GUjGonYr1csAuwhgXqMw+HtByeUy0JiX50XLLyCTOTtFfrjgqlb6t4X2WIem+guMG00Q',
  KEY_PASSPHRASE: 'PyL34X8rWaU6p2OwErGV'
};

function getPrivateKey() {
  try {
    const algorithm = 'aes-256-cbc';
    const key = crypto.scryptSync(config.KEY_PASSPHRASE, 'salt', 32);
    const encryptedData = Buffer.from(config.WORKING_PRIVKEY_ENC, 'base64');
    
    const iv = encryptedData.slice(0, 16);
    const encrypted = encryptedData.slice(16);
    
    const decipher = crypto.createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(encrypted, null, 'utf8');
    decrypted += decipher.final('utf8');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "0x" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!decrypted.startsWith('0x')) {
      decrypted = '0x' + decrypted;
    }
    
    return decrypted;
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ' + error.message);
  }
}

// –ò–º–∏—Ç–∞—Ü–∏—è Redis –¥–ª—è nonce
class MockRedis {
  constructor() {
    this.cache = {};
  }
  
  async get(key) {
    return this.cache[key] || null;
  }
  
  async setEx(key, ttl, value) {
    this.cache[key] = value;
    setTimeout(() => delete this.cache[key], ttl * 1000);
  }
}

async function testDecimalServiceMethod() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DECIMAL SERVICE signAndSend');
    console.log('============================================\n');
    
    const web3 = new Web3(config.RPC_URL);
    const mockRedis = new MockRedis();
    
    const toAddress = '0xd6187dD54DF3002D5C82043b81EdE74187A5A647';
    const amount = 0.001; // –ú–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    
    console.log(`üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å: ${amount} DEL`);
    console.log(`üìç –ù–∞ –∞–¥—Ä–µ—Å: ${toAddress}`);
    console.log(`üìç –û—Ç –∞–¥—Ä–µ—Å–∞: ${config.WORKING_ADDRESS}\n`);
    
    // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    console.log('üîê –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...');
    let privateKey;
    try {
      privateKey = getPrivateKey();
      console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω');
      console.log(`   –î–ª–∏–Ω–∞: ${privateKey.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   –§–æ—Ä–º–∞—Ç: ${privateKey.startsWith('0x') ? '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (0x...)' : '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}`);
    } catch (keyError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª—é—á–∞: ${keyError.message}`);
      return;
    }
    
    // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ nonce
    console.log('\nüìä –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ nonce...');
    let nonce;
    try {
      const nonceCacheKey = `DECIMAL_NONCE_${config.WORKING_ADDRESS.toLowerCase()}`;
      const cached = await mockRedis.get(nonceCacheKey);
      
      if (cached !== null) {
        nonce = parseInt(cached) + 1;
        console.log(`‚úÖ Nonce –∏–∑ –∫—ç—à–∞: ${nonce}`);
      } else {
        nonce = await web3.eth.getTransactionCount(
          web3.utils.toChecksumAddress(config.WORKING_ADDRESS)
        );
        console.log(`‚úÖ Nonce –∏–∑ —Å–µ—Ç–∏: ${nonce}`);
      }
      
      await mockRedis.setEx(nonceCacheKey, 30, nonce);
      console.log(`   –¢–∏–ø nonce: ${typeof nonce}`);
      console.log(`   –ó–Ω–∞—á–µ–Ω–∏–µ: ${nonce}`);
    } catch (nonceError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ nonce: ${nonceError.message}`);
      return;
    }
    
    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\nüìã –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    let transaction;
    try {
      transaction = {
        from: web3.utils.toChecksumAddress(config.WORKING_ADDRESS),
        to: web3.utils.toChecksumAddress(toAddress),
        value: web3.utils.toWei(amount.toString(), 'ether'),
        gas: config.GAS_LIMIT,
        gasPrice: web3.utils.toWei(config.GAS_PRICE.toString(), 'gwei'),
        nonce: nonce,
        chainId: config.CHAIN_ID
      };
      
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      console.log(`   From: ${transaction.from} (—Ç–∏–ø: ${typeof transaction.from})`);
      console.log(`   To: ${transaction.to} (—Ç–∏–ø: ${typeof transaction.to})`);
      console.log(`   Value: ${transaction.value} (—Ç–∏–ø: ${typeof transaction.value})`);
      console.log(`   Gas: ${transaction.gas} (—Ç–∏–ø: ${typeof transaction.gas})`);
      console.log(`   Gas Price: ${transaction.gasPrice} (—Ç–∏–ø: ${typeof transaction.gasPrice})`);
      console.log(`   Nonce: ${transaction.nonce} (—Ç–∏–ø: ${typeof transaction.nonce})`);
      console.log(`   Chain ID: ${transaction.chainId} (—Ç–∏–ø: ${typeof transaction.chainId})`);
    } catch (txError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txError.message}`);
      return;
    }
    
    // –®–∞–≥ 4: –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n‚úçÔ∏è  –®–∞–≥ 4: –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    let signedTx;
    try {
      console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${privateKey.substring(0, 10)}...`);
      console.log(`   –¢–∏–ø –∫–ª—é—á–∞: ${typeof privateKey}`);
      
      signedTx = await web3.eth.accounts.signTransaction(transaction, privateKey);
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   Raw length: ${signedTx.rawTransaction.length}`);
      console.log(`   Raw –Ω–∞—á–∞–ª–æ: ${signedTx.rawTransaction.substring(0, 20)}...`);
    } catch (signError) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ü–ò–°–ê–ù–ò–Ø: ${signError.message}`);
      console.error(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${signError.name}`);
      console.error(`   Stack: ${signError.stack}`);
      return;
    }
    
    // –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    console.log('\nüöÄ –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    console.log('   ‚ö†Ô∏è  –°–ò–ú–£–õ–Ø–¶–ò–Ø: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ù–ï –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ');
    console.log(`   üì§ –ö–æ–º–∞–Ω–¥–∞: web3.eth.sendSignedTransaction(rawTransaction)`);
    console.log(`   üìÑ Raw Transaction: ${signedTx.rawTransaction.substring(0, 66)}...`);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    try {
      const txObject = web3.eth.abi.decodeParameters(['string'], signedTx.rawTransaction);
      console.log('‚úÖ Raw —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è');
    } catch (parseError) {
      console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${parseError.message}`);
    }
    
    console.log('\nüéâ –í–°–ï –®–ê–ì–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('============================');
    console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
    console.log('‚úÖ Nonce –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('\nüí° –ï—Å–ª–∏ API –≤—ã–≤–æ–¥—ã –≤—Å—ë –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
    console.log('   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ Redis –≤ —Ä–µ–∞–ª—å–Ω–æ–º DecimalService');
    console.log('   - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ production');
    console.log('   - –ö–æ–Ω—Ñ–ª–∏–∫—Ç–µ –≤–µ—Ä—Å–∏–π Web3');
    
  } catch (error) {
    console.error('\n‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê:');
    console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    console.error(`   –¢–∏–ø: ${error.name}`);
    console.error(`   Stack: ${error.stack}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testDecimalServiceMethod().catch(console.error); 