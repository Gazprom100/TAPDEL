const { MongoClient } = require('mongodb');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function testAdminFunctions() {
  let client;
  
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∫–∏...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    const db = client.db(MONGODB_DB);
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
    
    // 1. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
    const totalUsers = await db.collection('users').countDocuments();
    console.log(`- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    
    const users = await db.collection('users').find({}, { projection: { 'gameState.tokens': 1 } }).toArray();
    const totalTokens = users.reduce((sum, u) => sum + (u.gameState?.tokens || 0), 0);
    console.log(`- –û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: ${totalTokens}`);
    
    const totalDeposits = await db.collection('deposits').countDocuments();
    console.log(`- –í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${totalDeposits}`);
    
    const totalWithdrawals = await db.collection('withdrawals').countDocuments();
    console.log(`- –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: ${totalWithdrawals}`);
    
    // 2. –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–æ–≤
    console.log('\nü™ô –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–æ–≤:');
    const tokenConfig = await db.collection('system_config').findOne({ key: 'tokens' });
    if (tokenConfig && tokenConfig.value) {
      console.log(`- –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${tokenConfig.value.length}`);
      const activeToken = tokenConfig.value.find(t => t.isActive);
      console.log(`- –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω: ${activeToken?.symbol || '–Ω–µ—Ç'}`);
    } else {
      console.log('- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // 3. –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const sampleUsers = await db.collection('users').find({}).limit(3).toArray();
    console.log(`- –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    sampleUsers.forEach((user, index) => {
      console.log(`  ${index + 1}. ${user.userId} - ${user.profile?.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} - ${user.gameState?.tokens || 0} —Ç–æ–∫–µ–Ω–æ–≤`);
    });
    
    // 4. –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\nüí∞ –¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:');
    const recentDeposits = await db.collection('deposits').find({}).sort({ createdAt: -1 }).limit(3).toArray();
    console.log(`- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã:`);
    recentDeposits.forEach((deposit, index) => {
      console.log(`  ${index + 1}. ${deposit.userId} - ${deposit.amountRequested} - ${deposit.status}`);
    });
    
    const recentWithdrawals = await db.collection('withdrawals').find({}).sort({ requestedAt: -1 }).limit(3).toArray();
    console.log(`- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–≤–æ–¥—ã:`);
    recentWithdrawals.forEach((withdrawal, index) => {
      console.log(`  ${index + 1}. ${withdrawal.userId} - ${withdrawal.amount} - ${withdrawal.status}`);
    });
    
    // 5. –¢–µ—Å—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    console.log('\nüèÜ –¢–µ—Å—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:');
    const leaderboard = await db.collection('leaderboard').find({}).sort({ tokens: -1 }).limit(5).toArray();
    console.log(`- –¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤:`);
    leaderboard.forEach((entry, index) => {
      console.log(`  ${index + 1}. ${entry.username} - ${entry.tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
    });
    
    // 6. –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    console.log('\nüìú –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:');
    const tokenHistory = await db.collection('token_history').find({}).sort({ changedAt: -1 }).limit(3).toArray();
    console.log(`- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:`);
    tokenHistory.forEach((entry, index) => {
      console.log(`  ${index + 1}. ${entry.symbol} - ${entry.reason} - ${new Date(entry.changedAt).toLocaleString()}`);
    });
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    if (client) {
      await client.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testAdminFunctions(); 