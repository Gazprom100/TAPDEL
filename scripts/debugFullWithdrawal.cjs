require('dotenv').config({ path: './backend/TAPDEL.env' });

const { MongoClient } = require('mongodb');
const decimalService = require('../backend/services/decimalService');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å—Ç–æ–≥–æ MongoDB URI
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function debugFullWithdrawal() {
  let client = null;
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    const db = client.db(MONGODB_DB);
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DecimalService...');
    await decimalService.initialize();
    
    const testUserId = 'debug_withdrawal_user';
    const testAmount = 0.001;
    const testAddress = '0xd6187dD54DF3002D5C82043b81EdE74187A5A647';
    
    // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë§ 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    await db.collection('users').updateOne(
      { userId: testUserId },
      {
        $set: {
          userId: testUserId,
          gameState: {
            tokens: 10.0, // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞
            highScore: 0
          },
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    
    const user = await db.collection('users').findOne({ userId: testUserId });
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: ${user.gameState.tokens} DEL`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DecimalService
    console.log('\n‚öôÔ∏è 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è DecimalService...');
    
    try {
      const workingBalance = await decimalService.getWorkingBalance();
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${workingBalance} DEL`);
      
      if (workingBalance < testAmount) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–∞–∑–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ù—É–∂–Ω–æ: ${testAmount}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${workingBalance}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
      return;
    }
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ API –ª–æ–≥–∏–∫—É
    console.log('\nüìù 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ API)
    const gameBalance = user.gameState?.tokens || 0;
    
    if (gameBalance < testAmount) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${gameBalance} DEL`);
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').updateOne(
      { userId: testUserId },
      { $set: { "gameState.tokens": gameBalance - testAmount, updatedAt: new Date() } }
    );
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    const withdrawal = {
      userId: testUserId,
      toAddress: testAddress,
      amount: testAmount,
      txHash: null,
      status: 'queued',
      requestedAt: new Date(),
      processedAt: null
    };
    
    const result = await db.collection('withdrawals').insertOne(withdrawal);
    console.log(`‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID ${result.insertedId}`);
    console.log(`   –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: ${gameBalance} ‚Üí ${gameBalance - testAmount} DEL`);
    
    // 4. –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ DecimalService (–∏–º–∏—Ç–∞—Ü–∏—è worker)
    console.log('\nüöÄ 4. –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ DecimalService...');
    
    try {
      console.log('   –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      const txHash = await decimalService.signAndSend(testAddress, testAmount);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
      await db.collection('withdrawals').updateOne(
        { _id: result.insertedId },
        {
          $set: {
            txHash: txHash,
            status: 'sent',
            processedAt: new Date()
          }
        }
      );
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
      console.log(`   TX Hash: ${txHash}`);
      console.log(`   –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${testAddress}`);
      console.log(`   –°—É–º–º–∞: ${testAmount} DEL`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:`, error);
      console.error(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.constructor.name}`);
      console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
      
      if (error.message.includes('Invalid argument type')) {
        console.error(`\nüîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–ö–ò "Invalid argument type":`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        const privateKey = require('../backend/config/decimal').getPrivateKey();
        const fromAddress = require('../backend/config/decimal').WORKING_ADDRESS;
        
        console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${privateKey.substring(0, 10)}... (–¥–ª–∏–Ω–∞: ${privateKey.length})`);
        console.log(`   –û—Ç –∞–¥—Ä–µ—Å–∞: ${fromAddress}`);
        console.log(`   –ö –∞–¥—Ä–µ—Å—É: ${testAddress}`);
        console.log(`   –°—É–º–º–∞: ${testAmount} (—Ç–∏–ø: ${typeof testAmount})`);
        
        try {
          const nonce = await decimalService.getNonce(fromAddress);
          console.log(`   Nonce: ${nonce} (—Ç–∏–ø: ${typeof nonce})`);
        } catch (nonceError) {
          console.error(`   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è nonce: ${nonceError.message}`);
        }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await db.collection('users').updateOne(
        { userId: testUserId },
        { $inc: { "gameState.tokens": testAmount } }
      );
      
      await db.collection('withdrawals').updateOne(
        { _id: result.insertedId },
        {
          $set: {
            status: 'failed',
            processedAt: new Date(),
            error: error.message
          }
        }
      );
      
      console.log(`‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
    }
    
    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüìä 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
    
    const finalUser = await db.collection('users').findOne({ userId: testUserId });
    const finalWithdrawal = await db.collection('withdrawals').findOne({ _id: result.insertedId });
    
    console.log(`   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${finalUser.gameState.tokens} DEL`);
    console.log(`   –°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞: ${finalWithdrawal.status}`);
    
    if (finalWithdrawal.txHash) {
      console.log(`   TX Hash: ${finalWithdrawal.txHash}`);
    }
    
    if (finalWithdrawal.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${finalWithdrawal.error}`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    if (client) {
      await client.close();
    }
    process.exit(0);
  }
}

debugFullWithdrawal().catch(console.error); 