const { MongoClient } = require('mongodb');

// Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MongoDB
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM';
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  const encodedPassword = encodeURIComponent(password);
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';

async function checkProductionDB() {
  let client;
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ production –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MongoDB...\n');
    
    // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n');
    
    const db = client.db(MONGODB_DB);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
    const collections = await db.listCollections().toArray();
    console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
    collections.forEach(col => {
      console.log(`   ‚Ä¢ ${col.name}`);
    });
    console.log('');
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersCount = await db.collection('users').countDocuments();
    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}`);
    
    if (usersCount > 0) {
      const sampleUsers = await db.collection('users').find({}).limit(3).toArray();
      console.log('üìù –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
      sampleUsers.forEach((user, i) => {
        console.log(`   ${i + 1}. ${user.profile?.username || user.userId} - ${user.gameState?.tokens || 0} —Ç–æ–∫–µ–Ω–æ–≤`);
      });
    }
    console.log('');
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
    const leaderboardCount = await db.collection('leaderboard').countDocuments();
    console.log(`üèÜ –ó–∞–ø–∏—Å–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${leaderboardCount}`);
    
    if (leaderboardCount > 0) {
      const topPlayers = await db.collection('leaderboard').find({}).sort({ tokens: -1 }).limit(5).toArray();
      console.log('ü•á –¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤:');
      topPlayers.forEach((player, i) => {
        console.log(`   ${i + 1}. ${player.username} - ${player.tokens} —Ç–æ–∫–µ–Ω–æ–≤ (—Ä–∞–Ω–≥: ${player.rank})`);
      });
    }
    console.log('');
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    const transactionsCount = await db.collection('transactions').countDocuments();
    const depositsCount = await db.collection('deposits').countDocuments();
    const withdrawalsCount = await db.collection('withdrawals').countDocuments();
    
    console.log(`üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactionsCount}`);
    console.log(`üì• –î–µ–ø–æ–∑–∏—Ç–æ–≤: ${depositsCount}`);
    console.log(`üì§ –í—ã–≤–æ–¥–æ–≤: ${withdrawalsCount}`);
    console.log('');
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    const userIndexes = await db.collection('users').indexes();
    const leaderboardIndexes = await db.collection('leaderboard').indexes();
    
    console.log('üîç –ò–Ω–¥–µ–∫—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    userIndexes.forEach(index => {
      console.log(`   ‚Ä¢ ${index.name}: ${JSON.stringify(index.key)}`);
    });
    
    console.log('üîç –ò–Ω–¥–µ–∫—Å—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:');
    leaderboardIndexes.forEach(index => {
      console.log(`   ‚Ä¢ ${index.name}: ${JSON.stringify(index.key)}`);
    });
    console.log('');
    
    // 7. –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    console.log('üìä –°–¢–ê–¢–£–° PRODUCTION –ë–ê–ó–´ –î–ê–ù–ù–´–•:');
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}`);
    console.log(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${leaderboardCount}`);
    console.log(`‚úÖ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactionsCount + depositsCount + withdrawalsCount}`);
    
    if (usersCount === 0 && leaderboardCount === 0) {
      console.log('\nüéØ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
    } else {
      console.log('\nüéÆ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏');
    }
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    if (error.code === 'ENOTFOUND') {
      console.log('üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    } else if (error.name === 'MongoServerError' && error.code === 18) {
      console.log('üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å MongoDB');
    }
  } finally {
    if (client) {
      await client.close();
      console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkProductionDB().catch(console.error); 