const { MongoClient } = require('mongodb');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MongoDB
const generateCleanMongoURI = () => {
  const username = 'TAPDEL';
  const password = 'fpz%sE62KPzmHfM'; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å %
  const cluster = 'cluster0.ejo8obw.mongodb.net';
  const database = 'tapdel';
  
  // –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è URL
  const encodedPassword = encodeURIComponent(password);
  
  return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
};

const MONGODB_URI = generateCleanMongoURI();
const MONGODB_DB = 'tapdel';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
const testUsers = [
  {
    userId: 'test-user-1',
    username: '–ù–∏–∫–∏—Ç–∞',
    telegramId: '123456789',
    telegramUsername: 'nikita_cyber',
    telegramFirstName: '–ù–∏–∫–∏—Ç–∞',
    telegramLastName: '–ö–∏–±–µ—Ä–æ–≤',
    tokens: 15420,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-2',
    username: '–ê–Ω–Ω–∞',
    telegramId: '987654321',
    telegramUsername: 'anna_del',
    telegramFirstName: '–ê–Ω–Ω–∞',
    telegramLastName: '–¢–æ–∫–µ–Ω–æ–≤–∞',
    tokens: 12300,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-3',
    username: '–ú–∞–∫—Å–∏–º',
    telegramId: '456789123',
    telegramUsername: 'max_tapper',
    telegramFirstName: '–ú–∞–∫—Å–∏–º',
    telegramLastName: '–¢–∞–ø–ø–µ—Ä–æ–≤–∏—á',
    tokens: 9850,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-4',
    username: '–ï–ª–µ–Ω–∞',
    telegramId: '789123456',
    telegramUsername: 'lena_cyber',
    telegramFirstName: '–ï–ª–µ–Ω–∞',
    telegramLastName: '–ö–∏–±–µ—Ä—Å–∫–∞—è',
    tokens: 7200,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-5',
    username: '–î–º–∏—Ç—Ä–∏–π',
    telegramId: '321654987',
    telegramUsername: 'dmitry_flex',
    telegramFirstName: '–î–º–∏—Ç—Ä–∏–π',
    telegramLastName: '–§–ª–µ–∫—Å–æ–≤',
    tokens: 5600,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-6',
    username: '–ò–≥—Ä–æ–∫ 6782',
    telegramId: '654987321',
    telegramFirstName: '–ú–∞—Ä–∏—è',
    telegramLastName: '–ì–µ–π–∑–µ—Ä–æ–≤–∞',
    tokens: 4100,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-7',
    username: '–ê–ª–µ–∫—Å–µ–π',
    telegramId: '147258369',
    telegramUsername: 'alex_del',
    telegramFirstName: '–ê–ª–µ–∫—Å–µ–π',
    telegramLastName: '–î–µ–ª–µ—Ç–Ω–æ–≤',
    tokens: 3200,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-8',
    username: '–í–∏–∫—Ç–æ—Ä–∏—è',
    telegramId: '963852741',
    telegramUsername: 'vika_tap',
    telegramFirstName: '–í–∏–∫—Ç–æ—Ä–∏—è',
    telegramLastName: '–¢–∞–ø–æ–≤–∞',
    tokens: 2800,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-9',
    username: '–ò–≥—Ä–æ–∫ 9432',
    telegramId: '258147036',
    telegramFirstName: '–°–µ—Ä–≥–µ–π',
    telegramLastName: '–¢–æ–∫–µ–Ω–∏–Ω',
    tokens: 1950,
    updatedAt: new Date()
  },
  {
    userId: 'test-user-10',
    username: '–û–ª—å–≥–∞',
    telegramId: '741852963',
    telegramUsername: 'olga_cyber',
    telegramFirstName: '–û–ª—å–≥–∞',
    telegramLastName: '–ö–∏–±–µ—Ä–æ–≤–Ω–∞',
    tokens: 1200,
    updatedAt: new Date()
  }
];

async function seedLeaderboard() {
  let client;
  
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db(MONGODB_DB);
    const leaderboardCollection = db.collection('leaderboard');
    const usersCollection = db.collection('users');
    
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥...');
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // await leaderboardCollection.deleteMany({});
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    for (let i = 0; i < testUsers.length; i++) {
      const user = testUsers[i];
      const rank = i + 1;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
      await leaderboardCollection.updateOne(
        { userId: user.userId },
        { 
          $set: { 
            ...user,
            rank: rank 
          } 
        },
        { upsert: true }
      );
      
      // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é users
      await usersCollection.updateOne(
        { userId: user.userId },
        {
          $set: {
            userId: user.userId,
            profile: {
              userId: user.userId,
              username: user.username,
              maxEnergy: 100,
              energyRecoveryRate: 1,
              maxGear: 'M',
              level: Math.floor(user.tokens / 1000) + 1,
              experience: user.tokens,
              createdAt: new Date(),
              lastLogin: new Date(),
              telegramId: user.telegramId,
              telegramUsername: user.telegramUsername,
              telegramFirstName: user.telegramFirstName,
              telegramLastName: user.telegramLastName
            },
            gameState: {
              tokens: user.tokens,
              highScore: user.tokens,
              engineLevel: 'Mk I',
              gearboxLevel: 'L1',
              batteryLevel: 'B1',
              hyperdriveLevel: 'H1',
              powerGridLevel: 'P1',
              lastSaved: new Date()
            },
            transactions: [],
            updatedAt: new Date()
          }
        },
        { upsert: true }
      );
      
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${user.username} —Å ${user.tokens} —Ç–æ–∫–µ–Ω–∞–º–∏ (—Ä–∞–Ω–≥ #${rank})`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const leaderboardCount = await leaderboardCollection.countDocuments();
    const usersCount = await usersCollection.countDocuments();
    
    console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:`);
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${leaderboardCount}`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${usersCount}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
    const top5 = await leaderboardCollection
      .find()
      .sort({ tokens: -1 })
      .limit(5)
      .toArray();
      
    console.log(`\nüèÜ –¢–û–ü-5 –õ–ò–î–ï–†–û–í:`);
    top5.forEach((user, index) => {
      console.log(`${index + 1}. ${user.telegramFirstName || user.username} - ${user.tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
    process.exit(1);
  } finally {
    if (client) {
      await client.close();
      console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedLeaderboard()
    .then(() => {
      console.log('\n‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { seedLeaderboard }; 