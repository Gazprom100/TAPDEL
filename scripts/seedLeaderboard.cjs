const { MongoClient } = require('mongodb');

async function seedLeaderboard() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const username = 'TAPDEL';
    const password = encodeURIComponent('fpz%sE62KPzmHfM');
    const cluster = 'cluster0.ejo8obw.mongodb.net';
    const database = 'tapdel';

    const uri = `mongodb+srv://${username}:${password}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
    
    const client = new MongoClient(uri, {
        serverApi: {
            version: '1',
            strict: true,
            deprecationErrors: true,
        }
    });

    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');

    try {
        await client.connect();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

        const db = client.db(database);
        const leaderboard = db.collection('leaderboard');

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        await leaderboard.deleteMany({});
        console.log('üóëÔ∏è –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤');

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testData = [
            { userId: 'user1', username: 'CyberPilot', score: 15000 },
            { userId: 'user2', username: 'NeonRider', score: 12500 },
            { userId: 'user3', username: 'QuantumRacer', score: 11000 },
            { userId: 'user4', username: 'VoidRunner', score: 9800 },
            { userId: 'user5', username: 'DataHunter', score: 8900 },
            { userId: 'user6', username: 'CircuitBreaker', score: 7600 },
            { userId: 'user7', username: 'ByteSlinger', score: 6800 },
            { userId: 'user8', username: 'GlitchMaster', score: 5900 },
            { userId: 'user9', username: 'CodeSlicer', score: 4500 },
            { userId: 'user10', username: 'PixelHacker', score: 3200 }
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        const testEntries = testData.map(entry => ({
            ...entry,
            updatedAt: new Date(),
            rank: 0 // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        }));

        await leaderboard.insertMany(testEntries);
        console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
        const allUsers = await leaderboard.find().sort({ score: -1 }).toArray();
        await Promise.all(allUsers.map((user, index) =>
            leaderboard.updateOne(
                { _id: user._id },
                { $set: { rank: index + 1 } }
            )
        ));

        console.log('üèÜ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const topUsers = await leaderboard.find().sort({ score: -1 }).limit(10).toArray();
        console.log('\nüéØ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        topUsers.forEach((user, index) => {
            console.log(`${index + 1}. ${user.username} - ${user.score} –æ—á–∫–æ–≤`);
        });

        console.log('\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    } finally {
        await client.close();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
seedLeaderboard().catch(console.error); 