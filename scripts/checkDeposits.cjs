const { MongoClient } = require('mongodb');

async function checkDeposits() {
  try {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –î–ï–ü–û–ó–ò–¢–û–í –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ò 123.8831 DEL');
    console.log('================================================\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const generateCleanMongoURI = () => {
      const username = 'TAPDEL';
      const password = 'fpz%sE62KPzmHfM';
      const cluster = 'cluster0.ejo8obw.mongodb.net';
      const database = 'tapdel';
      
      const encodedPassword = encodeURIComponent(password);
      return `mongodb+srv://${username}:${encodedPassword}@${cluster}/${database}?retryWrites=true&w=majority&appName=Cluster0`;
    };

    const MONGODB_URI = process.env.MONGODB_URI || generateCleanMongoURI();
    const MONGODB_DB = process.env.MONGODB_DB || 'tapdel';
    
    const client = new MongoClient(MONGODB_URI);
    await client.connect();
    const database = client.db(MONGODB_DB);
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');
    
    const userId = 'telegram-7013973686';
    const targetAmount = 123.8831;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`üì• –í–°–ï –î–ï–ü–û–ó–ò–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId}:`);
    console.log('='.repeat(50));
    
    const allDeposits = await database.collection('deposits').find({
      userId: userId
    }).sort({ createdAt: -1 }).toArray();
    
    if (allDeposits.length === 0) {
      console.log('‚ùå –î–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${allDeposits.length}\n`);
      
      for (const deposit of allDeposits) {
        const timeAgo = Math.round((new Date() - deposit.createdAt) / 1000 / 60);
        const isExpired = deposit.expiresAt < new Date();
        const isMatched = deposit.matched;
        
        console.log(`ID: ${deposit._id}`);
        console.log(`  –ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${deposit.amountRequested} DEL`);
        console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${deposit.uniqueAmount} DEL`);
        console.log(`  –°–æ–∑–¥–∞–Ω: ${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`);
        console.log(`  –ò—Å—Ç–µ–∫–∞–µ—Ç: ${deposit.expiresAt.toLocaleString()}`);
        console.log(`  –°—Ç–∞—Ç—É—Å: ${deposit.status || 'active'}`);
        console.log(`  –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${isMatched ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`  –ò—Å—Ç–µ–∫: ${isExpired ? '–î–∞' : '–ù–µ—Ç'}`);
        if (deposit.txHash) {
          console.log(`  TX Hash: ${deposit.txHash}`);
        }
        console.log('-'.repeat(30));
      }
    }
    
    // –ò—â–µ–º –¥–µ–ø–æ–∑–∏—Ç —Å —Å—É–º–º–æ–π –±–ª–∏–∑–∫–æ–π –∫ 123.8831
    console.log(`\nüéØ –ü–û–ò–°–ö –î–ï–ü–û–ó–ò–¢–ê –° –°–£–ú–ú–û–ô ${targetAmount} DEL:`);
    console.log('='.repeat(50));
    
    const matchingDeposits = allDeposits.filter(deposit => {
      const diff = Math.abs(deposit.uniqueAmount - targetAmount);
      return diff < 0.001; // –¥–æ–ø—É—Å–∫ 0.001 DEL
    });
    
    if (matchingDeposits.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matchingDeposits.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—É–º–º–æ–π:`);
      for (const deposit of matchingDeposits) {
        console.log(`  - ${deposit.uniqueAmount} DEL (ID: ${deposit._id})`);
        console.log(`    –°—Ç–∞—Ç—É—Å: ${deposit.status || 'active'}`);
        console.log(`    –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${deposit.matched ? '–î–∞' : '–ù–µ—Ç'}`);
      }
    } else {
      console.log('‚ùå –î–µ–ø–æ–∑–∏—Ç–æ–≤ —Å —Å—É–º–º–æ–π 123.8831 DEL –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å—É–º–º—ã
      console.log('\nüìä –ë–õ–ò–ñ–ê–ô–®–ò–ï –°–£–ú–ú–´:');
      const sortedByDiff = allDeposits
        .map(deposit => ({
          ...deposit,
          diff: Math.abs(deposit.uniqueAmount - targetAmount)
        }))
        .sort((a, b) => a.diff - b.diff)
        .slice(0, 5);
      
      for (const deposit of sortedByDiff) {
        console.log(`  - ${deposit.uniqueAmount} DEL (—Ä–∞–∑–Ω–∏—Ü–∞: ${deposit.diff.toFixed(6)} DEL)`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥—ã
    console.log(`\nüì§ –í–´–í–û–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId}:`);
    console.log('='.repeat(50));
    
    const withdrawals = await database.collection('withdrawals').find({
      userId: userId
    }).sort({ requestedAt: -1 }).toArray();
    
    if (withdrawals.length === 0) {
      console.log('‚ùå –í—ã–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –≤—ã–≤–æ–¥–æ–≤: ${withdrawals.length}\n`);
      
      for (const withdrawal of withdrawals) {
        const timeAgo = Math.round((new Date() - withdrawal.requestedAt) / 1000 / 60);
        console.log(`ID: ${withdrawal._id}`);
        console.log(`  –°—É–º–º–∞: ${withdrawal.amount} DEL`);
        console.log(`  –ê–¥—Ä–µ—Å: ${withdrawal.toAddress}`);
        console.log(`  –°—Ç–∞—Ç—É—Å: ${withdrawal.status}`);
        console.log(`  –ó–∞–ø—Ä–æ—à–µ–Ω: ${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥`);
        if (withdrawal.txHash) {
          console.log(`  TX Hash: ${withdrawal.txHash}`);
        }
        console.log('-'.repeat(30));
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`\nüí∞ –ë–ê–õ–ê–ù–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ${userId}:`);
    console.log('='.repeat(50));
    
    const user = await database.collection('users').findOne({ userId: userId });
    if (user) {
      console.log(`gameState.tokens: ${user.gameState?.tokens || 0} DEL`);
      console.log(`gameBalance: ${user.gameBalance || 0} DEL`);
      console.log(`highScore: ${user.gameState?.highScore || 0}`);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò:');
    console.error(error.message);
  } finally {
    await client.close();
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

checkDeposits().catch(console.error); 