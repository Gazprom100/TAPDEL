const { Web3 } = require('web3');
const crypto = require('crypto');

// DecimalChain –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const config = {
  RPC_URL: 'https://node.decimalchain.com/web3/',
  CHAIN_ID: 75,
  GAS_LIMIT: 21000,
  GAS_PRICE: 50000, // Gwei
  WORKING_ADDRESS: '0x59888c4759503AdB6d9280d71999A1Db3Cf5fb43',
  WORKING_PRIVKEY_ENC: 'x435O9YfEK4jdApK2VSc0N8lu/LlWtjDpUmhjGat4AB/7U4eMsOxgBqQOYO/GUjGonYr1csAuwhgXqMw+HtByeUy0JiX50XLLyCTOTtFfrjgqlb6t4X2WIem+guMG00Q',
  KEY_PASSPHRASE: 'PyL34X8rWaU6p2OwErGV'
};

function decryptPrivateKey() {
  try {
    const algorithm = 'aes-256-cbc';
    const key = crypto.scryptSync(config.KEY_PASSPHRASE, 'salt', 32);
    const encryptedData = Buffer.from(config.WORKING_PRIVKEY_ENC, 'base64');
    
    const iv = encryptedData.slice(0, 16);
    const encrypted = encryptedData.slice(16);
    
    const decipher = crypto.createDecipheriv(algorithm, key, iv);
    let decrypted = decipher.update(encrypted, null, 'utf8');
    decrypted += decipher.final('utf8');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "0x" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!decrypted.startsWith('0x')) {
      decrypted = '0x' + decrypted;
    }
    
    return decrypted;
  } catch (error) {
    throw new Error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ' + error.message);
  }
}

async function sendRealTransaction() {
  try {
    console.log('üöÄ –û–¢–ü–†–ê–í–ö–ê –†–ï–ê–õ–¨–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò DEL');
    console.log('==================================\n');
    
    const amount = '5555'; // 5555 DEL
    const toAddress = '0xd6187dD54DF3002D5C82043b81EdE74187A5A647';
    
    console.log(`üí∞ –°—É–º–º–∞: ${amount} DEL`);
    console.log(`üìç –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${toAddress}`);
    console.log(`üìç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${config.WORKING_ADDRESS}\n`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
    const web3 = new Web3(config.RPC_URL);
    console.log(`üåê RPC: ${config.RPC_URL}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const blockNumber = await web3.eth.getBlockNumber();
    console.log(`‚úÖ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫: ${blockNumber}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    console.log('\nüîê –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...');
    const privateKey = decryptPrivateKey();
    console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å
    const account = web3.eth.accounts.privateKeyToAccount(privateKey);
    console.log(`üíº –ê–¥—Ä–µ—Å –∏–∑ –∫–ª—é—á–∞: ${account.address}`);
    
    if (account.address.toLowerCase() !== config.WORKING_ADDRESS.toLowerCase()) {
      throw new Error('–ê–¥—Ä–µ—Å–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    const senderBalance = await web3.eth.getBalance(config.WORKING_ADDRESS);
    const senderBalanceDEL = web3.utils.fromWei(senderBalance, 'ether');
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${senderBalanceDEL} DEL`);
    
    const receiverBalance = await web3.eth.getBalance(toAddress);
    const receiverBalanceDEL = web3.utils.fromWei(receiverBalance, 'ether');
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–¥–æ): ${receiverBalanceDEL} DEL`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    const amountWei = web3.utils.toWei(amount, 'ether');
    const gasPrice = web3.utils.toWei(config.GAS_PRICE.toString(), 'gwei');
    const gasWei = BigInt(config.GAS_LIMIT) * BigInt(gasPrice);
    const totalWei = BigInt(amountWei) + gasWei;
    
    console.log(`\n‚õΩ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:`);
    console.log(`   –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${amount} DEL`);
    console.log(`   Gas —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${web3.utils.fromWei(gasWei.toString(), 'ether')} DEL`);
    console.log(`   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${web3.utils.fromWei(totalWei.toString(), 'ether')} DEL`);
    
    if (BigInt(senderBalance) < totalWei) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ: ${web3.utils.fromWei(totalWei.toString(), 'ether')} DEL`);
    }
    console.log('‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º nonce
    const nonce = await web3.eth.getTransactionCount(config.WORKING_ADDRESS);
    console.log(`üìä Nonce: ${nonce}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = {
      from: web3.utils.toChecksumAddress(config.WORKING_ADDRESS),
      to: web3.utils.toChecksumAddress(toAddress),
      value: amountWei,
      gas: config.GAS_LIMIT,
      gasPrice: gasPrice,
      nonce: nonce,
      chainId: config.CHAIN_ID
    };
    
    console.log('\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
    console.log(`   From: ${transaction.from}`);
    console.log(`   To: ${transaction.to}`);
    console.log(`   Value: ${amount} DEL`);
    console.log(`   Gas: ${transaction.gas}`);
    console.log(`   Gas Price: ${config.GAS_PRICE} Gwei`);
    console.log(`   Nonce: ${transaction.nonce}`);
    console.log(`   Chain ID: ${transaction.chainId}`);
    
    // –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞
    console.log('\n‚õΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞...');
    const estimatedGas = await web3.eth.estimateGas(transaction);
    console.log(`‚úÖ –û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞: ${estimatedGas}`);
    
    if (estimatedGas > config.GAS_LIMIT) {
      console.log(`‚ö†Ô∏è  –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º gas limit —Å ${config.GAS_LIMIT} –¥–æ ${estimatedGas}`);
      transaction.gas = estimatedGas;
    }
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\n‚úçÔ∏è  –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const signedTx = await web3.eth.accounts.signTransaction(transaction, privateKey);
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞');
    
    // –†–ï–ê–õ–¨–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê
    console.log('\nüöÄ –û–¢–ü–†–ê–í–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –°–ï–¢–¨...');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ DEL!');
    
    const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
    
    console.log('\nüéâ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('================================');
    console.log(`üìÑ Transaction Hash: ${receipt.transactionHash}`);
    console.log(`üß± Block Number: ${receipt.blockNumber}`);
    console.log(`‚õΩ Gas Used: ${receipt.gasUsed}`);
    console.log(`üìç Status: ${receipt.status ? 'SUCCESS' : 'FAILED'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
    console.log('\nüí∞ –ë–ê–õ–ê–ù–°–´ –ü–û–°–õ–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    
    const newSenderBalance = await web3.eth.getBalance(config.WORKING_ADDRESS);
    const newSenderBalanceDEL = web3.utils.fromWei(newSenderBalance, 'ether');
    console.log(`   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${newSenderBalanceDEL} DEL (–±—ã–ª–æ: ${senderBalanceDEL} DEL)`);
    
    const newReceiverBalance = await web3.eth.getBalance(toAddress);
    const newReceiverBalanceDEL = web3.utils.fromWei(newReceiverBalance, 'ether');
    console.log(`   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${newReceiverBalanceDEL} DEL (–±—ã–ª–æ: ${receiverBalanceDEL} DEL)`);
    
    const sent = parseFloat(senderBalanceDEL) - parseFloat(newSenderBalanceDEL);
    const received = parseFloat(newReceiverBalanceDEL) - parseFloat(receiverBalanceDEL);
    
    console.log(`\nüìä –ò–ó–ú–ï–ù–ï–ù–ò–Ø:`);
    console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–≤–∫–ª—é—á–∞—è gas): ${sent.toFixed(6)} DEL`);
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${received.toFixed(6)} DEL`);
    
    if (Math.abs(received - parseFloat(amount)) < 0.000001) {
      console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞: ${amount} DEL`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å ${amount} DEL, –ø–æ–ª—É—á–µ–Ω–æ ${received} DEL`);
    }
    
    console.log(`\nüîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ:`);
    console.log(`   https://explorer.decimalchain.com/tx/${receipt.transactionHash}`);
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
    console.error(error.message);
    
    if (error.message.includes('insufficient funds')) {
      console.error('\nüí° –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å DEL –Ω–∞ —Ä–∞–±–æ—á–µ–º –∫–æ—à–µ–ª—å–∫–µ');
      console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ gas');
    } else if (error.message.includes('nonce')) {
      console.error('\nüí° –ü—Ä–æ–±–ª–µ–º–∞: –ö–æ–Ω—Ñ–ª–∏–∫—Ç nonce');
      console.error('   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥');
      console.error('   - –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    } else if (error.message.includes('gas')) {
      console.error('\nüí° –ü—Ä–æ–±–ª–µ–º–∞: Gas');
      console.error('   - –í–æ–∑–º–æ–∂–Ω–æ gas price —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π');
      console.error('   - –ò–ª–∏ gas limit –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω');
    } else {
      console.error('\nüí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏');
      console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ RPC —É–∑–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
sendRealTransaction().catch(console.error); 