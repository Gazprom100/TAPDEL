#!/usr/bin/env node

const { MongoClient } = require('mongodb');
require('dotenv').config({ path: './backend/.env' });

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0';
const decimalService = require('../backend/services/decimalService');

async function processQueuedWithdrawals() {
  console.log('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≤—ã–≤–æ–¥–æ–≤...\n');
  
  let client;
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    const database = client.db('tapdel');
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DecimalService
    await decimalService.initialize();
    console.log('‚úÖ DecimalService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –≤—ã–≤–æ–¥—ã
    const queuedWithdrawals = await database.collection('withdrawals').find({
      status: 'queued'
    }).toArray();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${queuedWithdrawals.length} –≤—ã–≤–æ–¥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏`);
    
    if (queuedWithdrawals.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤—ã–≤–æ–¥
    for (const withdrawal of queuedWithdrawals) {
      try {
        console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ ${withdrawal._id}:`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawal.userId}`);
        console.log(`   –°—É–º–º–∞: ${withdrawal.amount} DEL`);
        console.log(`   –ê–¥—Ä–µ—Å: ${withdrawal.toAddress}`);
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
        await database.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          { $set: { status: 'processing', processingStartedAt: new Date() } }
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const txHash = await decimalService.signAndSend(withdrawal.toAddress, withdrawal.amount);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await database.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          {
            $set: {
              status: 'sent',
              txHash: txHash,
              processedAt: new Date()
            },
            $unset: { processingStartedAt: 1 }
          }
        );
        
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! TX: ${txHash}`);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await database.collection('users').updateOne(
          { userId: withdrawal.userId },
          { $inc: { "gameState.tokens": withdrawal.amount } }
        );
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
        await database.collection('withdrawals').updateOne(
          { _id: withdrawal._id },
          {
            $set: {
              status: 'failed',
              error: error.message,
              processedAt: new Date()
            },
            $unset: { processingStartedAt: 1 }
          }
        );
        
        console.log(`   üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: +${withdrawal.amount} DEL`);
      }
    }
    
    console.log('\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    if (decimalService) {
      await decimalService.disconnect();
    }
    if (client) {
      await client.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  processQueuedWithdrawals().then(() => {
    console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  }).catch(error => {
    console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { processQueuedWithdrawals }; 