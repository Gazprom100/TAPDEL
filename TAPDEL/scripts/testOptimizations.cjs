#!/usr/bin/env node

require('dotenv').config({ path: './backend/.env' });

const databaseConfig = require('../backend/config/database');
const cacheService = require('../backend/services/cacheService');
const { performance } = require('perf_hooks');

class OptimizationTester {
  constructor() {
    this.results = {
      database: {},
      cache: {},
      performance: {},
      summary: {}
    };
  }

  async initialize() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô TAPDEL');
    console.log('==================================');
    console.log('üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ 2000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      await databaseConfig.connect();
      await cacheService.initialize();
      
      console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  async testDatabase() {
    console.log('üìä 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•');
    console.log('===============================');

    const start = performance.now();

    try {
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
      const health = await databaseConfig.healthCheck();
      const stats = await databaseConfig.getStats();

      // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const operationTests = await this.testDatabaseOperations();

      this.results.database = {
        health: health.healthy,
        responseTime: health.responseTime,
        stats: stats,
        operations: operationTests,
        testTime: Math.round((performance.now() - start) * 100) / 100
      };

      console.log(`‚úÖ MongoDB –∑–¥–æ—Ä–æ–≤—å–µ: ${health.healthy ? 'OK' : 'FAILED'}`);
      console.log(`‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${health.responseTime}ms`);
      console.log(`üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${stats?.connections?.current || 'N/A'}`);
      console.log(`üìà –û–ø–µ—Ä–∞—Ü–∏–∏/—Å–µ–∫: ${operationTests.throughput}`);
      console.log();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î:', error);
      this.results.database.error = error.message;
    }
  }

  async testDatabaseOperations() {
    const operations = [];
    const testCount = 100;
    
    console.log(`üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${testCount} –æ–ø–µ—Ä–∞—Ü–∏–π...`);

    const start = performance.now();

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    for (let i = 0; i < testCount; i++) {
      operations.push(
        databaseConfig.getCollection('users').updateOne(
          { userId: `test-opt-${i}` },
          { 
            $inc: { 'gameState.tokens': 1 },
            $set: { 'gameState.lastSaved': new Date() }
          },
          { upsert: true }
        )
      );
    }

    const results = await Promise.allSettled(operations);
    const successCount = results.filter(r => r.status === 'fulfilled').length;
    const totalTime = performance.now() - start;

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await databaseConfig.getCollection('users').deleteMany({
      userId: { $regex: /^test-opt-/ }
    });

    return {
      total: testCount,
      successful: successCount,
      failed: testCount - successCount,
      totalTime: Math.round(totalTime * 100) / 100,
      avgTime: Math.round(totalTime / testCount * 100) / 100,
      throughput: Math.round(successCount / (totalTime / 1000))
    };
  }

  async testCache() {
    console.log('üîÑ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø');
    console.log('===============================');

    const start = performance.now();

    try {
      // –¢–µ—Å—Ç Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connected = cacheService.isConnected;
      
      if (!connected) {
        console.log('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à');
      }

      // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
      const cachePerformance = await this.testCacheOperations();

      // –¢–µ—Å—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
      const specializedTests = await this.testSpecializedCache();

      this.results.cache = {
        connected,
        performance: cachePerformance,
        specialized: specializedTests,
        stats: cacheService.getStats(),
        testTime: Math.round((performance.now() - start) * 100) / 100
      };

      console.log(`‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${connected ? 'OK' : 'LOCAL ONLY'}`);
      console.log(`‚ö° –û–ø–µ—Ä–∞—Ü–∏–∏ –∫–µ—à–∞/—Å–µ–∫: ${cachePerformance.throughput}`);
      console.log(`üìà Hit rate: ${this.results.cache.stats.hitRate}`);
      console.log();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∞:', error);
      this.results.cache.error = error.message;
    }
  }

  async testCacheOperations() {
    const testCount = 200;
    const testData = { test: 'data', timestamp: Date.now() };

    console.log(`üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${testCount} –æ–ø–µ—Ä–∞—Ü–∏–π –∫–µ—à–∞...`);

    const start = performance.now();

    // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
    const writePromises = [];
    for (let i = 0; i < testCount; i++) {
      writePromises.push(
        cacheService.set(`test:cache:${i}`, { ...testData, id: i }, 60)
      );
    }

    await Promise.allSettled(writePromises);
    const writeTime = performance.now() - start;

    // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
    const readStart = performance.now();
    const readPromises = [];
    for (let i = 0; i < testCount; i++) {
      readPromises.push(
        cacheService.get(`test:cache:${i}`)
      );
    }

    const readResults = await Promise.allSettled(readPromises);
    const readTime = performance.now() - readStart;

    // –û—á–∏—Å—Ç–∫–∞
    for (let i = 0; i < testCount; i++) {
      await cacheService.del(`test:cache:${i}`);
    }

    const successfulReads = readResults.filter(r => r.status === 'fulfilled' && r.value).length;

    return {
      writes: {
        total: testCount,
        time: Math.round(writeTime * 100) / 100,
        throughput: Math.round(testCount / (writeTime / 1000))
      },
      reads: {
        total: testCount,
        successful: successfulReads,
        time: Math.round(readTime * 100) / 100,
        throughput: Math.round(successfulReads / (readTime / 1000))
      },
      overall: {
        throughput: Math.round((testCount * 2) / ((writeTime + readTime) / 1000))
      }
    };
  }

  async testSpecializedCache() {
    console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∫–µ—à–∞...');

    const tests = {};

    // –¢–µ—Å—Ç –∫–µ—à–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    const leaderboardStart = performance.now();
    const leaderboard1 = await cacheService.getLeaderboard(1, 50);
    const leaderboard2 = await cacheService.getLeaderboard(1, 50); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–µ—à–∞
    const leaderboardTime = performance.now() - leaderboardStart;

    tests.leaderboard = {
      firstCall: leaderboard1.length,
      secondCall: leaderboard2.length,
      cached: leaderboard1.length === leaderboard2.length,
      time: Math.round(leaderboardTime * 100) / 100
    };

    // –¢–µ—Å—Ç –∫–µ—à–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    const profileStart = performance.now();
    const profile1 = await cacheService.getUserProfile('telegram-12345');
    const profile2 = await cacheService.getUserProfile('telegram-12345'); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–µ—à–∞
    const profileTime = performance.now() - profileStart;

    tests.profile = {
      found: !!profile1,
      cached: JSON.stringify(profile1) === JSON.stringify(profile2),
      time: Math.round(profileTime * 100) / 100
    };

    return tests;
  }

  async testConcurrency() {
    console.log('‚ö° 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ö–£–†–ï–ù–¢–ù–û–°–¢–ò');
    console.log('==================================');

    const start = performance.now();

    try {
      // –°–∏–º—É–ª—è—Ü–∏—è 100 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const concurrentUsers = 100;
      const operations = [];

      console.log(`üé≠ –°–∏–º—É–ª—è—Ü–∏—è ${concurrentUsers} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

      // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      for (let i = 0; i < concurrentUsers; i++) {
        const userId = `concurrent-test-${i}`;
        
        operations.push(
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
          databaseConfig.getCollection('users').updateOne(
            { userId },
            { 
              $inc: { 'gameState.tokens': Math.floor(Math.random() * 100) },
              $set: { 'gameState.lastSaved': new Date() }
            },
            { upsert: true }
          ),
          
          // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
          cacheService.getUserProfile(userId),
          
          // –ó–∞–ø—Ä–æ—Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
          cacheService.getLeaderboard(Math.floor(Math.random() * 5) + 1, 20)
        );
      }

      const results = await Promise.allSettled(operations);
      const totalTime = performance.now() - start;

      const successful = results.filter(r => r.status === 'fulfilled').length;
      const failed = results.length - successful;

      // –û—á–∏—Å—Ç–∫–∞
      await databaseConfig.getCollection('users').deleteMany({
        userId: { $regex: /^concurrent-test-/ }
      });

      this.results.performance = {
        concurrentUsers,
        totalOperations: operations.length,
        successful,
        failed,
        totalTime: Math.round(totalTime * 100) / 100,
        throughput: Math.round(successful / (totalTime / 1000)),
        avgResponseTime: Math.round(totalTime / operations.length * 100) / 100
      };

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${successful}/${operations.length}`);
      console.log(`‚ö° –û–±—â–∏–π throughput: ${this.results.performance.throughput} ops/sec`);
      console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${this.results.performance.avgResponseTime}ms`);
      console.log();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏:', error);
      this.results.performance.error = error.message;
    }
  }

  async testScalabilityProjection() {
    console.log('üìà 4. –ü–†–û–ï–ö–¶–ò–Ø –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–ò');
    console.log('===============================');

    // –†–∞—Å—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤
    const dbThroughput = this.results.database?.operations?.throughput || 0;
    const cacheThroughput = this.results.cache?.performance?.overall?.throughput || 0;
    const concurrentThroughput = this.results.performance?.throughput || 0;

    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    const avgRequestsPerUserPerMinute = 50; // –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    const targetUsers = 2000;
    const expectedLoad = targetUsers * avgRequestsPerUserPerMinute / 60; // requests/sec

    const projections = {
      expectedLoad,
      databaseCapacity: dbThroughput,
      cacheCapacity: cacheThroughput,
      concurrentCapacity: concurrentThroughput,
      databaseUtilization: Math.round(expectedLoad / dbThroughput * 100),
      cacheUtilization: cacheThroughput > 0 ? Math.round(expectedLoad / cacheThroughput * 100) : 'N/A',
      recommendations: []
    };

    // –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (projections.databaseUtilization > 80) {
      projections.recommendations.push('–ö–†–ò–¢–ò–ß–ù–û: –£–≤–µ–ª–∏—á–∏—Ç—å connection pool –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã');
    } else if (projections.databaseUtilization > 60) {
      projections.recommendations.push('–í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } else {
      projections.recommendations.push('–ë–î: –ì–æ—Ç–æ–≤–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ');
    }

    if (cacheThroughput === 0) {
      projections.recommendations.push('–ö–†–ò–¢–ò–ß–ù–û: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è');
    } else if (typeof projections.cacheUtilization === 'number' && projections.cacheUtilization > 70) {
      projections.recommendations.push('–í–ù–ò–ú–ê–ù–ò–ï: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è');
    } else {
      projections.recommendations.push('–ö–ï–®: –ì–æ—Ç–æ–≤ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ');
    }

    this.results.summary = projections;

    console.log(`üéØ –û–∂–∏–¥–∞–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${expectedLoad.toFixed(1)} req/sec`);
    console.log(`üìä –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ë–î: ${dbThroughput} ops/sec (${projections.databaseUtilization}% –∑–∞–≥—Ä—É–∑–∫–∞)`);
    console.log(`üîÑ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–µ—à–∞: ${cacheThroughput} ops/sec`);
    console.log(`‚ö° –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${concurrentThroughput} ops/sec`);
    console.log();

    console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    projections.recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec}`);
    });
    console.log();
  }

  async generateReport() {
    console.log('üìã 5. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('====================');

    const report = {
      timestamp: new Date(),
      summary: this.results.summary,
      readiness: {
        database: this.results.database?.health && this.results.database?.operations?.throughput > 500,
        cache: this.results.cache?.connected || this.results.cache?.performance?.overall?.throughput > 0,
        performance: this.results.performance?.throughput > 200
      },
      details: this.results
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    const fs = require('fs');
    const reportPath = `optimization_test_${Date.now()}.json`;
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));

    const readyComponents = Object.values(report.readiness).filter(Boolean).length;
    const totalComponents = Object.keys(report.readiness).length;

    console.log(`üìä –ì–û–¢–û–í–ù–û–°–¢–¨ –ö 2000 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: ${readyComponents}/${totalComponents} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
    console.log();

    Object.entries(report.readiness).forEach(([component, ready]) => {
      console.log(`   ${ready ? '‚úÖ' : '‚ùå'} ${component.toUpperCase()}: ${ready ? '–ì–û–¢–û–í' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
    });

    console.log();
    console.log(`üìÅ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    if (readyComponents === totalComponents) {
      console.log('üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Æ –ù–ê 2000 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô!');
    } else if (readyComponents >= totalComponents * 0.8) {
      console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, —Ç—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
    } else {
      console.log('üö® –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
    }

    return report;
  }

  async cleanup() {
    try {
      // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await databaseConfig.getCollection('users').deleteMany({
        userId: { $regex: /^(test-|concurrent-)/ }
      });

      await cacheService.disconnect();
      await databaseConfig.disconnect();

      console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
    }
  }
}

async function main() {
  const tester = new OptimizationTester();

  try {
    const initialized = await tester.initialize();
    if (!initialized) {
      process.exit(1);
    }

    await tester.testDatabase();
    await tester.testCache();
    await tester.testConcurrency();
    await tester.testScalabilityProjection();
    await tester.generateReport();

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await tester.cleanup();
  }
}

if (require.main === module) {
  main().then(() => {
    console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  }).catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { OptimizationTester }; 