import React, { useState, useEffect } from 'react'
import { Profile } from './components/Profile'
import { EnergyIndicator } from './components/EnergyIndicator'
import { FullAdminPanel } from './components/FullAdminPanel'
import { useGameStore } from './store/gameStore'
import { useGameConfigStore } from './store/gameConfigStore'
import { useGameMechanics } from './hooks/useGameMechanics'
import { useFullscreen } from './hooks/useFullscreen'
import { COMPONENTS } from './types/game'
import './styles/effects.css'

const App: React.FC = () => {
  const [isProfileOpen, setIsProfileOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ Telegram WebApp
  useFullscreen();
  
  // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞ –¥–ª—è –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏
  const isAdminRoute = window.location.pathname === '/admin';
  
  // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å
  if (isAdminRoute) {
    return <FullAdminPanel />;
  }
  
  const { 
    tokens, 
    engineLevel,
    gearboxLevel,
    batteryLevel,
    powerGridLevel,
    initializeUser,
    activeTokenSymbol,
    refreshActiveToken
  } = useGameStore();

  const { loadConfig: loadGameConfig } = useGameConfigStore();

  useEffect(() => {
    const initializeApp = async () => {
      try {
        console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        setIsLoading(true);
        setError(null);
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (15 —Å–µ–∫—É–Ω–¥)
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')), 15000);
        });
        
        const initPromise = (async () => {
          // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω...');
          await refreshActiveToken();
          console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
          console.log('‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã...');
          await loadGameConfig();
          console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          console.log('üë§ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
          
          // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
          const problematicOldUserId = localStorage.getItem('oldUserId');
          if (problematicOldUserId === 'demo-user-atatvzu2f') {
            console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π oldUserId:', problematicOldUserId);
            localStorage.removeItem('oldUserId');
          }
          
          // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –µ—Å–ª–∏ userId –≤—Å–µ –µ—â–µ demo-user-atatvzu2f
          const currentUserId = localStorage.getItem('userId');
          if (currentUserId === 'demo-user-atatvzu2f') {
            console.log('üßπ –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π userId:', currentUserId);
            localStorage.removeItem('userId');
          }

          console.log('üöÄ App.tsx useEffect - –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
          
          let userId = localStorage.getItem('userId');
          console.log('üíæ localStorage userId:', userId);
          
          // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê TELEGRAM –î–ê–ù–ù–´–• –ù–ê –ö–ê–ñ–î–û–ú –ó–ê–ü–£–°–ö–ï
          const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
          console.log('üì± –¢–µ–∫—É—â–∏–µ Telegram –¥–∞–Ω–Ω—ã–µ:', telegramUser);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ telegramUser
          if (!telegramUser) {
            console.warn('‚ö†Ô∏è Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!');
          }
          
                  // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
        console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram WebApp:');
        console.log('  - window.Telegram:', !!window.Telegram);
        console.log('  - window.Telegram.WebApp:', !!window.Telegram?.WebApp);
        console.log('  - initDataUnsafe:', !!window.Telegram?.WebApp?.initDataUnsafe);
        console.log('  - user object:', !!window.Telegram?.WebApp?.initDataUnsafe?.user);
        console.log('  - user.id:', window.Telegram?.WebApp?.initDataUnsafe?.user?.id);
        console.log('  - platform:', (window.Telegram?.WebApp as any)?.platform || 'unknown');
        console.log('  - version:', (window.Telegram?.WebApp as any)?.version || 'unknown');
        console.log('  - user agent:', navigator.userAgent);
        console.log('  - is mobile:', /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
        console.log('  - screen size:', screen.width, 'x', screen.height);
        console.log('  - viewport:', window.innerWidth, 'x', window.innerHeight);
          
          // @ts-ignore
          if (telegramUser && telegramUser.id !== undefined && telegramUser.id !== null && telegramUser.id !== 0) {
            const correctUserId = `telegram-${telegramUser?.id || 0}`;
            console.log('üéØ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π userId –∏–∑ Telegram:', correctUserId);
            
            // –ï—Å–ª–∏ userId –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º
            if (userId !== correctUserId) {
              console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º userId –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏');
              console.log(`  –°—Ç–∞—Ä—ã–π userId: ${userId}`);
              console.log(`  –ù–æ–≤—ã–π userId: ${correctUserId}`);
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π userId –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
              if (userId && userId !== correctUserId) {
                const existingOldUserId = localStorage.getItem('oldUserId');
                if (!existingOldUserId || existingOldUserId !== userId) {
                  localStorage.setItem('oldUserId', userId || '');
                  console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω oldUserId –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:', userId);
                }
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º userId
              userId = correctUserId;
              localStorage.setItem('userId', correctUserId);
              console.log('‚úÖ userId –æ–±–Ω–æ–≤–ª–µ–Ω –≤ localStorage');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º userId
            console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å userId:', userId);
            await initializeUser(userId);
          } else {
            console.warn('‚ö†Ô∏è Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            
            // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            if (!userId) {
              userId = `web-user-${Math.floor(Math.random() * 1000000000)}`;
              localStorage.setItem('userId', userId);
              console.log('üîÑ –°–æ–∑–¥–∞–Ω fallback userId:', userId);
            }
            
            console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å fallback userId:', userId);
            await initializeUser(userId);
          }
          
          console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        })();
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        await Promise.race([initPromise, timeoutPromise]);
        
        setIsLoading(false);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
        setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        setIsLoading(false);
      }
    };
    
    initializeApp();
  }, [refreshActiveToken, loadGameConfig, initializeUser]);
  
  const {
    fuelLevel,
    hyperdriveCharge,
    isHyperdriveActive,
    gear,
    handleTap,
    activateHyperdrive,
    currentHyperdrive,
    getHyperdriveChargeColor
  } = useGameMechanics();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const currentEngine = COMPONENTS.ENGINES.find(e => e.level === engineLevel)!;
  const currentGearbox = COMPONENTS.GEARBOXES.find(g => g.level === gearboxLevel)!;
  const currentBattery = COMPONENTS.BATTERIES.find(b => b.level === batteryLevel)!;
  const currentPowerGrid = COMPONENTS.POWER_GRIDS.find(p => p.level === powerGridLevel)!;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–∞—Ö–æ–º–µ—Ç—Ä–∞
  const getTachometerColor = (currentGear: string, level: number) => {
    const zones = {
      'N': { color: 'rgba(100, 100, 100, 0.8)', threshold: 0 },
      '1': { color: 'rgba(0, 255, 136, 0.8)', threshold: 20 },
      '2': { color: 'rgba(255, 255, 0, 0.8)', threshold: 40 },
      '3': { color: 'rgba(255, 165, 0, 0.8)', threshold: 60 },
      '4': { color: 'rgba(255, 100, 0, 0.8)', threshold: 80 },
      'M': { color: 'rgba(255, 0, 0, 0.8)', threshold: 90 }
    };

    if (currentGear === 'N') return level > 0 ? zones['N'].color : 'rgba(100, 100, 100, 0.2)';
    if (currentGear === '1') return level <= 20 ? zones['1'].color : 'rgba(0, 255, 136, 0.2)';
    if (currentGear === '2') return level <= 40 ? (level <= 20 ? zones['1'].color : zones['2'].color) : 'rgba(255, 255, 0, 0.2)';
    if (currentGear === '3') return level <= 60 ? (level <= 20 ? zones['1'].color : level <= 40 ? zones['2'].color : zones['3'].color) : 'rgba(255, 165, 0, 0.2)';
    if (currentGear === '4') return level <= 80 ? (level <= 20 ? zones['1'].color : level <= 40 ? zones['2'].color : level <= 60 ? zones['3'].color : zones['4'].color) : 'rgba(255, 100, 0, 0.2)';
    if (currentGear === 'M') {
      if (level <= 20) return zones['1'].color;
      if (level <= 40) return zones['2'].color;
      if (level <= 60) return zones['3'].color;
      if (level <= 80) return zones['4'].color;
      return zones['M'].color;
    }
    
    return 'rgba(100, 100, 100, 0.2)';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  const getBatteryColor = (chargeLevel: number, activationThreshold: number) => {
    // –ó–µ–ª–µ–Ω—ã–π –∫–æ–≥–¥–∞ –∑–∞—Ä—è–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if (chargeLevel >= activationThreshold) return 'rgba(0, 255, 136, 0.8)';
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –∫ –∂–µ–ª—Ç–æ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞
    if (chargeLevel >= 80) return 'rgba(0, 255, 136, 0.8)'; // –ó–µ–ª–µ–Ω—ã–π
    if (chargeLevel >= 60) return 'rgba(255, 255, 0, 0.8)'; // –ñ–µ–ª—Ç—ã–π
    if (chargeLevel >= 40) return 'rgba(255, 165, 0, 0.8)'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    if (chargeLevel >= 20) return 'rgba(255, 100, 0, 0.8)'; // –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
    return 'rgba(255, 0, 0, 0.8)'; // –ö—Ä–∞—Å–Ω—ã–π
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∞–ø–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —à–∫–∞–ª–µ
  const tapActivity = gear === 'N' ? 0 : 
                     gear === '1' ? 20 :
                     gear === '2' ? 40 :
                     gear === '3' ? 60 :
                     gear === '4' ? 80 : 100;

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const tokenUpdateInterval = setInterval(() => {
      refreshActiveToken();
    }, 30000);
    
    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      clearInterval(tokenUpdateInterval);
    };
  }, [refreshActiveToken]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –æ–∫–Ω–µ (—Å–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
  useEffect(() => {
    const handleWindowFocus = async () => {
      console.log('üëÅÔ∏è –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
      const { syncGameState, refreshLeaderboard } = useGameStore.getState();
      try {
        await syncGameState();
        await refreshLeaderboard();
        console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ:', error);
      }
    };

    const handleVisibilityChange = async () => {
      if (!document.hidden) {
        console.log('üëÅÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
        const { syncGameState, refreshLeaderboard } = useGameStore.getState();
        try {
          await syncGameState();
          await refreshLeaderboard();
          console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
        }
      }
    };

    window.addEventListener('focus', handleWindowFocus);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    return () => {
      window.removeEventListener('focus', handleWindowFocus);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <div className="cyber-container" style={{
        height: '100vh',
        minHeight: '-webkit-fill-available',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0a0a',
        color: '#ffcc00'
      }}>
        <div className="cyber-text text-2xl font-bold mb-4">CYBERFLEX</div>
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-yellow-500"></div>
        <div className="mt-4 text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        <div className="mt-2 text-xs text-gray-500">
          {/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) 
            ? '–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è' 
            : '–î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è'}
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (error) {
    return (
      <div className="cyber-container" style={{
        height: '100vh',
        minHeight: '-webkit-fill-available',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0a0a',
        color: '#ff4444'
      }}>
        <div className="cyber-text text-2xl font-bold mb-4">CYBERFLEX</div>
        <div className="text-red-400 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
        <div className="text-gray-400 text-center px-4">{error}</div>
        <button 
          onClick={() => window.location.reload()} 
          className="mt-4 px-6 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white"
        >
          –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    );
  }

  return (
    <div 
      className={`cyber-container gear-${gear} ${isHyperdriveActive ? 'hyperdrive-active' : ''}`}
      style={{
        height: '100vh',
        minHeight: '-webkit-fill-available',
        WebkitTouchCallout: 'none',
        WebkitUserSelect: 'none',
        touchAction: 'none'
      }}
      onClick={!isProfileOpen ? handleTap : undefined}
      onTouchStart={!isProfileOpen ? handleTap : undefined}
    >
      {/* –§–æ–Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
      <div className="cyber-background-effects">
        <div className="cyber-grid" />
        <div className="cyber-scanline" />
        <div className="cyber-glitch" />
        <div className="cyber-vignette" />
      </div>

      {/* 1. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É –≤ —Ü–µ–Ω—Ç—Ä–µ - —Å–¥–≤–∏–≥–∞–µ–º –Ω–∏–∂–µ –∫–Ω–æ–ø–æ–∫ Telegram */}
      <div className="absolute left-1/2 transform -translate-x-1/2 z-20" style={{
        top: 'calc(var(--safe-top) + 100px)'
      }}>
        <div className="cyber-text text-2xl sm:text-3xl md:text-4xl font-bold text-center" style={{ 
          color: '#ffcc00',
          textShadow: '0 0 20px rgba(255, 204, 0, 0.5)'
        }}>
          CYBERFLEX
        </div>
      </div>

      {/* 2. –°—á–µ—Ç—á–∏–∫ –Ω–∞—Ç–∞–ø–∞–Ω–Ω—ã—Ö DEL - —Å–¥–≤–∏–≥–∞–µ–º –Ω–∏–∂–µ –Ω–∞–∑–≤–∞–Ω–∏—è */}
      <div className="absolute z-20" style={{
        top: 'calc(var(--safe-top) + 160px)',
        left: '70px',
        right: '70px',
        height: '30px'
      }}>
        <div className="cyber-panel h-full flex items-center justify-center" style={{
          boxShadow: '0 0 10px rgba(0, 255, 136, 0.3)'
        }}>
          <div className="text-center">
            <div className="cyber-text text-lg sm:text-xl md:text-2xl font-bold" style={{
              textShadow: '0 0 5px rgba(0, 255, 136, 0.8)'
            }}>
              {Math.floor(tokens)} {activeTokenSymbol || '...'}
            </div>
          </div>
        </div>
      </div>

      {/* 3. –î–≤–∞ –±–ª–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö - —Å–¥–≤–∏–≥–∞–µ–º –Ω–∏–∂–µ —Å—á–µ—Ç—á–∏–∫–∞ */}
      <div className="absolute z-20" style={{
        top: 'calc(var(--safe-top) + 210px)',
        left: '70px',
        right: '70px'
      }}>
        <div className="flex gap-2 sm:gap-3 md:gap-4">
          {/* –õ–µ–≤—ã–π –±–ª–æ–∫ */}
          <div className="flex-1 cyber-panel p-2 sm:p-2.5 md:p-3" style={{
            boxShadow: '0 0 5px rgba(0, 255, 136, 0.2)'
          }}>
            <div className="cyber-text mb-1 sm:mb-2" style={{ fontSize: '6px' }}>–î–í–ò–ì–ê–¢–ï–õ–¨ & –ö–ü–ü</div>
            <div className="cyber-text" style={{ fontSize: '5px' }}>
              {currentEngine.level} ‚Ä¢ {currentEngine.power}W ‚Ä¢ {currentEngine.fuelEfficiency}%
            </div>
            <div className="cyber-text" style={{ fontSize: '5px' }}>
              {currentGearbox.level} ‚Ä¢ {currentGearbox.gear}x ‚Ä¢ {currentGearbox.switchTime}ms
            </div>
          </div>
          
          {/* –ü—Ä–∞–≤—ã–π –±–ª–æ–∫ */}
          <div className="flex-1 cyber-panel p-2 sm:p-2.5 md:p-3" style={{
            boxShadow: '0 0 5px rgba(0, 255, 136, 0.2)'
          }}>
            <div className="cyber-text mb-1 sm:mb-2" style={{ fontSize: '6px' }}>–ë–ê–¢–ê–†–ï–Ø & –°–ï–¢–¨</div>
            <div className="cyber-text" style={{ fontSize: '5px' }}>
              {currentBattery.level} ‚Ä¢ {currentBattery.capacity}% ‚Ä¢ {currentBattery.chargeRate}%/s
            </div>
            <div className="cyber-text" style={{ fontSize: '5px' }}>
              {currentPowerGrid.level} ‚Ä¢ {currentPowerGrid.efficiency}% ‚Ä¢ {currentPowerGrid.maxLoad}W
            </div>
          </div>
        </div>
      </div>

      {/* 5. –õ–µ–≤–∞—è —à–∫–∞–ª–∞ —Ç–∞—Ö–æ–º–µ—Ç—Ä–∞ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∞–ø–∞–Ω—å—è) */}
      <div className="absolute left-1 sm:left-2 md:left-4 top-0 bottom-0 z-20 flex items-center">
        <div className="cyber-scale" style={{
          width: '34px',
          height: 'calc(100vh - 40px)',
          marginTop: '20px',
          marginBottom: '20px',
          background: 'linear-gradient(to bottom, rgba(0, 255, 136, 0.1), rgba(0, 100, 50, 0.1))',
          border: '2px solid rgba(0, 255, 136, 0.3)',
          borderRadius: '16px',
          position: 'relative',
          boxShadow: `0 0 15px rgba(0, 255, 136, 0.3), inset 0 0 15px rgba(0, 255, 136, 0.1)`,
          overflow: 'hidden'
        }}>
          {/* –§–æ–Ω–æ–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ —Ç–∞—Ö–æ–º–µ—Ç—Ä–∞ */}
          <div style={{
            position: 'absolute',
            bottom: 0,
            left: 0,
            right: 0,
            height: `${tapActivity}%`,
            background: `linear-gradient(to top, 
              ${getTachometerColor(gear, 20)}, 
              ${getTachometerColor(gear, tapActivity)})`,
            transition: 'height 0.2s ease-out',
            boxShadow: `0 0 8px ${getTachometerColor(gear, tapActivity)}`
          }} />
          
          {/* 100 –≥—Ä–∞–¥–∞—Ü–∏–π —à–∫–∞–ª—ã —Ç–∞—Ö–æ–º–µ—Ç—Ä–∞ */}
          {Array.from({ length: 100 }).map((_, i) => (
            <div
              key={i}
              style={{
                position: 'absolute',
                top: `${i * 1}%`,
                left: i % 10 === 0 ? '3px' : '6px',
                right: '3px',
                height: i % 10 === 0 ? '2px' : '1px',
                background: tapActivity >= (100 - i) ? 
                  getTachometerColor(gear, 100 - i) : 
                  'rgba(100, 100, 100, 0.2)',
                boxShadow: tapActivity >= (100 - i) ? 
                  `0 0 3px ${getTachometerColor(gear, 100 - i)}` : 'none'
              }}
            />
          ))}
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ç–∞—Ö–æ–º–µ—Ç—Ä–∞ */}
          <div style={{
            position: 'absolute',
            bottom: `${tapActivity}%`,
            left: '-2px',
            right: '-2px',
            height: '3px',
            background: getTachometerColor(gear, tapActivity),
            boxShadow: `0 0 12px ${getTachometerColor(gear, tapActivity)}`,
            transition: 'bottom 0.2s ease-out',
            borderRadius: '2px'
          }} />
        </div>
      </div>

      {/* 6. –ü—Ä–∞–≤–∞—è —à–∫–∞–ª–∞ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ */}
      <div className="absolute right-1 sm:right-2 md:right-4 top-0 bottom-0 z-20 flex items-center">
        <div className="cyber-scale" style={{
          width: '34px',
          height: 'calc(100vh - 40px)',
          marginTop: '20px',
          marginBottom: '20px',
          background: 'linear-gradient(to bottom, rgba(0, 255, 136, 0.1), rgba(255, 0, 0, 0.1))',
          border: '2px solid rgba(0, 255, 136, 0.3)',
          borderRadius: '16px',
          position: 'relative',
          boxShadow: `
            0 0 ${15 + hyperdriveCharge / 5}px ${getBatteryColor(hyperdriveCharge, currentHyperdrive.activationThreshold).replace('0.8', '0.4')},
            inset 0 0 15px rgba(0, 255, 136, 0.1)
          `,
          overflow: 'hidden'
        }}>
          {/* –§–æ–Ω–æ–≤–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ */}
          <div style={{
            position: 'absolute',
            bottom: 0,
            left: 0,
            right: 0,
            height: `${hyperdriveCharge}%`,
            background: `linear-gradient(to top, 
              ${getBatteryColor(hyperdriveCharge, currentHyperdrive.activationThreshold)}, 
              ${getBatteryColor(hyperdriveCharge, currentHyperdrive.activationThreshold)})`,
            transition: 'height 0.3s ease-out',
            boxShadow: `0 0 ${8 + hyperdriveCharge / 10}px ${getBatteryColor(hyperdriveCharge, currentHyperdrive.activationThreshold)}`
          }} />
          
          {/* 100 –≥—Ä–∞–¥–∞—Ü–∏–π —à–∫–∞–ª—ã */}
          {Array.from({ length: 100 }).map((_, i) => (
            <div
              key={i}
              style={{
                position: 'absolute',
                top: `${i * 1}%`,
                left: i % 10 === 0 ? '3px' : '6px',
                right: '3px',
                height: i % 10 === 0 ? '2px' : '1px',
                background: hyperdriveCharge >= (100 - i) ? 
                  getBatteryColor(100 - i, currentHyperdrive.activationThreshold) : 
                  'rgba(100, 100, 100, 0.2)',
                boxShadow: hyperdriveCharge >= (100 - i) ? 
                  `0 0 3px ${getBatteryColor(100 - i, currentHyperdrive.activationThreshold)}` : 'none'
              }}
            />
          ))}
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è */}
          <div style={{
            position: 'absolute',
            bottom: `${hyperdriveCharge}%`,
            left: '-2px',
            right: '-2px',
            height: '3px',
            background: getBatteryColor(hyperdriveCharge, currentHyperdrive.activationThreshold),
            boxShadow: `0 0 12px ${getBatteryColor(hyperdriveCharge, currentHyperdrive.activationThreshold)}`,
            transition: 'bottom 0.3s ease-out',
            borderRadius: '2px'
          }} />
        </div>
      </div>

      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å —Ç–æ–ø–ª–∏–≤–æ–º */}
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-20 pointer-events-none">
        <div 
          className="pointer-events-auto relative"
          onClick={(e) => {
            e.stopPropagation();
            handleTap();
          }}
          onTouchStart={(e) => {
            e.stopPropagation();
            handleTap();
          }}
          style={{
            width: 'clamp(280px, 35vw, 400px)',
            height: 'clamp(280px, 35vw, 400px)',
            borderRadius: '50%',
            background: 'radial-gradient(circle, rgba(0, 0, 0, 0.9) 0%, rgba(0, 0, 0, 0.7) 70%, transparent 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            position: 'relative',
            cursor: 'pointer',
            border: '2px solid var(--glow-color)',
            boxShadow: '0 0 30px rgba(0, 255, 136, 0.4)'
          }}
        >
          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Ç–æ–ø–ª–∏–≤–æ–º */}
          <div style={{
            width: '60%',
            height: '60%',
            borderRadius: '50%',
            background: `radial-gradient(circle, 
              rgba(0, 0, 0, 0.95) 0%, 
              rgba(0, 50, 25, 0.9) 50%, 
              rgba(0, 100, 50, 0.3) 100%)`,
            border: '2px solid rgba(0, 255, 136, 0.5)',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: `
              inset 0 0 30px rgba(0, 255, 136, 0.3),
              0 0 30px rgba(0, 255, 136, 0.4)
            `,
            position: 'relative'
          }}>
            {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç - —Ç–æ–ø–ª–∏–≤–æ */}
            <div className="cyber-text text-2xl sm:text-3xl md:text-4xl font-bold" style={{
              color: fuelLevel > 50 ? '#00ff88' : fuelLevel > 20 ? '#ffaa00' : '#ff4444',
              textShadow: `0 0 20px currentColor`,
              zIndex: 10,
              position: 'relative'
            }}>
              {Math.floor(fuelLevel)}%
        </div>

            <div className="cyber-text text-sm opacity-80" style={{
              color: '#00ff88',
              textShadow: '0 0 10px rgba(0, 255, 136, 0.8)',
              zIndex: 10,
              position: 'relative',
              marginTop: '5px'
            }}>
              –¢–û–ü–õ–ò–í–û
        </div>

            {/* –ü–µ—Ä–µ–¥–∞—á–∞ */}
            <div className="cyber-text text-sm opacity-80" style={{
              color: '#00ff88',
              textShadow: '0 0 10px rgba(0, 255, 136, 0.8)',
              zIndex: 10,
              position: 'relative',
              marginTop: '5px'
            }}>
              GEAR {gear}
            </div>

            {/* –ì–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
            {isHyperdriveActive && (
              <div 
                className="pulse-effect cyber-text text-xs" 
                style={{
                  color: '#ff0080',
                  textShadow: '0 0 15px rgba(255, 0, 128, 0.8)',
                  zIndex: 10,
                  position: 'relative',
                  marginTop: '3px'
                }}
              >
                HYPERDRIVE x{currentHyperdrive.speedMultiplier}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É - —É—á–∏—Ç—ã–≤–∞–µ–º safe-area */}
      <div className="absolute left-1/2 transform -translate-x-1/2 flex flex-col items-center gap-2.5 z-20" style={{
        bottom: 'calc(var(--safe-bottom) + 20px)'
      }}>
        {/* –ö–Ω–æ–ø–∫–∞ –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—è */}
        <button
          onClick={activateHyperdrive}
          className={`cyber-button-small ${isHyperdriveActive ? 'active' : ''}`}
          disabled={isHyperdriveActive || hyperdriveCharge < currentHyperdrive.activationThreshold}
          style={{
            opacity: isHyperdriveActive ? 0.8 : (hyperdriveCharge >= currentHyperdrive.activationThreshold ? 1 : 0.6)
          }}
        >
          {isHyperdriveActive ? '–ê–ö–¢–ò–í–ï–ù' : '–ó–ê–ü–£–°–ö'}
        </button>

        {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
        <button
          onClick={() => setIsProfileOpen(true)}
          className="cyber-button-small"
        >
          –ü—Ä–æ—Ñ–∏–ª—å
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è */}
      {isProfileOpen && (
        <Profile onClose={() => setIsProfileOpen(false)} />
      )}
    </div>
  )
}

export default App;