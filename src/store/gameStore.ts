import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { UserProfile, Transaction, LeaderboardEntry, Gear } from '../types';
import { 
  EngineMark, 
  GearboxLevel, 
  BatteryLevel, 
  HyperdriveLevel, 
  PowerGridLevel,
  GameState as GameStateBase,
  COMPONENTS,
  GAME_MECHANICS
} from '../types/game';
import { apiService } from '../services/api';

interface ExtendedGameState extends GameStateBase {
  profile: UserProfile | null;
  transactions: Transaction[];
  leaderboard: LeaderboardEntry[];
  isLoading: boolean;
  error: string | null;
  // –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π delBalance - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ tokens –∫–∞–∫ DEL
}

interface GameActions {
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  initializeUser: (userId: string) => Promise<void>;
  syncGameState: () => Promise<void>;
  
  // –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏
  addTokens: (amount: number) => Promise<void>;
  spendTokens: (amount: number, itemInfo?: { type: 'engine' | 'gearbox' | 'battery' | 'hyperdrive' | 'powerGrid'; level: string }) => Promise<boolean>;
  withdrawTokens: (amount: number) => Promise<boolean>;
  depositTokens: (amount: number) => Promise<boolean>;
  
  // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
  upgradeEngine: (level: EngineMark) => Promise<void>;
  upgradeGearbox: (level: GearboxLevel) => Promise<void>;
  upgradeBattery: (level: BatteryLevel) => Promise<void>;
  upgradeHyperdrive: (level: HyperdriveLevel) => Promise<void>;
  upgradePowerGrid: (level: PowerGridLevel) => Promise<void>;
  
  // –î–µ–π—Å—Ç–≤–∏—è —Å —ç–Ω–µ—Ä–≥–∏–µ–π
  setFuelLevel: (level: number) => void;
  upgradeMaxEnergy: (amount: number) => void;
  upgradeEnergyRecovery: (amount: number) => void;
  
  // –î–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–∞–º–∏
  setGear: (gear: Gear) => void;
  upgradeMaxGear: (gear: Gear) => void;
  
  // –ü—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  updateProfile: (profile: Partial<UserProfile>) => Promise<void>;
  addTransaction: (transaction: Omit<Transaction, 'id' | 'timestamp'>) => Promise<void>;
  updateLeaderboard: (entries: LeaderboardEntry[]) => Promise<void>;

  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  setTemperature: (temp: number) => void;
  setPowerLevel: (level: number) => void;
  setIsOverheated: (state: boolean) => void;
  setCoolingTimer: (time: number) => void;
  setHyperdriveActive: (state: boolean) => void;
  setError: (error: string | null) => void;
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  startAutoSync: () => void;
  stopAutoSync: () => void;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
  refreshLeaderboard: () => Promise<void>;
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DEL –±–∞–ª–∞–Ω—Å–∞ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞)
  refreshBalance: () => Promise<void>;
}

type GameStore = ExtendedGameState & GameActions;

export const useGameStore = create<GameStore>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      tokens: 0,
      highScore: 0,
      engineLevel: COMPONENTS.ENGINES[0].level as EngineMark,
      gearboxLevel: COMPONENTS.GEARBOXES[0].level as GearboxLevel,
      batteryLevel: COMPONENTS.BATTERIES[0].level as BatteryLevel,
      hyperdriveLevel: COMPONENTS.HYPERDRIVES[0].level as HyperdriveLevel,
      powerGridLevel: COMPONENTS.POWER_GRIDS[0].level as PowerGridLevel,
      enginePower: 0,
      currentGear: 'N',
      temperature: GAME_MECHANICS.TEMPERATURE.MIN,
      fuelLevel: GAME_MECHANICS.ENERGY.MAX_LEVEL,
      powerLevel: 0,
      isOverheated: false,
      coolingTimer: 0,
      lastTapTimestamp: 0,
      tapRate: 0,
      hyperdriveActive: false,
      profile: null,
      transactions: [],
      leaderboard: [],
      isLoading: false,
      error: null,
      // –£–±–∏—Ä–∞–µ–º delBalance - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ tokens –∫–∞–∫ DEL

      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      setError: (error) => set({ error }),
      
      initializeUser: async (userId) => {
        try {
          console.log(`üèÅ gameStore.initializeUser –∑–∞–ø—É—â–µ–Ω –¥–ª—è userId: ${userId}`);
          set({ isLoading: true, error: null });
          
          // –í–°–ï–ì–î–ê —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ MongoDB
          console.log(`üîÑ –°–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ MongoDB...`);
          set({
            tokens: 0,
            highScore: 0,
            engineLevel: COMPONENTS.ENGINES[0].level as EngineMark,
            gearboxLevel: COMPONENTS.GEARBOXES[0].level as GearboxLevel,
            batteryLevel: COMPONENTS.BATTERIES[0].level as BatteryLevel,
            hyperdriveLevel: COMPONENTS.HYPERDRIVES[0].level as HyperdriveLevel,
            powerGridLevel: COMPONENTS.POWER_GRIDS[0].level as PowerGridLevel,
            profile: null,
            transactions: [],
            leaderboard: []
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
          const oldUserId = localStorage.getItem('oldUserId');
          if (oldUserId && oldUserId !== userId) {
            console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: ${oldUserId} -> ${userId}`);
            try {
              const migrationResult = await apiService.migrateUser(userId, oldUserId);
              if (migrationResult.migrated) {
                console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–æ–∫–µ–Ω—ã: ${migrationResult.tokens}`);
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π userId –∏–∑ localStorage
                localStorage.removeItem('oldUserId');
              } else {
                console.log(`‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            }
          }
          
          // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB
          console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB...`);
          const user = await apiService.getUser(userId);
          
          if (user) {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:`, {
              userId: user.userId,
              profileUsername: user.profile?.username,
              telegramUsername: user.profile?.telegramUsername,
              tokens: user.gameState?.tokens
            });
            const { gameState, profile, transactions } = user;
            set({
              tokens: gameState.tokens,
              highScore: gameState.highScore,
              engineLevel: gameState.engineLevel as EngineMark,
              gearboxLevel: gameState.gearboxLevel as GearboxLevel,
              batteryLevel: gameState.batteryLevel as BatteryLevel,
              hyperdriveLevel: gameState.hyperdriveLevel as HyperdriveLevel,
              powerGridLevel: gameState.powerGridLevel as PowerGridLevel,
              profile,
              transactions
            });
                      } else {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ...`);
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            let telegramUserData = null;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage —Å–Ω–∞—á–∞–ª–∞
            try {
              const storedData = localStorage.getItem('telegramUserData');
              if (storedData) {
                telegramUserData = JSON.parse(storedData);
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ:', telegramUserData);
              }
            } catch (error) {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', error);
            }
            
            // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º –∏–∑ Telegram WebApp
            if (!telegramUserData) {
              const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
              if (telegramUser?.id) {
                telegramUserData = {
                  telegramId: telegramUser.id.toString(),
                  telegramUsername: telegramUser.username,
                  telegramFirstName: telegramUser.first_name,
                  telegramLastName: telegramUser.last_name,
                  username: telegramUser.username || `${telegramUser.first_name} ${telegramUser.last_name}`.trim()
                };
                console.log('üì± –ü–æ–ª—É—á–µ–Ω—ã —Å–≤–µ–∂–∏–µ Telegram –¥–∞–Ω–Ω—ã–µ:', telegramUserData);
              }
            }
            
            const newProfile: UserProfile = {
              userId,
              username: telegramUserData?.telegramUsername || telegramUserData?.username || `–ò–≥—Ä–æ–∫ ${userId.slice(-4)}`,
              maxEnergy: 100,
              energyRecoveryRate: 1,
              maxGear: 'M' as Gear,
              level: 1,
              experience: 0,
              createdAt: new Date(),
              lastLogin: new Date(),
              telegramId: telegramUserData?.telegramId,
              telegramUsername: telegramUserData?.telegramUsername,
              telegramFirstName: telegramUserData?.telegramFirstName,
              telegramLastName: telegramUserData?.telegramLastName
            };
            
            set({ profile: newProfile });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await apiService.updateUser(userId, { 
              profile: newProfile,
              gameState: {
                tokens: 0,
                highScore: 0,
                engineLevel: 'Mk I',
                gearboxLevel: 'L1',
                batteryLevel: 'B1',
                hyperdriveLevel: 'H1',
                powerGridLevel: 'P1'
              }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            try {
              const leaderboardData = {
                userId: userId,
                username: newProfile.telegramFirstName || newProfile.telegramUsername || newProfile.username,
                telegramId: newProfile.telegramId,
                telegramUsername: newProfile.telegramUsername,
                telegramFirstName: newProfile.telegramFirstName,
                telegramLastName: newProfile.telegramLastName,
                tokens: 0
              };
              console.log('üèÜ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥:', leaderboardData);
              
              await apiService.updateLeaderboard(leaderboardData);
              console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥');
            } catch (error) {
              console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥:', error);
            }
          }
          
          // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
          const currentState = get();
          if (currentState.profile?.userId) {
            try {
              console.log(`üèÜ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Å ${currentState.tokens} —Ç–æ–∫–µ–Ω–∞–º–∏`);
              await apiService.updateLeaderboard({
                userId: currentState.profile.userId,
                username: currentState.profile.telegramFirstName || currentState.profile.telegramUsername || currentState.profile.username,
                telegramId: currentState.profile.telegramId,
                telegramUsername: currentState.profile.telegramUsername,
                telegramFirstName: currentState.profile.telegramFirstName,
                telegramLastName: currentState.profile.telegramLastName,
                tokens: currentState.tokens
              });
              console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥`);
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥:', error);
            }
          }
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
          try {
            console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
            const dbLeaderboard = await apiService.getLeaderboard();
            
            if (dbLeaderboard && dbLeaderboard.length > 0) {
              const leaderboard: LeaderboardEntry[] = dbLeaderboard.map(entry => ({
                id: entry._id.toString(),
                userId: entry.userId,
                username: entry.telegramUsername ? `@${entry.telegramUsername}` : entry.telegramFirstName || entry.username || `–ò–≥—Ä–æ–∫ ${entry.userId.slice(-4)}`,
                level: Math.floor((entry.tokens || 0) / 1000) + 1, // –£—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
                score: entry.tokens || 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º tokens
                tokens: entry.tokens || 0, // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                maxGear: 'M' as Gear,
                rank: entry.rank,
                updatedAt: entry.updatedAt
              }));
              
              console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏–¥–µ—Ä–±–æ—Ä–¥: ${leaderboard.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
              set({ leaderboard });
            } else {
              console.log('üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç - –æ–∂–∏–¥–∞–µ–º –ø–µ—Ä–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
              set({ leaderboard: [] });
            }
          } catch (leaderboardError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', leaderboardError);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            set({ leaderboard: [] });
          }
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DEL –±–∞–ª–∞–Ω—Å
          try {
            console.log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DEL –±–∞–ª–∞–Ω—Å–∞...');
            await get().refreshBalance();
          } catch (delBalanceError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å DEL –±–∞–ª–∞–Ω—Å (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):', delBalanceError);
          }
          
        } catch (error) {
          set({ error: (error as Error).message });
        } finally {
          set({ isLoading: false });
        }
      },

      syncGameState: async () => {
        try {
          const state = get();
          if (!state.profile?.userId) {
            console.warn('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ—Ç userId');
            return;
          }

          console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö —Å MongoDB –¥–ª—è ${state.profile.userId}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º highScore –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          const newHighScore = Math.max(state.highScore, state.tokens);
          if (newHighScore !== state.highScore) {
            set({ highScore: newHighScore });
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ MongoDB
          await apiService.updateGameState(state.profile.userId, {
            tokens: state.tokens,
            highScore: newHighScore,
            engineLevel: state.engineLevel,
            gearboxLevel: state.gearboxLevel,
            batteryLevel: state.batteryLevel,
            hyperdriveLevel: state.hyperdriveLevel,
            powerGridLevel: state.powerGridLevel,
            lastSaved: new Date()
          });

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          try {
            await apiService.updateLeaderboard({
              userId: state.profile.userId,
              username: state.profile.telegramFirstName || state.profile.telegramUsername || state.profile.username,
              telegramId: state.profile.telegramId,
              telegramUsername: state.profile.telegramUsername,
              telegramFirstName: state.profile.telegramFirstName,
              telegramLastName: state.profile.telegramLastName,
              tokens: state.tokens
            });
            console.log(`üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –æ–±–Ω–æ–≤–ª–µ–Ω —Å ${state.tokens} —Ç–æ–∫–µ–Ω–∞–º–∏`);
          } catch (leaderboardError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', leaderboardError);
          }

          console.log(`‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ gameState:', error);
          set({ error: (error as Error).message });
        }
      },

      // –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏ (–ù–û–í–ê–Ø –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê)
      addTokens: async (amount) => {
        try {
          set((state) => ({ tokens: state.tokens + amount }));
          
          // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å MongoDB
          await get().syncGameState();
          console.log(`üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} —Ç–æ–∫–µ–Ω–æ–≤, –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å MongoDB`);
        } catch (error) {
          set({ error: (error as Error).message });
        }
      },

      spendTokens: async (amount, itemInfo?: { type: 'engine' | 'gearbox' | 'battery' | 'hyperdrive' | 'powerGrid'; level: string }) => {
        try {
          const state = get();
          if (state.tokens < amount) return false;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const newTransaction = {
            id: Date.now().toString(),
            type: 'purchase' as const,
            amount: -amount,
            timestamp: Date.now(),
            status: 'completed' as const,
            itemInfo
          };
          
          set((state) => ({
            tokens: state.tokens - amount,
            transactions: [newTransaction, ...state.transactions]
          }));

          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ MongoDB
          if (state.profile?.userId) {
            await apiService.addTransaction(state.profile.userId, {
              type: newTransaction.type,
              amount: newTransaction.amount,
              status: newTransaction.status,
              itemInfo: newTransaction.itemInfo
            });
          }

          // –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å MongoDB
          await get().syncGameState();
          console.log(`üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ ${amount} —Ç–æ–∫–µ–Ω–æ–≤, –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å MongoDB`);
          return true;
        } catch (error) {
          set({ error: (error as Error).message });
          return false;
        }
      },

      withdrawTokens: async (amount) => {
        try {
          const state = get();
          if (state.tokens < amount) return false;
          
          const newTransaction = {
            id: Date.now().toString(),
            type: 'withdraw' as const,
            amount: -amount,
            timestamp: Date.now(),
            status: 'completed' as const
          };
          
          set((state) => ({
            tokens: state.tokens - amount,
            transactions: [newTransaction, ...state.transactions]
          }));

          if (state.profile?.userId) {
            await apiService.addTransaction(state.profile.userId, {
              type: newTransaction.type,
              amount: newTransaction.amount,
              status: newTransaction.status
            });
          }

          await get().syncGameState();
          return true;
        } catch (error) {
          set({ error: (error as Error).message });
          return false;
        }
      },

      depositTokens: async (amount) => {
        try {
          const newTransaction = {
            id: Date.now().toString(),
            type: 'deposit' as const,
            amount: amount,
            timestamp: Date.now(),
            status: 'completed' as const
          };
          
          set((state) => ({
            tokens: state.tokens + amount,
            transactions: [newTransaction, ...state.transactions]
          }));

          if (get().profile?.userId) {
            await apiService.addTransaction(get().profile!.userId, {
              type: newTransaction.type,
              amount: newTransaction.amount,
              status: newTransaction.status
            });
          }

          await get().syncGameState();
          return true;
        } catch (error) {
          set({ error: (error as Error).message });
          return false;
        }
      },

      // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
      upgradeEngine: async (level) => {
        set({ engineLevel: level });
        console.log(`üîß –ê–ø–≥—Ä–µ–π–¥ –¥–≤–∏–≥–∞—Ç–µ–ª—è –¥–æ ${level}`);
        await get().syncGameState();
      },
      
      upgradeGearbox: async (level) => {
        set({ gearboxLevel: level });
        console.log(`‚öôÔ∏è –ê–ø–≥—Ä–µ–π–¥ –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á –¥–æ ${level}`);
        await get().syncGameState();
      },
      
      upgradeBattery: async (level) => {
        set({ batteryLevel: level });
        console.log(`üîã –ê–ø–≥—Ä–µ–π–¥ –±–∞—Ç–∞—Ä–µ–∏ –¥–æ ${level}`);
        await get().syncGameState();
      },
      
      upgradeHyperdrive: async (level) => {
        set({ hyperdriveLevel: level });
        console.log(`üöÄ –ê–ø–≥—Ä–µ–π–¥ –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—è –¥–æ ${level}`);
        await get().syncGameState();
      },
      
      upgradePowerGrid: async (level) => {
        set({ powerGridLevel: level });
        console.log(`‚ö° –ê–ø–≥—Ä–µ–π–¥ —ç–Ω–µ—Ä–≥–æ—Å–µ—Ç–∏ –¥–æ ${level}`);
        await get().syncGameState();
      },

      // –î–µ–π—Å—Ç–≤–∏—è —Å —ç–Ω–µ—Ä–≥–∏–µ–π
      setFuelLevel: (level) => set({ fuelLevel: level }),
      
      upgradeMaxEnergy: (amount) => set((state) => ({
        profile: state.profile ? {
          ...state.profile,
          maxEnergy: state.profile.maxEnergy + amount
        } : null
      })),

      upgradeEnergyRecovery: (amount) => set((state) => ({
        profile: state.profile ? {
          ...state.profile,
          energyRecoveryRate: state.profile.energyRecoveryRate + amount
        } : null
      })),

      // –î–µ–π—Å—Ç–≤–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–∞–º–∏
      setGear: (gear: Gear) => set({ currentGear: gear }),
      
      upgradeMaxGear: (gear: Gear) => set((state) => ({
        profile: state.profile ? {
          ...state.profile,
          maxGear: gear
        } : null
      })),

      // –ü—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      updateProfile: async (profileUpdate) => {
        try {
          const state = get();
          const newProfile = state.profile ? {
            ...state.profile,
            ...profileUpdate
          } : null;

          set({ profile: newProfile });

          if (newProfile?.userId) {
            await apiService.updateUser(newProfile.userId, { profile: newProfile });
          }
        } catch (error) {
          set({ error: (error as Error).message });
        }
      },

      addTransaction: async (transaction) => {
        try {
          const state = get();
          const newTransaction = {
            id: Date.now().toString(),
            timestamp: Date.now(),
            ...transaction
          };

          set((state) => ({
            transactions: [newTransaction, ...state.transactions]
          }));

          if (state.profile?.userId) {
            await apiService.addTransaction(state.profile.userId, {
              type: newTransaction.type,
              amount: newTransaction.amount,
              status: newTransaction.status
            });
          }
        } catch (error) {
          set({ error: (error as Error).message });
        }
      },

      updateLeaderboard: async (entries) => {
        try {
          set({ leaderboard: entries });
          
          const state = get();
          if (state.profile?.userId) {
            await apiService.updateLeaderboard({
              userId: state.profile.userId,
              username: state.profile.telegramFirstName || state.profile.telegramUsername || state.profile.username,
              telegramId: state.profile.telegramId,
              telegramUsername: state.profile.telegramUsername,
              telegramFirstName: state.profile.telegramFirstName,
              telegramLastName: state.profile.telegramLastName,
              tokens: state.tokens // –ò—Å–ø–æ–ª—å–∑—É–µ–º tokens –≤–º–µ—Å—Ç–æ score
            });
          }
        } catch (error) {
          set({ error: (error as Error).message });
        }
      },

      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      setTemperature: (temp: number) => set({ temperature: temp }),
      setPowerLevel: (level: number) => set({ powerLevel: level }),
      setIsOverheated: (state: boolean) => set({ isOverheated: state }),
      setCoolingTimer: (time: number) => set({ coolingTimer: time }),
      setHyperdriveActive: (state: boolean) => set({ hyperdriveActive: state }),

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞)
      startAutoSync: () => {
        const interval = setInterval(async () => {
          try {
            const state = get();
            if (!state.profile?.userId) return;

            console.log(`üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB...`);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MongoDB
            try {
              const user = await apiService.getUser(state.profile.userId);
              if (user) {
                const { gameState, profile, transactions } = user;
                set({
                  tokens: gameState.tokens,
                  highScore: gameState.highScore,
                  engineLevel: gameState.engineLevel as EngineMark,
                  gearboxLevel: gameState.gearboxLevel as GearboxLevel,
                  batteryLevel: gameState.batteryLevel as BatteryLevel,
                  hyperdriveLevel: gameState.hyperdriveLevel as HyperdriveLevel,
                  powerGridLevel: gameState.powerGridLevel as PowerGridLevel,
                  profile,
                  transactions
                });
                console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${gameState.tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
              }
            } catch (error) {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            try {
              const dbLeaderboard = await apiService.getLeaderboard();
              if (dbLeaderboard && dbLeaderboard.length > 0) {
                const leaderboard = dbLeaderboard.map(entry => ({
                  id: entry._id.toString(),
                  userId: entry.userId,
                  username: entry.telegramUsername ? `@${entry.telegramUsername}` : entry.telegramFirstName || entry.username || `–ò–≥—Ä–æ–∫ ${entry.userId.slice(-4)}`,
                  level: Math.floor((entry.tokens || 0) / 1000) + 1,
                  score: entry.tokens || 0,
                  tokens: entry.tokens || 0,
                  maxGear: 'M' as Gear,
                  rank: entry.rank,
                  updatedAt: entry.updatedAt
                }));
                set({ leaderboard });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º—ã –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
                const currentUser = leaderboard.find(entry => entry.userId === state.profile?.userId);
                if (currentUser) {
                  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: —Ä–∞–Ω–≥ ${currentUser.rank}, —Ç–æ–∫–µ–Ω—ã ${currentUser.tokens}`);
                } else {
                  console.log(`‚ö†Ô∏è –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ`);
                }
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
            }
            
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
          }
        }, 10000); // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        (window as any).tapdel_sync_interval = interval;
      },

      stopAutoSync: () => {
        if ((window as any).tapdel_sync_interval) {
          clearInterval((window as any).tapdel_sync_interval);
          (window as any).tapdel_sync_interval = null;
        }
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
      refreshLeaderboard: async () => {
        try {
          const dbLeaderboard = await apiService.getLeaderboard();
          if (dbLeaderboard && dbLeaderboard.length > 0) {
            const leaderboard = dbLeaderboard.map(entry => ({
              id: entry._id.toString(),
              userId: entry.userId,
              username: entry.telegramUsername ? `@${entry.telegramUsername}` : entry.telegramFirstName || entry.username || `–ò–≥—Ä–æ–∫ ${entry.userId.slice(-4)}`,
              level: Math.floor((entry.tokens || 0) / 1000) + 1,
              score: entry.tokens || 0,
              tokens: entry.tokens || 0,
              maxGear: 'M' as Gear,
              rank: entry.rank,
              updatedAt: entry.updatedAt
            }));
            set({ leaderboard });
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (${leaderboard.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
          } else {
            console.log('‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
        }
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DEL –±–∞–ª–∞–Ω—Å–∞ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞)
      refreshBalance: async () => {
        try {
          const state = get();
          if (!state.profile?.userId) return;
          
          const { decimalApi } = await import('../services/decimalApi');
          const balance = await decimalApi.getUserBalance(state.profile.userId);
          set({ tokens: balance.gameBalance }); // –ó–∞–≥—Ä—É–∂–∞–µ–º DEL –±–∞–ª–∞–Ω—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ tokens
          console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω DEL –±–∞–ª–∞–Ω—Å: ${balance.gameBalance} DEL`);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
          await get().refreshLeaderboard();
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DEL –±–∞–ª–∞–Ω—Å–∞:', error);
        }
      }
    }),
    {
      name: 'tapdel-storage',
      partialize: (state) => ({
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã UI
        // –í–°–ï –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ MongoDB –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        // –¢–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        fuelLevel: state.fuelLevel,
        currentGear: state.currentGear,
        temperature: state.temperature,
        powerLevel: state.powerLevel,
        isOverheated: state.isOverheated,
        coolingTimer: state.coolingTimer,
        lastTapTimestamp: state.lastTapTimestamp,
        hyperdriveActive: state.hyperdriveActive,
        
        // –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        lastSyncTime: Date.now()
        
        // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:
        // - tokens (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ MongoDB)
        // - profile (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ MongoDB) 
        // - transactions (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ MongoDB)
        // - leaderboard (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ MongoDB)
        // - –≤—Å–µ –∞–ø–≥—Ä–µ–π–¥—ã (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ MongoDB)
        // - highScore (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ MongoDB)
      })
    }
  )
); 