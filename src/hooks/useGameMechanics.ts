import { useCallback, useEffect, useState } from 'react';
import { COMPONENTS, GAME_MECHANICS } from '../types/game';
import { useGameStore } from '../store/gameStore';
import { useGameConfigStore } from '../store/gameConfigStore';

// –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–µ—Ö–∞–Ω–∏–∫–∏ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ config)
const FUEL_MECHANICS_BASE = {
  MIN_LEVEL: 0,
  // –ó–∞ 3 –º–∏–Ω—É—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–ø–∞–Ω–∏—è 5 –ø–∞–ª—å—Ü–∞–º–∏ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ~15 —Ç–∞–ø–æ–≤/—Å–µ–∫) —Ç—Ä–∞—Ç–∏—Ç—Å—è –≤—Å–µ —Ç–æ–ø–ª–∏–≤–æ
  // –ü—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏: 15 —Ç–∞–ø–æ–≤/—Å–µ–∫ * 180 —Å–µ–∫ = 2700 —Ç–∞–ø–æ–≤
  BASE_CONSUMPTION_RATIO: 1 / (15 * 3 * 60), // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
  // –ó–∞ 3 –º–∏–Ω—É—Ç—ã –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Å–µ —Ç–æ–ø–ª–∏–≤–æ
  BASE_RECOVERY_RATIO: 1 / (3 * 60), // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  INACTIVITY_THRESHOLD: 2000 // 2 —Å–µ–∫—É–Ω–¥—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
};

const HYPERDRIVE_MECHANICS = {
  MAX_CHARGE: 100,
  MIN_CHARGE: 0,
  // –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–∞–ø–∞–Ω–∏—è
  CHARGE_RATE: 0.5, // % –∑–∞ —Ç–∞–ø
  // –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∞—Ç–∏—Ç—Å—è –∏ —Ç–æ–ø–ª–∏–≤–æ, –∏ –∑–∞—Ä—è–¥
  FUEL_CONSUMPTION_MULTIPLIER: 2, // –£–¥–≤–∞–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –ø—Ä–∏ —Ç–∞–ø–∞—Ö
  // –ë–∞–∑–æ–≤–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç —Ç–∞–ø–æ–≤
  BASE_CONSUMPTION_RATE: 100 / 20, // 5% –≤ —Å–µ–∫—É–Ω–¥—É –±–∞–∑–æ–≤–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ (20 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª–Ω—É—é)
  CONSUMPTION_PER_TAP: 100 / 100, // 1% –∑–∞ —Ç–∞–ø –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª–µ
};

export const useGameMechanics = () => {
  const {
    engineLevel,
    gearboxLevel,
    batteryLevel,
    hyperdriveLevel,
    powerGridLevel,
    addTokens
  } = useGameStore();

  const { config, isLoaded, loadConfig } = useGameConfigStore();

  const [fuelLevel, setFuelLevel] = useState(100); // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [hyperdriveCharge, setHyperdriveCharge] = useState(HYPERDRIVE_MECHANICS.MIN_CHARGE);
  const [isHyperdriveActive, setIsHyperdriveActive] = useState(false);
  const [lastTapTime, setLastTapTime] = useState(0);
  const [gear, setGear] = useState('N');
  const [taps, setTaps] = useState<number[]>([]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (!isLoaded) {
      loadConfig();
    }
  }, [isLoaded, loadConfig]);

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const FUEL_MECHANICS = {
    MAX_LEVEL: config.energyMax,
    MIN_LEVEL: FUEL_MECHANICS_BASE.MIN_LEVEL,
    CONSUMPTION_PER_TAP: config.energyMax * FUEL_MECHANICS_BASE.BASE_CONSUMPTION_RATIO,
    RECOVERY_RATE: config.energyMax * FUEL_MECHANICS_BASE.BASE_RECOVERY_RATIO * config.energyRegenRate,
    INACTIVITY_THRESHOLD: 2000
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    if (isLoaded && fuelLevel === 100) {
      setFuelLevel(config.energyMax);
    }
  }, [isLoaded, config.energyMax]);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const currentEngine = COMPONENTS.ENGINES.find(e => e.level === engineLevel)!;
  const currentGearbox = COMPONENTS.GEARBOXES.find(g => g.level === gearboxLevel)!;
  const currentBattery = COMPONENTS.BATTERIES.find(b => b.level === batteryLevel)!;
  const currentHyperdrive = COMPONENTS.HYPERDRIVES.find(h => h.level === hyperdriveLevel)!;
  const currentPowerGrid = COMPONENTS.POWER_GRIDS.find(p => p.level === powerGridLevel)!;

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏
  const calculateGear = useCallback((tapHistory: number[]) => {
    const now = Date.now();
    const recentTaps = tapHistory.filter(tap => now - tap < 1000);
    const tapsPerSecond = recentTaps.length;
    
    if (tapsPerSecond >= 15) return 'M';
    if (tapsPerSecond >= 12) return '4';
    if (tapsPerSecond >= 8) return '3';
    if (tapsPerSecond >= 4) return '2';
    if (tapsPerSecond >= 1) return '1';
    return 'N';
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–∞
  const handleTap = useCallback(async () => {
    const now = Date.now();
    setLastTapTime(now);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–∞–ø–æ–≤
    const newTaps = [...taps, now].slice(-20);
    setTaps(newTaps);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É
    const newGear = calculateGear(newTaps);
    setGear(newGear);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ø–ª–∏–≤–∞
    if (fuelLevel <= 0) {
      return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–ø –±–µ–∑ —Ç–æ–ø–ª–∏–≤–∞
    }
    
    // –¢—Ä–∞—Ç–∏–º —Ç–æ–ø–ª–∏–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ç–∞–ø–µ
    const fuelConsumption = isHyperdriveActive 
      ? FUEL_MECHANICS.CONSUMPTION_PER_TAP * HYPERDRIVE_MECHANICS.FUEL_CONSUMPTION_MULTIPLIER
      : FUEL_MECHANICS.CONSUMPTION_PER_TAP;
    
    setFuelLevel(prev => Math.max(FUEL_MECHANICS.MIN_LEVEL, prev - fuelConsumption));
    
    // –õ–æ–≥–∏–∫–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—è
    if (isHyperdriveActive) {
      // –ü—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª–µ - —Ç—Ä–∞—Ç–∏–º –∑–∞—Ä—è–¥ –æ—Ç —Ç–∞–ø–∞
      setHyperdriveCharge(prev => {
        const newCharge = Math.max(HYPERDRIVE_MECHANICS.MIN_CHARGE, 
          prev - HYPERDRIVE_MECHANICS.CONSUMPTION_PER_TAP);
        
        // ‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∞–µ–º –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ü–û–õ–ù–û–ú –†–ê–ó–†–Ø–î–ï (0%)
        if (newCharge <= HYPERDRIVE_MECHANICS.MIN_CHARGE) {
          setIsHyperdriveActive(false);
          console.log('üîã –ì–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω - –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑—Ä—è–∂–µ–Ω –ø—Ä–∏ —Ç–∞–ø–µ');
        }
        
        return newCharge;
      });
    } else {
      // –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª–µ - –∑–∞—Ä—è–∂–∞–µ–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä
      setHyperdriveCharge(prev => 
        Math.min(HYPERDRIVE_MECHANICS.MAX_CHARGE, prev + HYPERDRIVE_MECHANICS.CHARGE_RATE)
      );
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    const baseReward = config.baseTokensPerTap;
    const gearMultiplier = GAME_MECHANICS.GEAR.MULTIPLIERS[newGear] || 1;
    const engineBonus = 1 + (currentEngine.power / 100);
    const gearboxBonus = 1 + (currentGearbox.gear / 10);
    const gridEfficiency = currentPowerGrid.efficiency / 100;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—è
    const hyperdriveBonus = isHyperdriveActive ? currentHyperdrive.speedMultiplier : 1;
    
    const reward = baseReward * gearMultiplier * engineBonus * gearboxBonus * gridEfficiency * hyperdriveBonus;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
    await addTokens(reward);
    
  }, [taps, calculateGear, fuelLevel, isHyperdriveActive, currentEngine, currentGearbox, currentPowerGrid, currentHyperdrive, addTokens]);

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ)
  const activateHyperdrive = useCallback(() => {
    // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è, –µ—Å–ª–∏ –∑–∞—Ä—è–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –∏ –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    if (!isHyperdriveActive && hyperdriveCharge >= currentHyperdrive.activationThreshold) {
      setIsHyperdriveActive(true);
      console.log('‚ö° –ì–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ó–∞—Ä—è–¥:', hyperdriveCharge.toFixed(1) + '%');
    }
    // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
  }, [isHyperdriveActive, hyperdriveCharge, currentHyperdrive.activationThreshold]);

  // –ú–µ—Ö–∞–Ω–∏–∫–∞ —Ç–æ–ø–ª–∏–≤–∞ –∏ –∑–∞—Ä—è–¥–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞
  useEffect(() => {
    const interval = setInterval(() => {
      const now = Date.now();
      const timeSinceLastTap = now - lastTapTime;
      const isInactive = timeSinceLastTap >= FUEL_MECHANICS.INACTIVITY_THRESHOLD;
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
      if (isInactive) {
        setFuelLevel(prev => Math.min(FUEL_MECHANICS.MAX_LEVEL, prev + FUEL_MECHANICS.RECOVERY_RATE));
      }
      
      // –ë–∞–∑–æ–≤–∞—è —Ä–∞–∑—Ä—è–¥–∫–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∞–ø–æ–≤)
      if (isHyperdriveActive) {
        setHyperdriveCharge(prev => {
          const newCharge = Math.max(HYPERDRIVE_MECHANICS.MIN_CHARGE, 
            prev - HYPERDRIVE_MECHANICS.BASE_CONSUMPTION_RATE);
          
          // ‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∞–µ–º –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ü–û–õ–ù–û–ú –†–ê–ó–†–Ø–î–ï (0%)
          if (newCharge <= HYPERDRIVE_MECHANICS.MIN_CHARGE) {
            setIsHyperdriveActive(false);
            console.log('üîã –ì–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω - –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑—Ä—è–∂–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
          }
          
          return newCharge;
        });
      }
    }, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

    return () => clearInterval(interval);
  }, [lastTapTime, isHyperdriveActive]); // ‚ö° –£–ë–†–ê–õ–ò –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç activationThreshold

  return {
    fuelLevel,
    hyperdriveCharge,
    isHyperdriveActive,
    gear,
    handleTap,
    activateHyperdrive,
    currentHyperdrive, // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–∏–ø–µ—Ä–¥–≤–∏–≥–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∑–∞—Ä—è–¥–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞
    getHyperdriveChargeColor: (charge: number) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä–æ–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      if (charge >= currentHyperdrive.activationThreshold) return 'rgb(0, 255, 136)'; // –ì–æ—Ç–æ–≤ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - –∑–µ–ª–µ–Ω—ã–π
      if (charge >= 75) return 'rgb(150, 255, 136)';
      if (charge >= 50) return 'rgb(255, 255, 0)';
      if (charge >= 25) return 'rgb(255, 165, 0)';
      return 'rgb(255, 0, 0)'; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä—è–¥ - –∫—Ä–∞—Å–Ω—ã–π
    }
  };
};
