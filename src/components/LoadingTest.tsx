import React, { useState, useEffect } from 'react';

export const LoadingTest: React.FC = () => {
  const [testResults, setTestResults] = useState<string[]>([]);
  const [isComplete, setIsComplete] = useState(false);

  useEffect(() => {
    const runLoadingTests = async () => {
      const results: string[] = [];
      
      try {
        results.push('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Vite dev server
        results.push('üîç –¢–µ—Å—Ç 1: Vite dev server...');
        try {
          const response = await fetch('/');
          if (response.ok) {
            results.push('‚úÖ Vite dev server —Ä–∞–±–æ—Ç–∞–µ—Ç');
          } else {
            results.push(`‚ùå Vite dev server –æ—à–∏–±–∫–∞: ${response.status}`);
          }
        } catch (err) {
          results.push(`‚ùå Vite dev server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err}`);
        }
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
        results.push('üîç –¢–µ—Å—Ç 2: JavaScript –º–æ–¥—É–ª–∏...');
        try {
          const moduleResponse = await fetch('/src/main.tsx');
          if (moduleResponse.ok) {
            const contentType = moduleResponse.headers.get('content-type');
            if (contentType && contentType.includes('javascript')) {
              results.push('‚úÖ JavaScript –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
              results.push(`‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME —Ç–∏–ø: ${contentType}`);
            }
          } else {
            results.push(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: ${moduleResponse.status}`);
          }
        } catch (err) {
          results.push(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: ${err}`);
        }
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        results.push('üîç –¢–µ—Å—Ç 3: API —Å–µ—Ä–≤–µ—Ä...');
        try {
          const apiResponse = await fetch('/api/health');
          if (apiResponse.ok) {
            const data = await apiResponse.json();
            results.push(`‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data.status}`);
          } else {
            results.push(`‚ùå API —Å–µ—Ä–≤–µ—Ä –æ—à–∏–±–∫–∞: ${apiResponse.status}`);
          }
        } catch (err) {
          results.push(`‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err}`);
        }
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ React
        results.push('üîç –¢–µ—Å—Ç 4: React...');
        results.push(`‚úÖ React –≤–µ—Ä—Å–∏—è: ${React.version}`);
        
        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        results.push('üîç –¢–µ—Å—Ç 5: –ë—Ä–∞—É–∑–µ—Ä...');
        results.push(`‚úÖ User Agent: ${navigator.userAgent.substring(0, 50)}...`);
        results.push(`‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${navigator.platform}`);
        
        // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport
        results.push('üîç –¢–µ—Å—Ç 6: Viewport...');
        results.push(`‚úÖ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: ${window.innerWidth}x${window.innerHeight}`);
        results.push(`‚úÖ –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ${screen.width}x${screen.height}`);
        
        // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage
        results.push('üîç –¢–µ—Å—Ç 7: LocalStorage...');
        try {
          localStorage.setItem('test', 'test');
          localStorage.removeItem('test');
          results.push('‚úÖ LocalStorage —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } catch (err) {
          results.push(`‚ùå LocalStorage –æ—à–∏–±–∫–∞: ${err}`);
        }
        
        // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp
        results.push('üîç –¢–µ—Å—Ç 8: Telegram WebApp...');
        if (window.Telegram?.WebApp) {
          results.push('‚úÖ Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω');
          const user = window.Telegram?.WebApp?.initDataUnsafe?.user;
          if (user) {
            results.push(`‚úÖ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name || 'Unknown'}`);
          } else {
            results.push('‚ö†Ô∏è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
          }
        } else {
          results.push('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏)');
        }
        
        results.push('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
      } catch (err) {
        results.push(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${err}`);
      }
      
      setTestResults(results);
      setIsComplete(true);
    };
    
    runLoadingTests();
  }, []);

  if (!isComplete) {
    return (
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.95)',
        color: '#fff',
        padding: '20px',
        fontSize: '14px',
        zIndex: 10000,
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
      }}>
        <div style={{ fontWeight: 'bold', marginBottom: '20px', fontSize: '18px' }}>
          üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...
        </div>
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-yellow-500"></div>
        <div style={{ marginTop: '20px', textAlign: 'center' }}>
          <div>–ü—Ä–æ–≤–µ—Ä–∫–∞ Vite dev server...</div>
          <div>–ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript –º–æ–¥—É–ª–µ–π...</div>
          <div>–ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...</div>
        </div>
      </div>
    );
  }

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.95)',
      color: '#fff',
      padding: '20px',
      fontSize: '14px',
      zIndex: 10000,
      overflow: 'auto'
    }}>
      <div style={{ fontWeight: 'bold', marginBottom: '20px', fontSize: '18px' }}>
        üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
      </div>
      
      {testResults.map((result, index) => (
        <div key={index} style={{ 
          marginBottom: '8px',
          color: result.includes('‚ùå') ? '#ff4444' : 
                 result.includes('‚ö†Ô∏è') ? '#ffaa00' : 
                 result.includes('‚úÖ') ? '#00ff88' : '#ffffff'
        }}>
          {result}
        </div>
      ))}
      
      <div style={{ marginTop: '20px', display: 'flex', gap: '10px' }}>
        <button 
          onClick={() => window.location.reload()} 
          style={{
            padding: '10px 20px',
            backgroundColor: '#0066cc',
            color: '#fff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        </button>
        
        <button 
          onClick={() => {
            const element = document.getElementById('loading-test');
            if (element) element.remove();
          }} 
          style={{
            padding: '10px 20px',
            backgroundColor: '#666',
            color: '#fff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          –°–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç
        </button>
      </div>
    </div>
  );
}; 