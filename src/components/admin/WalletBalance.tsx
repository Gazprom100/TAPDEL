import React, { useState, useEffect } from 'react';

interface WalletBalance {
  symbol: string;
  name: string;
  address: string;
  balance: number;
  decimals: number;
  lastUpdated: string;
  status: 'live' | 'error' | 'active';
  error?: string;
}

interface WalletBalanceData {
  balances: WalletBalance[];
  totalBalanceUSD: number;
  lastUpdated: string;
  walletAddress?: string;
  walletType?: string;
  network?: string;
  status?: string;
}

export const WalletBalance: React.FC = () => {
  const [walletData, setWalletData] = useState<WalletBalanceData>({
    balances: [],
    totalBalanceUSD: 0,
    lastUpdated: ''
  });
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
  const loadWalletBalance = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/admin/wallet-balance');
      const data = await response.json();
      
      if (data.success) {
        setWalletData(data);
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: ' + data.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
  const refreshWalletBalance = async () => {
    try {
      setRefreshing(true);
      setError(null);
      
      const response = await fetch('/api/admin/wallet-balance/refresh', {
        method: 'POST'
      });
      const data = await response.json();
      
      if (data.success) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await loadWalletBalance();
      } else {
        setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ' + data.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:', error);
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞');
    } finally {
      setRefreshing(false);
    }
  };

  useEffect(() => {
    loadWalletBalance();
  }, []);

  const formatBalance = (balance: number, decimals: number) => {
    if (balance === undefined || balance === null || isNaN(balance)) {
      return '0.00';
    }
    // –ë–∞–ª–∞–Ω—Å —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (backend —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª decimals)
    return balance.toFixed(2);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'live': return 'text-green-400';
      case 'active': return 'text-green-400';
      case 'error': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'live': return 'üîó';
      case 'active': return '‚úÖ';
      case 'error': return '‚ùå';
      default: return '‚ö†Ô∏è';
    }
  };

  if (loading) {
    return (
      <div className="text-center py-8 px-4">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
        <div className="mt-4 text-gray-400 font-medium">–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞...</div>
      </div>
    );
  }

  return (
    <div className="admin-scrollable space-y-4 sm:space-y-6 p-4 sm:p-6 overflow-x-auto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div className="flex-1 min-w-0">
          <h2 className="text-xl sm:text-2xl lg:text-3xl font-bold text-white leading-tight">
            –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
          </h2>
          <p className="text-sm sm:text-base text-gray-400 mt-1 font-medium">
            –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤—Å–µ–º —Ç–æ–∫–µ–Ω–∞–º (–ù–ê–ü–†–Ø–ú–£–Æ –ò–ó –ë–õ–û–ö–ß–ï–ô–ù–ê)
          </p>
        </div>
        <div className="flex flex-col sm:flex-row gap-2 sm:gap-4">
          <button
            onClick={loadWalletBalance}
            className="admin-button px-3 sm:px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white font-medium text-sm sm:text-base transition-colors duration-200"
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
          <button
            onClick={refreshWalletBalance}
            disabled={refreshing}
            className="admin-button px-3 sm:px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 rounded-lg text-white font-medium text-sm sm:text-base transition-colors duration-200"
          >
            {refreshing ? 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å –±–ª–æ–∫—á–µ–π–Ω–∞'}
          </button>
        </div>
      </div>

      {error && (
        <div className="bg-red-900/50 border border-red-500 rounded-lg p-4">
          <p className="text-red-400 font-medium">{error}</p>
        </div>
      )}

      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
        <div className="bg-gray-800 rounded-lg p-4 sm:p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div className="flex-1 min-w-0">
              <p className="text-xs sm:text-sm font-medium text-gray-400 mb-1">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</p>
              <p className="text-lg sm:text-xl lg:text-2xl font-bold text-white leading-tight">
                ${(walletData.totalBalanceUSD || 0).toFixed(2)}
              </p>
            </div>
            <div className="w-10 h-10 sm:w-12 sm:h-12 bg-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
              <span className="text-white text-lg sm:text-xl">üí∞</span>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-4 sm:p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div className="flex-1 min-w-0">
              <p className="text-xs sm:text-sm font-medium text-gray-400 mb-1">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</p>
              <p className="text-lg sm:text-xl lg:text-2xl font-bold text-white leading-tight">
                {walletData.balances.filter(b => b.status === 'active').length}
              </p>
            </div>
            <div className="w-10 h-10 sm:w-12 sm:h-12 bg-green-600 rounded-lg flex items-center justify-center flex-shrink-0">
              <span className="text-white text-lg sm:text-xl">üéØ</span>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-4 sm:p-6 border border-gray-700 sm:col-span-2 lg:col-span-1">
          <div className="flex items-center justify-between">
            <div className="flex-1 min-w-0">
              <p className="text-xs sm:text-sm font-medium text-gray-400 mb-1">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</p>
              <p className="text-sm sm:text-base lg:text-lg font-bold text-white leading-tight">
                {walletData.lastUpdated ? formatDate(walletData.lastUpdated) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
              </p>
            </div>
            <div className="w-10 h-10 sm:w-12 sm:h-12 bg-yellow-600 rounded-lg flex items-center justify-center flex-shrink-0">
              <span className="text-white text-lg sm:text-xl">‚è∞</span>
            </div>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω–∞–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–æ–º */}
      <div className="bg-gray-800 rounded-lg p-4 sm:p-6 border border-gray-700">
        <h3 className="text-base sm:text-lg lg:text-xl font-semibold text-white mb-4">–ë–∞–ª–∞–Ω—Å—ã –ø–æ —Ç–æ–∫–µ–Ω–∞–º</h3>
        
        {walletData.balances.length === 0 ? (
          <div className="text-gray-400 text-center py-8 font-medium">
            –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–∞—Ö
          </div>
        ) : (
          <div className="space-y-3 sm:space-y-4 overflow-x-auto">
            {walletData.balances.map((balance) => (
              <div
                key={balance.symbol}
                className={`flex flex-col sm:flex-row sm:items-center sm:justify-between p-3 sm:p-4 rounded-lg border min-w-0 ${
                  balance.status === 'active' 
                    ? 'bg-gray-700 border-gray-600' 
                    : 'bg-red-900/20 border-red-600'
                }`}
              >
                <div className="flex-1 min-w-0 mb-3 sm:mb-0">
                  <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3">
                    <div className={`text-base sm:text-lg font-bold ${
                      balance.status === 'active' ? 'text-white' : 'text-red-400'
                    }`}>
                      {balance.symbol}
                    </div>
                    <span className={`text-xs sm:text-sm ${getStatusColor(balance.status)} font-medium`}>
                      {getStatusIcon(balance.status)} {balance.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—à–∏–±–∫–∞'}
                    </span>
                  </div>
                  <div className="text-xs sm:text-sm text-gray-400 mt-1 font-medium">{balance.name}</div>
                  <div className="text-xs text-gray-500 font-mono mt-1 break-all">{balance.address}</div>
                </div>
                
                <div className="text-left sm:text-right min-w-0">
                  <div className="text-lg sm:text-xl font-bold text-white leading-tight">
                    {formatBalance(balance.balance, balance.decimals)} {balance.symbol}
                  </div>
                  <div className="text-xs sm:text-sm text-gray-400 font-medium">
                    –û–±–Ω–æ–≤–ª–µ–Ω–æ: {formatDate(balance.lastUpdated)}
                  </div>
                  {balance.error && (
                    <div className="text-xs text-red-400 mt-1 font-medium">
                      –û—à–∏–±–∫–∞: {balance.error}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é */}
      <div className="bg-gray-800 rounded-lg p-4 sm:p-6 border border-gray-700">
        <h3 className="text-base sm:text-lg lg:text-xl font-semibold text-white mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
          <div className="min-w-0">
            <span className="text-gray-400 font-medium">–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</span>
            <div className="text-white font-mono break-all mt-1 font-medium">
              {walletData.walletAddress || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
            </div>
          </div>
          <div className="min-w-0">
            <span className="text-gray-400 font-medium">–°–µ—Ç—å:</span>
            <div className="text-white mt-1 font-medium">{walletData.network || 'DecimalChain'}</div>
          </div>
          <div className="min-w-0">
            <span className="text-gray-400 font-medium">–¢–∏–ø –∫–æ—à–µ–ª—å–∫–∞:</span>
            <div className="text-white mt-1 font-medium">{walletData.walletType || '–†–∞–±–æ—á–∏–π (–¥–ª—è –≤—ã–≤–æ–¥–æ–≤)'}</div>
          </div>
          <div className="min-w-0">
            <span className="text-gray-400 font-medium">–°—Ç–∞—Ç—É—Å:</span>
            <div className="text-green-400 mt-1 font-medium">{walletData.status || '–ê–∫—Ç–∏–≤–µ–Ω'}</div>
          </div>
        </div>
      </div>
    </div>
  );
}; 