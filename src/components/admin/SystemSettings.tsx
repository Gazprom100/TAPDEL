import React, { useState, useEffect } from 'react';

interface ApiEndpoint {
  name: string;
  url: string;
  status: 'active' | 'inactive' | 'error';
  lastCheck: string;
  responseTime: number;
  description: string;
}

interface SecuritySettings {
  rateLimiting: {
    enabled: boolean;
    requestsPerMinute: number;
    burstLimit: number;
  };
  cors: {
    enabled: boolean;
    allowedOrigins: string[];
    allowedMethods: string[];
  };
  ipWhitelist: {
    enabled: boolean;
    ips: string[];
  };
  sessionTimeout: number;
  maxLoginAttempts: number;
}

interface EnvironmentVariable {
  key: string;
  value: string;
  description: string;
  isSecret: boolean;
  isRequired: boolean;
}

interface DeploymentInfo {
  version: string;
  buildDate: string;
  commitHash: string;
  environment: 'production' | 'staging' | 'development';
  lastDeploy: string;
  status: 'running' | 'deploying' | 'error';
}

export const SystemSettings: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'api' | 'security' | 'environment' | 'deployment'>('api');
  const [saving, setSaving] = useState(false);

  const [apiEndpoints, setApiEndpoints] = useState<ApiEndpoint[]>([
    {
      name: 'DecimalChain API',
      url: 'https://api.decimalchain.com',
      status: 'active',
      lastCheck: new Date().toISOString(),
      responseTime: 120,
      description: '–û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º'
    },
    {
      name: 'MongoDB',
      url: 'mongodb://localhost:27017',
      status: 'active',
      lastCheck: new Date().toISOString(),
      responseTime: 15,
      description: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    },
    {
      name: 'Redis Cache',
      url: 'redis://localhost:6379',
      status: 'active',
      lastCheck: new Date().toISOString(),
      responseTime: 5,
      description: '–ö—ç—à-—Å–µ—Ä–≤–µ—Ä'
    },
    {
      name: 'Telegram Bot API',
      url: 'https://api.telegram.org',
      status: 'active',
      lastCheck: new Date().toISOString(),
      responseTime: 25,
      description: 'API Telegram –±–æ—Ç–∞'
    }
  ]);

  const [securitySettings, setSecuritySettings] = useState<SecuritySettings>({
    rateLimiting: {
      enabled: true,
      requestsPerMinute: 100,
      burstLimit: 200
    },
    cors: {
      enabled: true,
      allowedOrigins: ['https://tapdel.com', 'https://www.tapdel.com'],
      allowedMethods: ['GET', 'POST', 'PUT', 'DELETE']
    },
    ipWhitelist: {
      enabled: false,
      ips: []
    },
    sessionTimeout: 3600,
    maxLoginAttempts: 5
  });

  const [environmentVariables, setEnvironmentVariables] = useState<EnvironmentVariable[]>([
    {
      key: 'MONGODB_URI',
      value: 'mongodb://localhost:27017/tapdel',
      description: 'URI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB',
      isSecret: false,
      isRequired: true
    },
    {
      key: 'REDIS_URL',
      value: 'redis://localhost:6379',
      description: 'URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis',
      isSecret: false,
      isRequired: true
    },
    {
      key: 'TELEGRAM_BOT_TOKEN',
      value: '********',
      description: '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
      isSecret: true,
      isRequired: true
    },
    {
      key: 'DECIMAL_API_KEY',
      value: '********',
      description: 'API –∫–ª—é—á DecimalChain',
      isSecret: true,
      isRequired: true
    },
    {
      key: 'JWT_SECRET',
      value: '********',
      description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT',
      isSecret: true,
      isRequired: true
    },
    {
      key: 'NODE_ENV',
      value: 'production',
      description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      isSecret: false,
      isRequired: true
    }
  ]);

  const [deploymentInfo, setDeploymentInfo] = useState<DeploymentInfo>({
    version: '1.2.3',
    buildDate: '2024-01-20T10:30:00Z',
    commitHash: 'a079532',
    environment: 'production',
    lastDeploy: '2024-01-20T10:30:00Z',
    status: 'running'
  });

  const handleSaveSettings = async (type: string) => {
    setSaving(true);
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${type}:`, { apiEndpoints, securitySettings, environmentVariables });
      await new Promise(resolve => setTimeout(resolve, 1000)); // –ò–º–∏—Ç–∞—Ü–∏—è API
      alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    } finally {
      setSaving(false);
    }
  };

  const handleTestEndpoint = async (endpoint: ApiEndpoint) => {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ—Å—Ç API endpoint
      console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint:', endpoint.name);
      alert(`–¢–µ—Å—Ç ${endpoint.name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint');
    }
  };

  const handleDeploy = async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π?')) return;
    
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
      console.log('–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è...');
      setDeploymentInfo(prev => ({ ...prev, status: 'deploying' }));
      await new Promise(resolve => setTimeout(resolve, 3000)); // –ò–º–∏—Ç–∞—Ü–∏—è –¥–µ–ø–ª–æ—è
      setDeploymentInfo(prev => ({ ...prev, status: 'running' }));
      alert('–î–µ–ø–ª–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error);
      setDeploymentInfo(prev => ({ ...prev, status: 'error' }));
      alert('–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è');
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-600';
      case 'inactive': return 'bg-gray-600';
      case 'error': return 'bg-red-600';
      case 'running': return 'bg-green-600';
      case 'deploying': return 'bg-yellow-600';
      default: return 'bg-gray-600';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return '–ê–∫—Ç–∏–≤–µ–Ω';
      case 'inactive': return '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      case 'error': return '–û—à–∏–±–∫–∞';
      case 'running': return '–†–∞–±–æ—Ç–∞–µ—Ç';
      case 'deploying': return '–î–µ–ø–ª–æ–π';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  return (
    <div className="admin-scrollable space-y-6">
      <h2 className="text-2xl font-bold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h2>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º */}
      <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
        <div className="flex space-x-4 overflow-x-auto">
          <button
            onClick={() => setActiveTab('api')}
            className={`admin-nav-item px-4 py-2 rounded-lg text-sm whitespace-nowrap ${
              activeTab === 'api' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            üîó API Endpoints
          </button>
          <button
            onClick={() => setActiveTab('security')}
            className={`admin-nav-item px-4 py-2 rounded-lg text-sm whitespace-nowrap ${
              activeTab === 'security' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
          </button>
          <button
            onClick={() => setActiveTab('environment')}
            className={`admin-nav-item px-4 py-2 rounded-lg text-sm whitespace-nowrap ${
              activeTab === 'environment' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            ‚öôÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          </button>
          <button
            onClick={() => setActiveTab('deployment')}
            className={`admin-nav-item px-4 py-2 rounded-lg text-sm whitespace-nowrap ${
              activeTab === 'deployment' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            üöÄ Deployment
          </button>
        </div>
      </div>

      {/* API Endpoints */}
      {activeTab === 'api' && (
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-white">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Endpoints</h3>
            <button
              onClick={() => handleSaveSettings('api')}
              disabled={saving}
              className="admin-button px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 rounded-lg text-sm"
            >
              {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {apiEndpoints.map((endpoint, index) => (
              <div key={index} className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold text-white">{endpoint.name}</h4>
                  <div className="flex items-center space-x-2">
                    <div className={`w-3 h-3 rounded-full ${getStatusColor(endpoint.status)}`}></div>
                    <span className="text-sm text-gray-400">{getStatusText(endpoint.status)}</span>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">URL</label>
                    <input
                      type="text"
                      value={endpoint.url}
                      onChange={(e) => {
                        const newEndpoints = [...apiEndpoints];
                        newEndpoints[index].url = e.target.value;
                        setApiEndpoints(newEndpoints);
                      }}
                      className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <input
                      type="text"
                      value={endpoint.description}
                      onChange={(e) => {
                        const newEndpoints = [...apiEndpoints];
                        newEndpoints[index].description = e.target.value;
                        setApiEndpoints(newEndpoints);
                      }}
                      className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <div className="text-sm text-gray-400">
                      –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {endpoint.responseTime}ms
                    </div>
                    <button
                      onClick={() => handleTestEndpoint(endpoint)}
                      className="admin-button px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-sm"
                    >
                      üß™ –¢–µ—Å—Ç
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
      {activeTab === 'security' && (
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-white">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
            <button
              onClick={() => handleSaveSettings('security')}
              disabled={saving}
              className="admin-button px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 rounded-lg text-sm"
            >
              {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Rate Limiting */}
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="text-lg font-semibold text-white mb-4">Rate Limiting</h4>
              <div className="space-y-4">
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={securitySettings.rateLimiting.enabled}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      rateLimiting: { ...prev.rateLimiting, enabled: e.target.checked }
                    }))}
                    className="admin-input rounded border-gray-600 bg-gray-700"
                  />
                  <label className="text-sm font-medium text-gray-300">–í–∫–ª—é—á–∏—Ç—å rate limiting</label>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É</label>
                  <input
                    type="number"
                    value={securitySettings.rateLimiting.requestsPerMinute}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      rateLimiting: { ...prev.rateLimiting, requestsPerMinute: Number(e.target.value) }
                    }))}
                    className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">–õ–∏–º–∏—Ç burst</label>
                  <input
                    type="number"
                    value={securitySettings.rateLimiting.burstLimit}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      rateLimiting: { ...prev.rateLimiting, burstLimit: Number(e.target.value) }
                    }))}
                    className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            {/* CORS */}
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="text-lg font-semibold text-white mb-4">CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
              <div className="space-y-4">
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={securitySettings.cors.enabled}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      cors: { ...prev.cors, enabled: e.target.checked }
                    }))}
                    className="admin-input rounded border-gray-600 bg-gray-700"
                  />
                  <label className="text-sm font-medium text-gray-300">–í–∫–ª—é—á–∏—Ç—å CORS</label>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã</label>
                  <textarea
                    value={securitySettings.cors.allowedOrigins.join('\n')}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      cors: { ...prev.cors, allowedOrigins: e.target.value.split('\n').filter(Boolean) }
                    }))}
                    className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    rows={3}
                    placeholder="https://example.com"
                  />
                </div>
              </div>
            </div>

            {/* IP Whitelist */}
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="text-lg font-semibold text-white mb-4">IP Whitelist</h4>
              <div className="space-y-4">
                <div className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={securitySettings.ipWhitelist.enabled}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      ipWhitelist: { ...prev.ipWhitelist, enabled: e.target.checked }
                    }))}
                    className="admin-input rounded border-gray-600 bg-gray-700"
                  />
                  <label className="text-sm font-medium text-gray-300">–í–∫–ª—é—á–∏—Ç—å IP whitelist</label>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP</label>
                  <textarea
                    value={securitySettings.ipWhitelist.ips.join('\n')}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      ipWhitelist: { ...prev.ipWhitelist, ips: e.target.value.split('\n').filter(Boolean) }
                    }))}
                    className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    rows={3}
                    placeholder="192.168.1.1"
                  />
                </div>
              </div>
            </div>

            {/* Session Settings */}
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="text-lg font-semibold text-white mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π</h4>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">–¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ (—Å–µ–∫)</label>
                  <input
                    type="number"
                    value={securitySettings.sessionTimeout}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      sessionTimeout: Number(e.target.value)
                    }))}
                    className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞</label>
                  <input
                    type="number"
                    value={securitySettings.maxLoginAttempts}
                    onChange={(e) => setSecuritySettings(prev => ({
                      ...prev,
                      maxLoginAttempts: Number(e.target.value)
                    }))}
                    className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è */}
      {activeTab === 'environment' && (
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-white">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è</h3>
            <button
              onClick={() => handleSaveSettings('environment')}
              disabled={saving}
              className="admin-button px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 rounded-lg text-sm"
            >
              {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </button>
          </div>

          <div className="bg-gray-800 rounded-lg border border-gray-700 overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-700">
                  <tr>
                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-300">–ö–ª—é—á</th>
                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-300">–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-300">–û–ø–∏—Å–∞–Ω–∏–µ</th>
                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-300">–¢–∏–ø</th>
                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-300">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-700">
                  {environmentVariables.map((env, index) => (
                    <tr key={index} className="hover:bg-gray-700">
                      <td className="px-4 py-3">
                        <div className="font-medium text-white">{env.key}</div>
                      </td>
                      <td className="px-4 py-3">
                        <input
                          type={env.isSecret ? 'password' : 'text'}
                          value={env.value}
                          onChange={(e) => {
                            const newEnvVars = [...environmentVariables];
                            newEnvVars[index].value = e.target.value;
                            setEnvironmentVariables(newEnvVars);
                          }}
                          className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </td>
                      <td className="px-4 py-3">
                        <input
                          type="text"
                          value={env.description}
                          onChange={(e) => {
                            const newEnvVars = [...environmentVariables];
                            newEnvVars[index].description = e.target.value;
                            setEnvironmentVariables(newEnvVars);
                          }}
                          className="admin-input w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                      </td>
                      <td className="px-4 py-3">
                        <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                          env.isSecret ? 'bg-red-600' : 'bg-green-600'
                        }`}>
                          {env.isSecret ? '–°–µ–∫—Ä–µ—Ç–Ω–∞—è' : '–ü—É–±–ª–∏—á–Ω–∞—è'}
                        </span>
                      </td>
                      <td className="px-4 py-3">
                        <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                          env.isRequired ? 'bg-yellow-600' : 'bg-gray-600'
                        }`}>
                          {env.isRequired ? '–î–∞' : '–ù–µ—Ç'}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      )}

      {/* Deployment */}
      {activeTab === 'deployment' && (
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-white">Deployment —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
            <button
              onClick={handleDeploy}
              disabled={deploymentInfo.status === 'deploying'}
              className="admin-button px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 rounded-lg text-sm"
            >
              {deploymentInfo.status === 'deploying' ? 'üöÄ –î–µ–ø–ª–æ–π...' : 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π'}
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="text-lg font-semibold text-white mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏</h4>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-sm text-gray-400">–í–µ—Ä—Å–∏—è</span>
                  <span className="text-sm text-white font-medium">{deploymentInfo.version}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-gray-400">–ö–æ–º–º–∏—Ç</span>
                  <span className="text-sm text-white font-medium">{deploymentInfo.commitHash}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-gray-400">–û–∫—Ä—É–∂–µ–Ω–∏–µ</span>
                  <span className="text-sm text-white font-medium capitalize">{deploymentInfo.environment}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-gray-400">–°—Ç–∞—Ç—É—Å</span>
                  <div className="flex items-center space-x-2">
                    <div className={`w-3 h-3 rounded-full ${getStatusColor(deploymentInfo.status)}`}></div>
                    <span className="text-sm text-gray-400">{getStatusText(deploymentInfo.status)}</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <h4 className="text-lg font-semibold text-white mb-4">–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏</h4>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-sm text-gray-400">–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏</span>
                  <span className="text-sm text-white font-medium">
                    {new Date(deploymentInfo.buildDate).toLocaleString('ru-RU')}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-gray-400">–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π</span>
                  <span className="text-sm text-white font-medium">
                    {new Date(deploymentInfo.lastDeploy).toLocaleString('ru-RU')}
                  </span>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <h4 className="text-lg font-semibold text-white mb-4">–ò—Å—Ç–æ—Ä–∏—è –¥–µ–ø–ª–æ–µ–≤</h4>
            <div className="space-y-2">
              <div className="flex items-center justify-between p-3 bg-gray-700 rounded">
                <div>
                  <div className="font-medium text-white">v1.2.3</div>
                  <div className="text-sm text-gray-400">a079532 ‚Ä¢ 2024-01-20 10:30</div>
                </div>
                <span className="text-sm text-green-400">‚úÖ –£—Å–ø–µ—à–Ω–æ</span>
              </div>
              <div className="flex items-center justify-between p-3 bg-gray-700 rounded">
                <div>
                  <div className="font-medium text-white">v1.2.2</div>
                  <div className="text-sm text-gray-400">f79ca6b ‚Ä¢ 2024-01-19 15:45</div>
                </div>
                <span className="text-sm text-green-400">‚úÖ –£—Å–ø–µ—à–Ω–æ</span>
              </div>
              <div className="flex items-center justify-between p-3 bg-gray-700 rounded">
                <div>
                  <div className="font-medium text-white">v1.2.1</div>
                  <div className="text-sm text-gray-400">391a6ce ‚Ä¢ 2024-01-18 12:20</div>
                </div>
                <span className="text-sm text-red-400">‚ùå –û—à–∏–±–∫–∞</span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}; 