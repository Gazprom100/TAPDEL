import React, { useState, useEffect } from 'react';
import { adminApiService, SystemMetrics, BlockchainStatus, ServiceStatus } from '../../services/adminApi';

interface LogEntry {
  timestamp: string;
  level: 'info' | 'warning' | 'error' | 'debug';
  message: string;
  service: string;
}

export const SystemMonitoring: React.FC = () => {
  const [metrics, setMetrics] = useState<SystemMetrics>({
    cpu: 0,
    memory: 0,
    disk: 0,
    network: { in: 0, out: 0 },
    uptime: 0,
    activeConnections: 0
  });

  const [blockchain, setBlockchain] = useState<BlockchainStatus>({
    lastBlock: 0,
    blockTime: 0,
    confirmations: 0,
    networkHashrate: 0,
    isConnected: false
  });

  const [services, setServices] = useState<ServiceStatus[]>([]);
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã
  const loadSystemData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [metricsData, blockchainData, servicesData, logsData] = await Promise.all([
        adminApiService.getSystemMetrics(),
        adminApiService.getBlockchainStatus(),
        adminApiService.getServicesStatus(),
        adminApiService.getSystemLogs(50)
      ]);
      
      setMetrics(metricsData);
      setBlockchain(blockchainData);
      setServices(servicesData);
      setLogs(logsData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã');
    } finally {
      setLoading(false);
    }
  };

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    loadSystemData();
    
    const interval = setInterval(loadSystemData, 30000);
    return () => clearInterval(interval);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'online': return 'bg-green-500';
      case 'warning': return 'bg-yellow-500';
      case 'offline': return 'bg-red-500';
      default: return 'bg-gray-500';
    }
  };

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'error': return 'text-red-400';
      case 'warning': return 'text-yellow-400';
      case 'info': return 'text-blue-400';
      case 'debug': return 'text-gray-400';
      default: return 'text-gray-400';
    }
  };

  const formatUptime = (seconds: number) => {
    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (days > 0) return `${days}–¥ ${hours}—á ${minutes}–º`;
    if (hours > 0) return `${hours}—á ${minutes}–º`;
    return `${minutes}–º`;
  };

  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
          <div className="mt-4 text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="text-center py-8">
          <div className="text-red-500 text-lg mb-2">–û—à–∏–±–∫–∞</div>
          <div className="text-gray-400">{error}</div>
          <button 
            onClick={loadSystemData}
            className="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-scrollable space-y-6">
      <div className="flex items-center justify-between">
      <h2 className="text-2xl font-bold">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</h2>
        <button
          onClick={loadSystemData}
          className="admin-button px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white"
        >
          –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {/* –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-400">CPU</p>
              <p className="text-2xl font-bold text-white">{metrics.cpu.toFixed(1)}%</p>
            </div>
            <div className="w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center">
              <span className="text-white text-xl">‚ö°</span>
            </div>
          </div>
          <div className="mt-4">
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${metrics.cpu}%` }}
              ></div>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-400">–ü–∞–º—è—Ç—å</p>
              <p className="text-2xl font-bold text-white">{metrics.memory.toFixed(1)}%</p>
            </div>
            <div className="w-12 h-12 bg-green-600 rounded-lg flex items-center justify-center">
              <span className="text-white text-xl">üß†</span>
            </div>
          </div>
          <div className="mt-4">
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="bg-green-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${metrics.memory}%` }}
              ></div>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-400">–î–∏—Å–∫</p>
              <p className="text-2xl font-bold text-white">{metrics.disk.toFixed(1)}%</p>
            </div>
            <div className="w-12 h-12 bg-purple-600 rounded-lg flex items-center justify-center">
              <span className="text-white text-xl">üíæ</span>
            </div>
          </div>
          <div className="mt-4">
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="bg-purple-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${metrics.disk}%` }}
              ></div>
            </div>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-400">–ê–ø—Ç–∞–π–º</p>
              <p className="text-2xl font-bold text-white">{formatUptime(metrics.uptime)}</p>
            </div>
            <div className="w-12 h-12 bg-yellow-600 rounded-lg flex items-center justify-center">
              <span className="text-white text-xl">‚è±Ô∏è</span>
            </div>
          </div>
          <div className="mt-2">
            <p className="text-sm text-gray-400">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {metrics.activeConnections}</p>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –±–ª–æ–∫—á–µ–π–Ω–∞ */}
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h3 className="text-lg font-semibold text-white mb-4">–°—Ç–∞—Ç—É—Å –±–ª–æ–∫—á–µ–π–Ω–∞</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-white">{blockchain.lastBlock.toLocaleString()}</div>
            <div className="text-sm text-gray-400">–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-white">{blockchain.blockTime.toFixed(1)}—Å</div>
            <div className="text-sm text-gray-400">–í—Ä–µ–º—è –±–ª–æ–∫–∞</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-white">{blockchain.confirmations}</div>
            <div className="text-sm text-gray-400">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-white">{formatBytes(blockchain.networkHashrate)}</div>
            <div className="text-sm text-gray-400">–•–µ—à—Ä–µ–π—Ç —Å–µ—Ç–∏</div>
          </div>
        </div>
        <div className="mt-4 flex items-center">
          <div className={`w-3 h-3 rounded-full mr-2 ${blockchain.isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
          <span className="text-sm text-gray-400">
            {blockchain.isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏' : '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ç–∏'}
          </span>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ */}
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h3 className="text-lg font-semibold text-white mb-4">–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤</h3>
        <div className="space-y-3">
          {services.map(service => (
            <div key={service.name} className="flex items-center justify-between p-3 bg-gray-700 rounded">
              <div className="flex items-center space-x-3">
                <div className={`w-3 h-3 rounded-full ${getStatusColor(service.status)}`}></div>
                <div>
                  <div className="font-medium text-white">{service.name}</div>
                  <div className="text-sm text-gray-400">
                    {service.responseTime}ms ‚Ä¢ {new Date(service.lastCheck).toLocaleTimeString()}
                  </div>
                  {service.error && (
                    <div className="text-xs text-red-400">{service.error}</div>
                  )}
                </div>
              </div>
              <div className="text-sm text-gray-400">
                {service.status === 'online' ? 'üü¢' : service.status === 'warning' ? 'üü°' : 'üî¥'}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã */}
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h3 className="text-lg font-semibold text-white mb-4">–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</h3>
        <div className="space-y-2 max-h-64 overflow-y-auto">
          {logs.map((log, index) => (
            <div key={index} className="flex items-start space-x-3 p-2 bg-gray-700 rounded">
              <div className={`text-xs font-mono ${getLevelColor(log.level)}`}>
                {log.level.toUpperCase()}
              </div>
              <div className="flex-1">
                <div className="text-sm text-white">{log.message}</div>
                <div className="text-xs text-gray-400">
                  {new Date(log.timestamp).toLocaleString()} ‚Ä¢ {log.service}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}; 