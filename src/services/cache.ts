type CacheEntry<T> = {
  data: T;
  timestamp: number;
};

export class CacheService {
  private static instance: CacheService;
  private cache: Map<string, CacheEntry<any>>;
  private readonly defaultTTL: number = 5 * 60 * 1000; // 5 minutes
  private readonly isProduction: boolean;

  private constructor() {
    this.cache = new Map();
    this.isProduction = import.meta.env.MODE === 'production';
    
    if (!this.isProduction) {
      this.startCleanupInterval();
      console.log('üîß CacheService: Memory –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (dev —Ä–µ–∂–∏–º)');
    } else {
      console.log('üöÄ CacheService: Memory –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ (production —Ä–µ–∂–∏–º)');
    }
  }

  public static getInstance(): CacheService {
    if (!CacheService.instance) {
      CacheService.instance = new CacheService();
    }
    return CacheService.instance;
  }

  private startCleanupInterval() {
    setInterval(() => {
      this.cleanup();
    }, 60 * 1000); // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  private cleanup() {
    const now = Date.now();
    for (const [key, entry] of this.cache.entries()) {
      if (now - entry.timestamp > this.defaultTTL) {
        this.cache.delete(key);
      }
    }
  }

  public set<T>(key: string, data: T, ttl: number = this.defaultTTL): void {
    // –í production —Ä–µ–∂–∏–º–µ –Ω–µ –∫–µ—à–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
    if (this.isProduction) {
      return;
    }
    
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ TTL
    setTimeout(() => {
      this.cache.delete(key);
    }, ttl);
  }

  public get<T>(key: string): T | null {
    // –í production —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null (–Ω–µ—Ç –∫–µ—à–∞)
    if (this.isProduction) {
      return null;
    }
    
    const entry = this.cache.get(key);
    if (!entry) return null;

    const now = Date.now();
    if (now - entry.timestamp > this.defaultTTL) {
      this.cache.delete(key);
      return null;
    }

    return entry.data as T;
  }

  public delete(key: string): void {
    if (!this.isProduction) {
      this.cache.delete(key);
    }
  }

  public clear(): void {
    if (!this.isProduction) {
      this.cache.clear();
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  public setLeaderboard(data: any[]): void {
    this.set('leaderboard', data, 30 * 1000); // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
  }

  public getLeaderboard(): any[] | null {
    return this.get('leaderboard');
  }

  public setUserProfile(userId: string, data: any): void {
    this.set(`user:${userId}`, data, 60 * 1000); // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
  }

  public getUserProfile(userId: string): any | null {
    return this.get(`user:${userId}`);
  }

  public setGameState(userId: string, data: any): void {
    this.set(`gameState:${userId}`, data, 10 * 1000); // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  }

  public getGameState(userId: string): any | null {
    return this.get(`gameState:${userId}`);
  }
} 