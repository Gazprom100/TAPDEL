#!/usr/bin/env node

require('dotenv').config({ path: './backend/.env' });

const { MongoClient } = require('mongodb');
const { performance } = require('perf_hooks');

const MONGODB_URI = process.env.MONGODB_URI || 
  'mongodb+srv://TAPDEL:fpz%25sE62KPzmHfM@cluster0.ejo8obw.mongodb.net/tapdel?retryWrites=true&w=majority&appName=Cluster0';

async function testOptimizations() {
  console.log('üß™ –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô TAPDEL');
  console.log('=====================================');
  console.log('üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ 2000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n');

  let client;

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    console.log('üìä 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MONGODB');
    console.log('===========================');

    const start = performance.now();

    client = new MongoClient(MONGODB_URI, {
      maxPoolSize: 50,
      minPoolSize: 5,
      maxIdleTimeMS: 30000,
      serverSelectionTimeoutMS: 5000,
      retryWrites: true,
      writeConcern: { w: 'majority', j: true }
    });

    await client.connect();
    const db = client.db('tapdel');
    
    const connectTime = performance.now() - start;
    console.log(`‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω: ${connectTime.toFixed(2)}ms`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    const users = db.collection('users');
    const indexes = await users.indexes();
    console.log(`üìö –ò–Ω–¥–µ–∫—Å–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users: ${indexes.length}`);

    // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π...');
    
    const testCount = 100;
    const operations = [];
    
    const opStart = performance.now();
    
    for (let i = 0; i < testCount; i++) {
      operations.push(
        users.updateOne(
          { userId: `perf-test-${i}` },
          { 
            $inc: { 'gameState.tokens': 1 },
            $set: { 'gameState.lastSaved': new Date() }
          },
          { upsert: true }
        )
      );
    }

    const results = await Promise.allSettled(operations);
    const opTime = performance.now() - opStart;
    
    const successful = results.filter(r => r.status === 'fulfilled').length;
    const throughput = Math.round(successful / (opTime / 1000));

    console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${successful}/${testCount}`);
    console.log(`‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${opTime.toFixed(2)}ms`);
    console.log(`üìà Throughput: ${throughput} ops/sec`);

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await users.deleteMany({ userId: { $regex: /^perf-test-/ } });

    // –¢–µ—Å—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...');
    const leaderStart = performance.now();
    
    const leaderboard = await db.collection('leaderboard')
      .find({}, { projection: { username: 1, tokens: 1, rank: 1 } })
      .sort({ tokens: -1 })
      .limit(50)
      .toArray();
    
    const leaderTime = performance.now() - leaderStart;
    console.log(`üìã –ó–∞–ø–∏—Å–µ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: ${leaderboard.length}`);
    console.log(`‚ö° –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${leaderTime.toFixed(2)}ms`);

    // –ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ 2000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìà 2. –ü–†–û–ï–ö–¶–ò–Ø –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–ò');
    console.log('===============================');

    const avgRequestsPerUserPerMinute = 50; // –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    const targetUsers = 2000;
    const expectedLoad = targetUsers * avgRequestsPerUserPerMinute / 60; // requests/sec

    const databaseUtilization = Math.round(expectedLoad / throughput * 100);

    console.log(`üéØ –û–∂–∏–¥–∞–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${expectedLoad.toFixed(1)} req/sec`);
    console.log(`üìä –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ë–î: ${throughput} ops/sec`);
    console.log(`üìà –ó–∞–≥—Ä—É–∑–∫–∞ –ë–î: ${databaseUtilization}%`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° 3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('==================');

    const recommendations = [];

    if (databaseUtilization > 80) {
      recommendations.push('üö® –ö–†–ò–¢–ò–ß–ù–û: –£–≤–µ–ª–∏—á–∏—Ç—å connection pool –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã');
    } else if (databaseUtilization > 60) {
      recommendations.push('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } else {
      recommendations.push('‚úÖ –ë–î: –ì–æ—Ç–æ–≤–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ');
    }

    if (leaderTime > 50) {
      recommendations.push('üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');
    } else {
      recommendations.push('‚úÖ –õ–ò–î–ï–†–ë–û–†–î: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ');
    }

    recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec}`);
    });

    // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüèÅ 4. –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê');
    console.log('=====================');

    const readiness = {
      database: throughput > 500 && databaseUtilization < 80,
      leaderboard: leaderTime < 50,
      operations: successful === testCount
    };

    const readyComponents = Object.values(readiness).filter(Boolean).length;
    const totalComponents = Object.keys(readiness).length;

    console.log(`üìä –ì–û–¢–û–í–ù–û–°–¢–¨: ${readyComponents}/${totalComponents} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);

    Object.entries(readiness).forEach(([component, ready]) => {
      console.log(`   ${ready ? '‚úÖ' : '‚ùå'} ${component.toUpperCase()}: ${ready ? '–ì–û–¢–û–í' : '–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}`);
    });

    if (readyComponents === totalComponents) {
      console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Æ –ù–ê 2000 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô!');
    } else if (readyComponents >= totalComponents * 0.8) {
      console.log('\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, —Ç—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
    } else {
      console.log('\nüö® –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const report = {
      timestamp: new Date(),
      performance: {
        database: {
          throughput,
          connectionTime: connectTime,
          operationsSuccessful: successful,
          operationsTotal: testCount
        },
        leaderboard: {
          loadTime: leaderTime,
          recordsCount: leaderboard.length
        }
      },
      scalability: {
        expectedLoad,
        databaseUtilization,
        targetUsers
      },
      readiness,
      recommendations
    };

    const fs = require('fs');
    const reportPath = `optimization_test_${Date.now()}.json`;
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    console.log(`\nüìÅ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    if (client) {
      await client.close();
      console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

if (require.main === module) {
  testOptimizations().then(() => {
    console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  }).catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
} 